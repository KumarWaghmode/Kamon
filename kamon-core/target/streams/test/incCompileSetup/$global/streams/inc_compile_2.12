format version: 5
output mode:
1 items
0 -> single
output directories:
1 items
output dir -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes
compile options:
13 items
00 -> -encoding
01 -> utf8
02 -> -g:vars
03 -> -feature
04 -> -deprecation:false
05 -> -unchecked
06 -> -deprecation
07 -> -language:postfixOps
08 -> -language:implicitConversions
09 -> -Xlog-reflective-calls
10 -> -Ywarn-unused-import
11 -> -Ywarn-dead-code
12 -> -target:jvm-1.8
javac options:
5 items
0 -> -Xlint:-options
1 -> -source
2 -> 1.8
3 -> -target
4 -> 1.8
compiler version:
1 items
0 -> 2.12.1
compile order:
1 items
0 -> Mixed
name hashing:
1 items
0 -> true
products:
66 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/MetricScaleDecoratorSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SnapshotFixtures$ScaleDecoratorTestMetrics$.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SnapshotFixtures$ScaleDecoratorTestMetrics.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SnapshotFixtures.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SimpleMetricsSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/ForwarderSubscriber$$anonfun$receive$1.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/ForwarderSubscriber.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SubscriptionsProtocolSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TickMetricSnapshotBufferSpec$$anon$1.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TickMetricSnapshotBufferSpec$$anon$2.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TickMetricSnapshotBufferSpec$SnapshotFixtures.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TickMetricSnapshotBufferSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TraceMetricsSpec$$anon$1.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TraceMetricsSpec$$anon$2.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TraceMetricsSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$$anon$1.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$$anon$2.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$$anon$3.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$$anon$5.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$CounterFixture$$anon$4.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$CounterFixture.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$$anon$1.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$$anon$2.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$$anon$3.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$$anon$4.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$GaugeFixture.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$1.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$2.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$3.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$4.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$5.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$6.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$HistogramFixture$$anon$8.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$HistogramFixture.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$MultipleHistogramFixture$$anon$7.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$MultipleHistogramFixture.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$1.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$2.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$3.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$4.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$5.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$MinMaxCounterFixture$$anon$6.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$MinMaxCounterFixture.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterUpdateActor$$anonfun$receive$1.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterUpdateActor.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/UnitOfMeasurementSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/testkit/BaseKamonSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/SamplerSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/SegmentException$.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/SegmentException.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/SimpleTraceSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceException$.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceException.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceContextManipulationSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceLocalSpec$$anon$1.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceLocalSpec$SampleTraceLocalKey$.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceLocalSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/logging/MdcKeysSupportSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/util/GlobPathFilterSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/util/NeedToScaleSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/util/RegexPathFilterSpec.class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/util/executors/ExecutorServiceMetricsSpec.class
binary dependencies:
96 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/.ivy2/cache/com.typesafe/config/bundles/config-1.3.0.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> /home/diego/.ivy2/cache/com.typesafe/config/bundles/config-1.3.0.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.4.14.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.16.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> /home/diego/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.16.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> /home/diego/.ivy2/cache/com.typesafe/config/bundles/config-1.3.0.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> /home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> /home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> /home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> /home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar
direct source dependencies:
0 items
direct external dependencies:
0 items
public inherited source dependencies:
0 items
public inherited external dependencies:
0 items
member reference internal dependencies:
13 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
member reference external dependencies:
176 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.Kamon$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.Entity$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.EntityRecorderFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.EntitySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.GenericEntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.MetricScaleDecorator$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.MetricsModule
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.SubscriptionsDispatcher$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.Counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.Counter$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.Histogram$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.InstrumentFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.InstrumentFactory$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.Memory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.Memory$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.Time$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.UnitOfMeasurement
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.instrument.UnitOfMeasurement$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.util.MilliTimestamp
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.util.MilliTimestamp$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.Kamon$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.metric.MetricsModule
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.metric.MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.metric.instrument.Counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.metric.instrument.Gauge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.metric.instrument.Gauge$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.metric.instrument.Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.metric.instrument.Histogram$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.metric.instrument.MinMaxCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.Kamon$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.Entity$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.EntityRecorderFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.MetricsModule
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.SubscriptionsDispatcher$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.TraceMetrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.TraceMetrics$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.Kamon$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.Entity$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.EntityRecorderFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.EntitySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.GenericEntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.MetricsModule
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.SubscriptionsDispatcher$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.TickMetricSnapshotBuffer$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.TraceMetrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.TraceMetrics$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.instrument.Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.instrument.Histogram$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.util.MilliTimestamp
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.util.MilliTimestamp$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.metric.EntitySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.metric.instrument.Counter$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.metric.instrument.Histogram$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.trace.Segment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.trace.TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.trace.Tracer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.trace.Tracer$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.Counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.Counter$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.Instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.InstrumentSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.Time$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.UnitOfMeasurement
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.Kamon$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.MetricsSettings
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.Gauge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.Gauge$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.Histogram$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.Instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.RefreshScheduler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.Histogram$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.Instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.InstrumentSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.Time$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.UnitOfMeasurement
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.Kamon$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.MetricsSettings
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.Histogram$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.Instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounter$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.RefreshScheduler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> kamon.metric.instrument.Memory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> kamon.metric.instrument.Memory$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> kamon.metric.instrument.Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> kamon.metric.instrument.Time$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> kamon.metric.instrument.UnitOfMeasurement
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> kamon.metric.instrument.UnitOfMeasurement$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.Kamon$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.metric.Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.metric.Entity$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.metric.EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.metric.EntitySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.metric.MetricsModule
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.metric.MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.metric.SubscriptionsDispatcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.metric.SubscriptionsDispatcher$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.trace.TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.trace.TracerModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.util.LazyActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> kamon.trace.ClockSampler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> kamon.trace.OrderedSampler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> kamon.trace.RandomSampler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> kamon.trace.SampleAll$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> kamon.trace.ThresholdSampler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> kamon.util.NanoInterval
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> kamon.util.NanoInterval$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.Kamon$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.Segment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.SegmentInfo
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.Status
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.Status$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.TraceInfo
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.Tracer$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.TracerModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> kamon.trace.Segment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> kamon.trace.TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> kamon.trace.Tracer$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.TraceLocal$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.Tracer$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.logging.MdcKeysSupport
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.logging.MdcKeysSupport$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> kamon.trace.EmptyTraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> kamon.trace.EmptyTraceContext$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> kamon.trace.TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> kamon.trace.Tracer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> kamon.trace.Tracer$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> kamon.trace.logging.MdcKeysSupport
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> kamon.trace.logging.MdcKeysSupport$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> kamon.util.GlobPathFilter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> kamon.metric.instrument.Memory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> kamon.metric.instrument.Memory$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> kamon.metric.instrument.Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> kamon.metric.instrument.Time$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> kamon.util.NeedToScale$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> kamon.util.RegexPathFilter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> kamon.Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> kamon.Kamon$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> kamon.metric.Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> kamon.metric.Entity$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> kamon.metric.EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> kamon.metric.MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> kamon.util.executors.ExecutorServiceMetrics$
inheritance internal dependencies:
13 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> /home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala
inheritance external dependencies:
7 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.EntityRecorderFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.GenericEntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.TraceLocal$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.logging.MdcKeysSupport
class names:
66 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.MetricScaleDecoratorSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.SnapshotFixtures
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.SnapshotFixtures$ScaleDecoratorTestMetrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon.metric.SnapshotFixtures$ScaleDecoratorTestMetrics$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon.metric.SimpleMetricsSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.ForwarderSubscriber
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.ForwarderSubscriber$$anonfun$receive$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon.metric.SubscriptionsProtocolSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.TickMetricSnapshotBufferSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.TickMetricSnapshotBufferSpec$$anon$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.TickMetricSnapshotBufferSpec$$anon$2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon.metric.TickMetricSnapshotBufferSpec$SnapshotFixtures
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.metric.TraceMetricsSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.metric.TraceMetricsSpec$$anon$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon.metric.TraceMetricsSpec$$anon$2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.CounterSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.CounterSpec$$anon$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.CounterSpec$$anon$2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.CounterSpec$$anon$3
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.CounterSpec$$anon$5
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.CounterSpec$CounterFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon.metric.instrument.CounterSpec$CounterFixture$$anon$4
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.GaugeSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.GaugeSpec$$anon$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.GaugeSpec$$anon$2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.GaugeSpec$$anon$3
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.GaugeSpec$$anon$4
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon.metric.instrument.GaugeSpec$GaugeFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$$anon$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$$anon$2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$$anon$3
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$$anon$4
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$$anon$5
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$$anon$6
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$HistogramFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$HistogramFixture$$anon$8
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$MultipleHistogramFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon.metric.instrument.HistogramSpec$MultipleHistogramFixture$$anon$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterSpec$$anon$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterSpec$$anon$2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterSpec$$anon$3
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterSpec$$anon$4
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterSpec$$anon$5
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterSpec$MinMaxCounterFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterSpec$MinMaxCounterFixture$$anon$6
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterUpdateActor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon.metric.instrument.MinMaxCounterUpdateActor$$anonfun$receive$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> kamon.metric.instrument.UnitOfMeasurementSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon.testkit.BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> kamon.trace.SamplerSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.SegmentException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.SegmentException$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.SimpleTraceSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.TraceException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon.trace.TraceException$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> kamon.trace.TraceContextManipulationSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.TraceLocalSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.TraceLocalSpec$$anon$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon.trace.TraceLocalSpec$SampleTraceLocalKey$
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> kamon.trace.logging.MdcKeysSupportSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> kamon.util.GlobPathFilterSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> kamon.util.NeedToScaleSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> kamon.util.RegexPathFilterSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> kamon.util.executors.ExecutorServiceMetricsSpec
used names:
1879 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> !
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> +-
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> <refinement>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> <repeated>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> ActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> ActorSystem
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> ArrowAssoc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> B
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Bytes
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> ClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> EntityRecorderFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> EntitySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> GenericEntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> InstrumentFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> K
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> KiloBytes
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Long
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> LongIsIntegral
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Map
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Memory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> MetricScaleDecorator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> MetricScaleDecoratorSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Microseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> MilliTimestamp
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Milliseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Nanoseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Numeric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> OptionValues
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> PlusOrMinusWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Props
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> ScalaActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> ScaleDecoratorTestMetrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> SnapshotFixtures
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Some
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Spread
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> SubscriptionsDispatcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> TickMetricSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> TripleEqualsSupport
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Tuple2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> U
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> UnitOfMeasurement
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Unknown
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> V
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> Valuable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> _$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> actor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> actorOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> actorRef2Scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> byteMemory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> collect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> collectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> convertNumericToPlusOrMinusWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> convertOptionToValuable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> count
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> empty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> emptySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> expectMsg
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> expectMsgType
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> from
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> increment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> instrumentFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> kbyteMemory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> materializeClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> math
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> max
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> metrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> microTime
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> millis
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> nanoTime
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> nonEmptySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> props
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> record
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> recorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> reflect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> scalatest
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> scaleDecorator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> scaled
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> self
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> system
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> testActor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> testEntity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> to
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> unknownCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> unknownHistogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> value
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> when
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> which
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> →
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> $conforms
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> <:<
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> CurrentValueCollector
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> DurationInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> DynamicRange
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> FiniteDuration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Gauge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Long
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> MinMaxCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> NotWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> ResultOfNotWordForAny
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> ResultOfTheSameInstanceAsApplication
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> SimpleMetricsSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> TheSameInstanceAsPhrase
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> callByNameLongAsCurrentValueCollector
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> concurrent
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> counterA
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> counterB
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> duration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> gauge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> gaugeA
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> gaugeB
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> histogramA
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> histogramB
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> metrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> minMaxCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> minMaxCounterA
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> minMaxCounterB
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> not
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> removeCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> removeGauge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> removeHistogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> removeMinMaxCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> second
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> shouldBe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> theSameInstanceAs
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> A1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> AbstractPartialFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Actor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ActorContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ActorIdentity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ActorSelection
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ActorSystem
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> B1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Config
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ConfigFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ContainWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Containing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> DurationInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> E
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> EntityRecorderFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Equality
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> FiniteDuration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ForwarderSubscriber
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Function1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> GenTraversable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Identify
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ImplicitSender
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Inclusive
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Iterable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Map
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> MatcherFactory1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Range
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> RichInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> StringOps
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> SubscriptionsDispatcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> SubscriptionsProtocolSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> T0
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> TRAV
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> TYPECLASS1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> TestProbe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> TickMetricSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> TraceMetrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> U
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> _$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> actor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> actorSelection
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> akka
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> asInstanceOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> augmentString
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> com
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> concurrent
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> config
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> contain
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> containingNatureOfGenTraversable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> context
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> duration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> e
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> enablers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> expectMsgType
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> expectNoMsg
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> flushSubscriptions
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> foreach
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> forward
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> get
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> intWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> keys
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> listener
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> materializeClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> metrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> metricsModule
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> parseString
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> ref
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> reflect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> second
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> size
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> stripMargin
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> subscribe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> subscriber
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> system
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> target
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> tell
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> tickSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> to
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> typesafe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> unchecked
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> unsubscribe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> !
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> $anon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> $conforms
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> <:<
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> <repeated>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> ActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> ActorSystem
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Aggregating
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> ArrowAssoc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> B
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> ClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> ContainWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> DurationInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> E
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> EntityRecorderFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> EntitySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Equality
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> FiniteDuration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> GenTraversable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> ImplicitSender
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Iterator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> K
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Long
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Map
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> MatcherFactory1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> MilliTimestamp
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> MutableRecord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> NotWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Props
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Record
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> ResultOfContainWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> ResultOfNotWordForAny
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> ScalaActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> SnapshotFixtures
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Stream
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> SubscriptionsDispatcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Symbol
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> TRAV
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> TYPECLASS1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> TickMetricSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> TickMetricSnapshotBuffer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> TickMetricSnapshotBufferSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> TraceMetrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Tuple2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> V
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> _$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> actor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> actorOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> actorRef2Scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> aggregatingNatureOfGenTraversable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> akka
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> allOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> buffer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> buildDefaultCollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> collect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> collectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> concurrent
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> contain
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> duration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> e
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> elapsedTime
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> empty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> enablers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> equal
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> expectMsgType
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> expectNoMsg
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> firstEmpty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> firstNonEmpty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> from
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> get
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> materializeClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> max
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> mergedSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> metrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> millis
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> min
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> not
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> numberOfMeasurements
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> props
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> record
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> recordsIterator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> reflect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> secondEmpty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> secondNonEmpty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> seconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> self
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> system
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> testActor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> testMetricSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> testTraceIdentity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> thirdEmpty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> to
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> toStream
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> traceRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> within
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> →
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> $anon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> <repeated>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> ArrowAssoc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> B
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> ClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> EntitySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Function1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> ImplicitSender
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Inclusive
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Long
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Map
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> NoStackTrace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> NoSuchElementException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Range
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> RichInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> RuntimeException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Segment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Throwable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> TraceMetricsSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Tracer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Tuple2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> U
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> _$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> afterFinishSegmentSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> akka
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> beforeFinishSegmentSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> control
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> count
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> currentContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> finish
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> finishWithError
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> foreach
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> get
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> intWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> intercept
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> materializeClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> newContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> numberOfMeasurements
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> reflect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> s
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> segment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> startSegment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> takeSnapshotOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> to
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> trace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> withContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> →
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> $anon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> <refinement>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> ClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> CounterFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> CounterSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> InstrumentSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Long
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> LongBuffer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Matchers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Microseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Milliseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> SnapshotType
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> UnitOfMeasurement
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> UnsupportedOperationException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> WordSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> _$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> allocate
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> buffer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> collect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> collectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> count
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> counter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> counterA
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> counterASnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> counterB
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> counterBSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> counterSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> increment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> intercept
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> java
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> materializeClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> merge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> nio
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> reflect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> scalatest
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> scale
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> scaledSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> takeSnapshotFrom
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> $anon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> +-
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> AtomicLong
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> CurrentValueCollector
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> DurationInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> DynamicRange
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> FiniteDuration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Function0
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Gauge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> GaugeFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> GaugeSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Long
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> LongIsIntegral
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> MatchError
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> MetricsSettings
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Numeric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> PlusOrMinusWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> RefreshScheduler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> SnapshotType
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Spread
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> T1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> T2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Thread
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> TripleEqualsSupport
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Tuple2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> U
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> _1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> _2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> addAndGet
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> atomic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> buildDefaultCollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> cleanup
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> collect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> concurrent
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> convertNumericToPlusOrMinusWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> createGauge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> duration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> functionZeroAsCurrentValueCollector
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> gauge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> get
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> java
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> lang
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> math
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> max
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> metrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> millis
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> min
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> ne
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> numberOfMeasurements
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> numberOfValuesRecorded
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> recordedValuesCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> refreshInterval
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> refreshScheduler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> second
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> seconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> settings
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> sleep
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> toMillis
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> unchecked
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> $anon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> +-
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> <refinement>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Aggregating
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> ArrowAssoc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> B
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> ContainWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Double
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> DynamicRange
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> E
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Equality
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Function1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> GenTraversable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> HistogramFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> HistogramSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Inclusive
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> InstrumentSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Iterator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Long
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> LongBuffer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> LongIsIntegral
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> MatcherFactory1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Matchers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Milliseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> MultipleHistogramFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Numeric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> PlusOrMinusWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Random
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Range
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Record
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> ResultOfContainWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> RichInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Seconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Seq
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> SnapshotType
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Spread
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Stream
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> System
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> T0
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> TRAV
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> TYPECLASS1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> TripleEqualsSupport
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Tuple2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> U
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> UnitOfMeasurement
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> WordSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> _$1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> aggregatingNatureOfGenTraversable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> allocate
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> asInstanceOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> assertEquals
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> buffer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> collect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> collectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> contain
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> controlHistogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> controlSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> convertNumericToPlusOrMinusWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> count
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> e
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> enablers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> equal
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> foreach
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> histogramA
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> histogramASnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> histogramB
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> histogramBSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> intWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> java
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> lang
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> left
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> leftSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> level
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> map
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> math
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> max
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> merge
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> min
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> nanoTime
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> newRecording
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> nextInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> nio
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> numberOfMeasurements
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> percentile
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> r
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> random
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> record
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> records
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> recordsIterator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> right
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> rightSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> scalatest
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> scale
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> size
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> sum
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> takeSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> takeSnapshotFrom
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> theSameElementsAs
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> to
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> toLong
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> toSeq
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> toStream
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> which
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> →
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> !
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> $anon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> <refinement>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> <repeated>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> ==
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> A1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> AbstractPartialFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Actor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> ActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> ActorSystem
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Aggregating
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Array
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> B
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> B1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> CanBuildFrom
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> ClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Coll
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> ContainWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Containing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> DurationInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> DynamicRange
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> E
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Equality
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> FiniteDuration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Function1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> GenTraversable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Histogram
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Inclusive
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> IndexOutOfBoundsException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> IndexedSeq
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Iterator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Long
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> LongBuffer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> MatcherFactory1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> MetricsSettings
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> MinMaxCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> MinMaxCounterFixture
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> MinMaxCounterSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> MinMaxCounterUpdateActor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> MutableRecord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> PoisonPill
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Props
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Range
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Record
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> RefreshScheduler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> ResultOfContainWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> RichInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> ScalaActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> SnapshotType
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Stream
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> T0
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> TRAV
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> TYPECLASS1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> TestProbe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> That
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Thread
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> U
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> _$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> actor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> actorOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> actorRef2Scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> aggregatingNatureOfGenTraversable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> akka
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> allOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> allocate
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> asInstanceOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> buffer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> canBuildFrom
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> cleanup
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> collect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> collectCounterSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> collectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> concurrent
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> contain
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> containingNatureOfGenTraversable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> decrement
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> duration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> e
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> enablers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> expectNoMsg
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> firstSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> foreach
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> hour
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> immutable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> increment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> intWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> java
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> lang
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> map
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> materializeClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> max
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> metrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> min
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> mmCounter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> mmc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> monitor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> nio
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> ofDim
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> recordsIterator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> ref
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> reflect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> refreshScheduler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> refreshValues
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> secondSnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> self
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> settings
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> sleep
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> snapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> system
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> to
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> toStream
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> unchecked
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> workers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> x
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> +-
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Bytes
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> ClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Double
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> DoubleIsFractional
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> GigaBytes
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> IllegalArgumentException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> KiloBytes
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Matchers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> MegaBytes
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Memory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Microseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Milliseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Nanoseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Numeric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> PlusOrMinusWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Seconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Spread
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> TripleEqualsSupport
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> U
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> UnitOfMeasurement
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> UnitOfMeasurementSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> Unknown
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> WordSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> _$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> convertNumericToPlusOrMinusWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> epsilon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> ex
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> getMessage
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> intercept
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> materializeClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> math
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> reflect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> scalatest
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> scale
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> tryScale
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> ?0
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> ActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> ActorSystem
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> BeforeAndAfterAll
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> CollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Config
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> EntitySnapshot
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Field
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Future
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> ImplicitSender
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> LazyActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Map
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Matchers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> SubscriptionsDispatcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> T0
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Terminated
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> TestKitBase
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Tick
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> TracerModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> WordSpecLike
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> actor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> actorSystemName
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> akka
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> asInstanceOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> buildDefaultCollectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> category
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> collect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> collectionContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> com
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> config
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> find
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> get
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> getClass
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> getDeclaredField
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> metrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> name
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> newContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> recorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> scalatest
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> self
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> setAccessible
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> start
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> subscriptions
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> subscriptionsField
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> system
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> tags
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> tell
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> terminate
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> token
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> trace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> tracer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> typesafe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> ClockSampler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Long
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> NanoInterval
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> OrderedSampler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> RandomSampler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> SampleAll
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> SamplerSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Thread
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> ThresholdSampler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> java
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> lang
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> sampler
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> shouldReport
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> shouldTrace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> sleep
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> trace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> when
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> &&
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> <repeated>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> ==
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> AbstractFunction1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> ActorRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> ArrowAssoc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> B
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> ClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> DurationInt
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> FinishedWithError
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> FiniteDuration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Function1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> IndexOutOfBoundsException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Iterator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> List
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Map
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> NoStackTrace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> None
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Product
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> RuntimeException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> ScalaRunTime
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Segment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> SegmentException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> SegmentInfo
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Serializable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> SimpleTraceSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Some
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Status
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Symbol
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> T0
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Throwable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> TraceException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> TraceInfo
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Tracer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> TracerModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Tuple2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> _$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> _hashCode
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> _root_
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> asInstanceOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> concurrent
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> control
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> currentContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> duration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> eq
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> expectMsgType
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> expectNoMsg
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> find
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> finish
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> finishWithError
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> get
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> isInstanceOf
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> materializeClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> message
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> name
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> newContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> reflect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> runtime
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> secondSegment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> seconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> segment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> segmentOne
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> segmentTwo
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> segments
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> size
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> startSegment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> status
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> subscribe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> tags
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> testActor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> toString
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> trace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> traceInfo
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> tracer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> typedProductIterator
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> unsubscribe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> withContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> within
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> ||
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> →
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> <refinement>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> <repeated>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> ArrowAssoc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> B
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Emptiness
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> EmptyWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> K
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Map
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> NotWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> ResultOfNotWordForAny
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Segment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> TraceContextManipulationSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Tracer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Tuple2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> V
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> addTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> createdContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> currentContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> emptinessOfAnyRefWithParameterlessIsEmptyMethod
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> empty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> enablers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> name
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> newContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> not
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> removeTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> rename
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> segment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> shouldBe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> startSegment
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> tags
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> token
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> trace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> withContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> →
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> $anon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> AnyRef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> AvailableToMdc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Class
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> ClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Equality
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> MDC
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> MatcherFactory1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> MdcKeysSupport
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> NoSuchElementException
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> None
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> OptionValues
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> PatienceConfiguration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> SampleTraceLocalKey
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> SampleTraceLocalKeyAvailableToMDC
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Supplier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> TYPECLASS1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> TraceLocal
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> TraceLocalKey
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> TraceLocalSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Tracer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> Valuable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> _$7
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> concurrent
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> convertOptionToValuable
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> currentContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> equal
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> function
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> get
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> getOrElse
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> intercept
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> java
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> logging
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> materializeClassTag
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> newContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> reflect
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> retrieve
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> scalatest
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> slf4j
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> store
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> storeForMdc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> testContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> testString
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> trace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> value
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> withContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> withMdc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> EmptyTraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> MDC
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> MdcKeysSupport
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> MdcKeysSupportSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> None
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Some
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> TraceContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Tracer
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> get
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> logging
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> slf4j
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> trace
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> traceNameKey
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> traceTokenKey
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> when
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> withContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> withMdc
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> withNewContext
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> GlobPathFilter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> GlobPathFilterSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Matchers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> WordSpecLike
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> accept
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> filter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> scalatest
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> shouldBe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> A
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Config
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> ConfigFactory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> KiloBytes
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> MatchError
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Matcher
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Matchers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Memory
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Milliseconds
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> NeedToScale
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> NeedToScaleSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> None
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Some
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> StringOps
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Time
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Tuple2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> WordSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> _1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> _2
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> augmentString
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> com
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> config
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> fail
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> get
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> instrument
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> isEmpty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> memoryUnits
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> parseString
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> scalatest
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> stripMargin
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> timeUnits
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> typesafe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> unapply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> unary_!
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Boolean
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Matchers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Object
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> RegexPathFilter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> RegexPathFilterSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> WordSpecLike
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> accept
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> filter
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> scalatest
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> shouldBe
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> util
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> <byname>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> <init>
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Any
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> AnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Assertion
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> BaseKamonSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> BeWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> E
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Emptiness
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> EmptyWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> EntityRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> ExecutorService
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> ExecutorServiceMetrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> ExecutorServiceMetricsSpec
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Executors
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> ForkJoinPool
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Int
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> MatcherFactory1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> MetricsModuleImpl
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> NotWord
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Nothing
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> OPT
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Option
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Position
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Predef
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Prettifier
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> ResultOfNotWordForAny
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> ScheduledExecutorService
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> String
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> StringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> StringVerbBlockRegistration
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> T
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> TYPECLASS1
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> Unit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> WordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> apply
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> be
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> concurrent
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> convertToAnyShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> convertToStringShouldWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> convertToWordSpecStringWrapper
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> default
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> e
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> emptinessOfOption
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> empty
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> enablers
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> entity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> executors
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> find
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> findExecutorRecorder
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> forkjoin
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> here
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> in
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> java
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> javaForkJoinPool
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> javaForkJoinPoolEntity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> kamon
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> metric
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> metrics
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> newCachedThreadPool
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> newSingleThreadExecutor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> newSingleThreadScheduledExecutor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> newWorkStealingPool
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> not
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> org
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> package
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> register
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> remove
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> scala
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> scalaForkJoinPool
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> scalaForkJoinPoolEntity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> scalactic
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> scheduledThreadPoolEntity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> scheduledThreadPoolExecutor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> should
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> singleThreadPoolExecutor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> singleThreadPoolExecutorEntity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> source
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> subjectRegistrationFunction
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> testkit
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> threadPoolExecutor
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> threadPoolExecutorEntity
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> util
product stamps:
66 items
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/ForwarderSubscriber$$anonfun$receive$1.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/ForwarderSubscriber.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/MetricScaleDecoratorSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SimpleMetricsSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SnapshotFixtures$ScaleDecoratorTestMetrics$.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SnapshotFixtures$ScaleDecoratorTestMetrics.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SnapshotFixtures.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/SubscriptionsProtocolSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TickMetricSnapshotBufferSpec$$anon$1.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TickMetricSnapshotBufferSpec$$anon$2.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TickMetricSnapshotBufferSpec$SnapshotFixtures.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TickMetricSnapshotBufferSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TraceMetricsSpec$$anon$1.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TraceMetricsSpec$$anon$2.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/TraceMetricsSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$$anon$1.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$$anon$2.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$$anon$3.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$$anon$5.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$CounterFixture$$anon$4.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec$CounterFixture.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/CounterSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$$anon$1.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$$anon$2.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$$anon$3.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$$anon$4.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec$GaugeFixture.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/GaugeSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$1.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$2.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$3.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$4.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$5.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$$anon$6.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$HistogramFixture$$anon$8.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$HistogramFixture.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$MultipleHistogramFixture$$anon$7.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec$MultipleHistogramFixture.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/HistogramSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$1.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$2.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$3.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$4.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$$anon$5.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$MinMaxCounterFixture$$anon$6.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec$MinMaxCounterFixture.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterUpdateActor$$anonfun$receive$1.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/MinMaxCounterUpdateActor.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/metric/instrument/UnitOfMeasurementSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/testkit/BaseKamonSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/SamplerSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/SegmentException$.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/SegmentException.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/SimpleTraceSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceContextManipulationSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceException$.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceException.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceLocalSpec$$anon$1.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceLocalSpec$SampleTraceLocalKey$.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/TraceLocalSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/trace/logging/MdcKeysSupportSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/util/GlobPathFilterSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/util/NeedToScaleSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/util/RegexPathFilterSpec.class -> lastModified(1481318759000)
/home/diego/gitHub/Kamon/kamon-core/target/scala-2.12/test-classes/kamon/util/executors/ExecutorServiceMetricsSpec.class -> lastModified(1481318759000)
source stamps:
20 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> hash(183e4a80a9a2f1107b046f6788f030feeb58ac1f)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> hash(083e331d5c30adfd5f3a7fa458e40289387d6aed)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> hash(0bb672440800cf21fd93f30599e246dbbc92aa0b)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> hash(28bc8b90d436aaebffac4851a6ef890f812527e6)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> hash(51370f4d0f9002a76f3ca4b54a05529c47e85ad1)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> hash(b4919bc5ad8f74c4fa703cb9a579fadec00b61ea)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> hash(7ace898d92881bc92dca6cd0bf68d9e3bc1000c8)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> hash(18941f086698f85f36e38f824e89f5758d4e7ae9)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> hash(7c8dabb2d0fd80f6e48fa1ec52ec332485f2982b)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> hash(b9837d25334662a69b7a5e3503149e2031a83079)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> hash(33a86bb664a7b200bf606613d5ea991d8b945d12)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> hash(a6778ac038351cb0b8029c7afc9e8fbfc9b09adf)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> hash(26c935ea5266ad2c519e9ae11a8aae9c71d2a4d8)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> hash(8823fcf90746740e349940f63d96b02af2f20f09)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> hash(a6131f51c388e83359555d24b6299281f71d813b)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> hash(b42133096c4596b55c1bb2d920dd8d2767b6fdee)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> hash(96cb16126f8fd45d26463c023a73b90fb3293b63)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> hash(7dd1a54c742d51543c7a6dc087776cbdde068f4a)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> hash(e70da3ca158736c35986ea125965a58fb8fc9cb9)
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> hash(d425d669f5f0e1bc988b511f8f5bbcbea934c9a7)
binary stamps:
8 items
/home/diego/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.4.14.jar -> lastModified(1479741380000)
/home/diego/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.4.14.jar -> lastModified(1479741447000)
/home/diego/.ivy2/cache/com.typesafe/config/bundles/config-1.3.0.jar -> lastModified(1431099969000)
/home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar -> lastModified(1480936165000)
/home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar -> lastModified(1478757013000)
/home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar -> lastModified(1478757171000)
/home/diego/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.16.jar -> lastModified(1455224155000)
/home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar -> lastModified(1454008812000)
class names:
8 items
/home/diego/.ivy2/cache/com.typesafe.akka/akka-actor_2.12/jars/akka-actor_2.12-2.4.14.jar -> akka.actor.ActorRef
/home/diego/.ivy2/cache/com.typesafe.akka/akka-testkit_2.12/jars/akka-testkit_2.12-2.4.14.jar -> akka.testkit.TestKitBase
/home/diego/.ivy2/cache/com.typesafe/config/bundles/config-1.3.0.jar -> com.typesafe.config.Config
/home/diego/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.1.jar -> scala.Predef$
/home/diego/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.1.jar -> org.scalactic.Prettifier
/home/diego/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.1.jar -> org.scalatest.words.ResultOfNotWordForAny
/home/diego/.ivy2/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.16.jar -> org.slf4j.MDC
/home/diego/Programs/zulu8.13.0.5-jdk8.0.72/jre/lib/rt.jar -> java.util.concurrent.Executors
internal apis:
20 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwm/EOuQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAA9zcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHC8Xzh7dAAjY29udmVydFRvU3RyaW5nU2hvdWxkV3JhcHBlckZvclZlcmJzcQB+AAv+z5nKdAAZY29udmVydFRvU3RyaW5nQ2FuV3JhcHBlcnNxAH4AC8WwRgV0AAZzeXN0ZW1zcQB+AAtDlm2edAAeY29udmVydFRvV29yZFNwZWNTdHJpbmdXcmFwcGVyc3EAfgALGEs4UHQAGWNvbnZlcnRUb0FueVNob3VsZFdyYXBwZXJzcQB+AAs6n5LudAAiY29udmVydE51bWVyaWNUb1BsdXNPck1pbnVzV3JhcHBlcnNxAH4AC46c4pB0ABJjb252ZXJ0VG9FcXVhbGl6ZXJzcQB+AAvOS49OdAAEc2VsZnNxAH4AC/5yQbR0AChzdWJqZWN0V2l0aEFmdGVyV29yZFJlZ2lzdHJhdGlvbkZ1bmN0aW9uc3EAfgALF9oSbHQAFWNvbnZlcnRUb1JlZ2V4V3JhcHBlcnNxAH4AC1edlN50ABV1bmNvbnN0cmFpbmVkRXF1YWxpdHlzcQB+AAvgIhsMdAAhY29udmVydFRvU3RyaW5nTXVzdFdyYXBwZXJGb3JWZXJic3EAfgALG87TanQAHGNvbnZlcnRUb1N0cmluZ1Nob3VsZFdyYXBwZXJzcQB+AAtg/PrcdAArY29udmVydFN5bWJvbFRvSGF2ZVByb3BlcnR5TWF0Y2hlckdlbmVyYXRvcnNxAH4AC6EvYpt0ABtzdWJqZWN0UmVnaXN0cmF0aW9uRnVuY3Rpb251cQB+AAkAAAE3c3EAfgALxt3/e3QAC2luT3JkZXJPbmx5c3EAfgALdD71n3QABmFzc2VydHNxAH4AC9ZDCQZ0AAxjaGlsZEFjdG9yT2ZzcQB+AAt+BedbdAAeUmVzdWx0T2ZTdGFydFdpdGhXb3JkRm9yU3RyaW5nc3EAfgAL+e1gwnQAB3N1Y2NlZWRzcQB+AAu7SgOcdAASUGx1c09yTWludXNXcmFwcGVyc3EAfgALYKuAG3QABm5vdGlmeXNxAH4AC+O5g+F0ACZsb3dQcmlvcml0eUNvbnZlcnNpb25DaGVja2VkQ29uc3RyYWludHNxAH4ACxTGoKR0AAlzaG91bGROb3RzcQB+AAsO+zLtdAAVV29yZFNwZWNTdHJpbmdXcmFwcGVyc3EAfgALFd08MXQABXJlZ2V4c3EAfgALPBrMAnQABkFuV29yZHNxAH4AC2mWHsh0ABBBc3NlcnRpb25zSGVscGVyc3EAfgALLElplXQABmNhbmNlbHNxAH4AC42DYiN0ABFleGVjdXRlJGRlZmF1bHQkMnNxAH4AC9a++cx0ABBub25FbXB0eVNuYXBzaG90c3EAfgALexalEnQACWludGVyY2VwdHNxAH4AC0Ef+E90AARmYWlsc3EAfgALzDo6SXQABG5hbWVzcQB+AAsb5EuNdAAaZXhwZWN0VGVybWluYXRlZCRkZWZhdWx0JDJzcQB+AAtkBjkkdAACaW5zcQB+AAsPa8nodAAcSGF2ZVByb3BlcnR5TWF0Y2hlckdlbmVyYXRvcnNxAH4AC7yk/h10AAVBV29yZHNxAH4AC4unYW10AARoYXZlc3EAfgALYvnp8nQAFGFzc2VydERvZXNOb3RDb21waWxlc3EAfgAL9wNTK3QAEWV4ZWN1dGUkZGVmYXVsdCQ0c3EAfgALxhJWsHQAIlJlc3VsdE9mQ29udGFpbldvcmRGb3JDb2xsZWN0ZWRBbnlzcQB+AAvqJbkadAACaXNzcQB+AAtmTpa8dAAScmVtYWluaW5nT3JEZWZhdWx0c3EAfgAL8m4Go3QAB2V4ZWN1dGVzcQB+AAtwhuQTdAAEd2FpdHNxAH4AC2nMfZh0ABNleHBlY3RNc2dBbGxDbGFzc09mc3EAfgALFvyfU3QADkRldGVybWluZWRXb3Jkc3EAfgALBq/UR3QAC3Rlc3REYXRhRm9yc3EAfgALwhYjN3QAE2NyZWF0ZUNhdGNoUmVwb3J0ZXJzcQB+AAv0amDVdAACPD1zcQB+AAuSKWvZdAAJc3R5bGVOYW1lc3EAfgALyu81snQAFnJlY2VpdmVXaGlsZSRkZWZhdWx0JDJzcQB+AAvvXmAAdAANbGVmdFNpZGVWYWx1ZXNxAH4AC1okY450ABNhdExlYXN0T25lRWxlbWVudE9mc3EAfgALvWKkBnQADSRhc0luc3RhbmNlT2ZzcQB+AAtGCb0vdAAFZW1wdHlzcQB+AAsim2GMdAAWcmVjZWl2ZVdoaWxlJGRlZmF1bHQkMXNxAH4AC2PMwPJ0AAlzdGFydFdpdGhzcQB+AAu44dHCdAAOZXhwZWN0TXNnQ2xhc3NzcQB+AAvffN02dAAEc2l6ZXNxAH4ACy/HYn10ABFleGVjdXRlJGRlZmF1bHQkM3NxAH4AC8LXeeN0AAtleHBlY3RNc2dQRnNxAH4ACxjSwGx0AA9yZW1vdmVIaXN0b2dyYW1zcQB+AAsdwy55dAAUUmVzdWx0T2ZDb2xsZWN0ZWRBbnlzcQB+AAthilKTdAANYWxsRWxlbWVudHNPZnNxAH4AC08A8Th0AAVleGlzdHNxAH4AC3ioU+t0ABNleHBlY3RNc2dBbnlDbGFzc09mc3EAfgALXryKXHQACUFmdGVyV29yZHNxAH4AC0XIFRl0AAljb25maWdNYXBzcQB+AAuL04F3dAAPdGVzdEtpdFNldHRpbmdzc3EAfgALalKtXXQACVZhbHVlV29yZHNxAH4ACzk3hmx0ABFjb2xsZWN0aW9uQ29udGV4dHNxAH4AC4R4AmR0AAtrYnl0ZU1lbW9yeXNxAH4AC4aZntB0AAZlcXVhbHNzcQB+AAttFsqpdAAMYXRMZWFzdE9uZU9mc3EAfgALfqJZN3QAB2F0TGVhc3RzcQB+AAsVS1j3dAAIdGhyb3duQnlzcQB+AAstDK3HdAAsY29udmVydEVxdWl2YWxlbmNlVG9BVG9CQ29udmVyc2lvbkNvbnN0cmFpbnRzcQB+AAtkPofIdAANZW1wdHlTbmFwc2hvdHNxAH4AC4ciMJ50AA9kZWZhdWx0RXF1YWxpdHlzcQB+AAureh/ldAAKcmVjZWl2ZU9uZXNxAH4AC8VDtPJ0ACJjb252ZXJ0RXF1aXZhbGVuY2VUb0FUb0JDb25zdHJhaW50c3EAfgALTazC6nQAHFJlc3VsdE9mRW5kV2l0aFdvcmRGb3JTdHJpbmdzcQB+AAtbMme9dAAKYnl0ZU1lbW9yeXNxAH4AC0NX7Kl0AARtdXN0c3EAfgALtUiFbXQAFWF3YWl0QXNzZXJ0JGRlZmF1bHQkMnNxAH4AC5TGziF0AANhbGxzcQB+AAtSXuMxdAAEdGFnc3NxAH4AC1A7N810AAxhc0luc3RhbmNlT2ZzcQB+AAshS3TedAABPHNxAH4AC8IUl9h0AAVhbGVydHNxAH4AC6wWtJ90AAtsYXN0TWVzc2FnZXNxAH4ACxF6OQp0AAdpbk9yZGVyc3EAfgALdMVdo3QACnByZXR0aWZpZXJzcQB+AAvPwrfQdAAIcmVjZWl2ZU5zcQB+AAsrl10hdAATYXdhaXRDb25kJGRlZmF1bHQkMnNxAH4AC6+GgeR0AANydW5zcQB+AAusWRcjdAARRGVjaWRlZEJ5RXF1YWxpdHlzcQB+AAt30OZwdAAFZXZlcnlzcQB+AAvs9Dw1dAAHdW53YXRjaHNxAH4ACyioSel0AAZzY29wZXNzcQB+AAtq9q02dAADcG9zc3EAfgALT4pzFHQACWJlZm9yZUFsbHNxAH4AC61HZT10AAp3aXRoR3JvdXBzc3EAfgALLE8r4HQADHN5bmNocm9uaXplZHNxAH4AC1R92Vh0AAJpdHNxAH4AC5tn6eR0AA1leHBlY3RNc2dUeXBlc3EAfgALSV/UD3QAB0tleVdvcmRzcQB+AAuRYkt4dAARdGhlU2FtZUVsZW1lbnRzQXNzcQB+AAv7BcBtdAAOYXNzZXJ0Q29tcGlsZXNzcQB+AAs0ryb/dAAFd2F0Y2hzcQB+AAsKjlw7dAAKZGV0ZXJtaW5lZHNxAH4AC23P/0l0AAFhc3EAfgALM1y0FHQADGFzc2VydFRocm93c3NxAH4AC8tMmf10ABlTY2FsZURlY29yYXRvclRlc3RNZXRyaWNzc3EAfgALgy3R7XQADmxlZnRTaWRlU3RyaW5nc3EAfgAL7sk4w3QADSRpc0luc3RhbmNlT2ZzcQB+AAu7+tDmdAAEdHJhcHNxAH4AC1DN/dh0ABV0ZXN0RGF0YUZvciRkZWZhdWx0JDJzcQB+AAv8BEbcdAAMYXNzZXJ0UmVzdWx0c3EAfgALRn9X/XQACG5hbm9UaW1lc3EAfgALUAlXn3QAHlJlc3VsdE9mTm90V29yZEZvckNvbGxlY3RlZEFueXNxAH4ACxb1sXp0AA5leHBlY3RNc2dBbGxPZnNxAH4AC/0X+D10AAI+PXNxAH4AC+mh4450AAZ3aXRoaW5zcQB+AAvf1GfedAAMb25lRWxlbWVudE9mc3EAfgALe1OA63QAC3JlbW92ZUdhdWdlc3EAfgALYLx7zXQAF1N0cmluZ0NhbldyYXBwZXJGb3JWZXJic3EAfgALZKoi53QABHRleHRzcQB+AAsxzhN0dAAKdGVzdEVudGl0eXNxAH4AC/7hIRZ0ACVSZXN1bHRPZkluY2x1ZGVXb3JkRm9yQ29sbGVjdGVkU3RyaW5nc3EAfgALVJ19OnQALGNvbnZlcnRFcXVpdmFsZW5jZVRvQlRvQUNvbnZlcnNpb25Db25zdHJhaW50c3EAfgALeHLVAnQAFWV4cGVjdE1zZ1BGJGRlZmF1bHQkMXNxAH4AC5sQ3+J0AAZjb25maWdzcQB+AAtUVobwdAAHY29udGFpbnNxAH4ACxoFGhJ0AApuZXdDb250ZXh0c3EAfgALvCZ35XQAE3JlbW92ZU1pbk1heENvdW50ZXJzcQB+AAsvj0/XdAAEdGhleXNxAH4AC9mDVzR0AAdjb21waWxlc3EAfgALSjyV83QAEWV4ZWN1dGUkZGVmYXVsdCQ3c3EAfgALnsCLeHQAB2V4YWN0bHlzcQB+AAv7O4r5dAARdGhlU2FtZUluc3RhbmNlQXNzcQB+AAumLxWcdAALYXdhaXRBc3NlcnRzcQB+AAun1JjcdAAnUmVzdWx0T2ZTdGFydFdpdGhXb3JkRm9yQ29sbGVjdGVkU3RyaW5nc3EAfgALGT/y3XQAEWluT3JkZXJFbGVtZW50c09mc3EAfgALDMJJenQADmNyZWF0ZVJlY29yZGVyc3EAfgAL3rew0XQAC0RlY2lkZWRXb3Jkc3EAfgALoCwUWnQAFXR5cGVDaGVja2VkQ29uc3RyYWludHNxAH4AC2OPF110AAMhPT1zcQB+AAsVz+aEdAAGYXRNb3N0c3EAfgAL/APGFHQABGluZm9zcQB+AAuFH00wdAALbm9FeGNlcHRpb25zcQB+AAvxSrJXdAAJbm90aWZ5QWxsc3EAfgALuRG/NHQABHRoYXRzcQB+AAsk1iw6dAAKc3RhY2tEZXB0aHNxAH4AC0dgF9R0AAt3aXRoRml4dHVyZXNxAH4AC8j+aad0AAloaXN0b2dyYW1zcQB+AAvQjnlvdAAHcnVuVGVzdHNxAH4ACxCB9Lp0AAlhd2FpdENvbmRzcQB+AAu+sOmCdAAdUmVzdWx0T2ZCZVdvcmRGb3JDb2xsZWN0ZWRBbnlzcQB+AAtR9pfVdAADa2V5c3EAfgALgbhg+HQAA25vd3NxAH4ACyTuwgp0AAxpc0luc3RhbmNlT2ZzcQB+AAsnJv1gdAAId2l0aENsdWVzcQB+AAsP8JBGdAAQYXNzZXJ0aW9uc0hlbHBlcnNxAH4ACzjHvAV0ABFleGVjdXRlJGRlZmF1bHQkNnNxAH4ACzOzu9l0AA1taW5NYXhDb3VudGVyc3EAfgALaNbnanQACHRhZ2dlZEFzc3EAfgALu8HCLHQAD2Fzc2VydFR5cGVFcnJvcnNxAH4AC1IBXO50ABBTbmFwc2hvdEZpeHR1cmVzc3EAfgALVQoq6nQAJVJlc3VsdE9mRW5kV2l0aFdvcmRGb3JDb2xsZWN0ZWRTdHJpbmdzcQB+AAt1Q1fQdAAGbWFya3Vwc3EAfgALE5ISbHQACHNodXRkb3duc3EAfgALfkncsXQAEHVua25vd25IaXN0b2dyYW1zcQB+AAua035+dAAIbGVmdFNpZGVzcQB+AAvKbvQ/dAATYXdhaXRDb25kJGRlZmF1bHQkM3NxAH4ACwrV99p0ABhleHBlY3RNc2dBbGxDb25mb3JtaW5nT2ZzcQB+AAuDGAnhdAAGPGluaXQ+c3EAfgALLMI0qXQAC21hY3JvQXNzdW1lc3EAfgALV7liYXQAD3J1bk5lc3RlZFN1aXRlc3NxAH4AC1nqJ+N0ABlSZXN1bHRPZkhhdmVXb3JkRm9yRXh0ZW50c3EAfgAL/ZAkEHQADG1zZ0F2YWlsYWJsZXNxAH4AC2VfEel0AANjYW5zcQB+AAtwqIWZdAAMc2V0QXV0b1BpbG90c3EAfgALxpgmzXQABWJlaW5nc3EAfgALg7BH/3QABWVxdWFsc3EAfgALg4KASnQABkl0V29yZHNxAH4ACydu2210AA50YWtlU25hcHNob3RPZnNxAH4AC6suNqR0AAhhcmVFcXVhbHNxAH4AC1lDMRx0AAZub25lT2ZzcQB+AAti9PA0dAAFYXBwbHlzcQB+AAvKn7oZdAAJd2l0aEdyb3Vwc3EAfgAL+2KrFHQAC2lnbm9yZU5vTXNnc3EAfgALUKwVeHQABWFmdGVyc3EAfgALExtGLnQAB2NsZWFudXBzcQB+AAsIUQs1dAAJRXF1YWxpemVyc3EAfgALPm2QInQACmFmdGVyQmVpbmdzcQB+AAvPAnMNdAAiUmVzdWx0T2ZUYWdnZWRBc0ludm9jYXRpb25PblN0cmluZ3NxAH4AC3gcEj50ABtuZXdBc3NlcnRpb25GYWlsZWRFeGNlcHRpb25zcQB+AAu49EA3dAAEbm90ZXNxAH4AC/5sy/F0AAI9PXNxAH4ACz/HB4d0ABJzaHV0ZG93biRkZWZhdWx0JDJzcQB+AAvS6exTdAACYnlzcQB+AAtFzJjgdAAGc29ydGVkc3EAfgAL/S/FyXQACmZ1bGx5TWF0Y2hzcQB+AAuWk5LKdAAFY2xvbmVzcQB+AAvLFlgOdAAJcmVtYWluaW5nc3EAfgALCoyGA3QADnVua25vd25Db3VudGVyc3EAfgALzHg8gHQACWlnbm9yZU1zZ3NxAH4AC3eMJWh0ABNTdHJpbmdTaG91bGRXcmFwcGVyc3EAfgALuuyMenQABnNob3VsZHNxAH4AC5Yvj710ABBBbnlTaG91bGRXcmFwcGVyc3EAfgALTNqEuHQAF0RldGVybWluZWRCeUVxdWl2YWxlbmNlc3EAfgALzmtyz3QAA25vdHNxAH4ACw9DgJR0AB9SZXN1bHRPZkJlV29yZEZvckNvbGxlY3RlZEFycmF5c3EAfgALA6FhInQAEmZsdXNoU3Vic2NyaXB0aW9uc3NxAH4AC/mduLR0AAlkZWZpbmVkQXRzcQB+AAv1qAzcdAAMbmVzdGVkU3VpdGVzc3EAfgALI2Ypi3QABmFzc3VtZXNxAH4AC+H1H6h0AAYkaW5pdCRzcQB+AAs7KvYodAAHZGVmaW5lZHNxAH4AC7C/LYB0ACBsb3dQcmlvcml0eVR5cGVDaGVja2VkQ29uc3RyYWludHNxAH4ACxWGoeh0AAl0ZXN0QWN0b3JzcQB+AAuGo02QdAAHaW5jbHVkZXNxAH4ACzBYufp0AAhUaGV5V29yZHNxAH4AC3Qw+HF0ABJzaHV0ZG93biRkZWZhdWx0JDFzcQB+AAtilttUdAAMcmVnaXN0ZXJUZXN0c3EAfgALg9Uo9HQACXR5cGVDaGVja3NxAH4AC3/alMV0ABFleGVjdXRlJGRlZmF1bHQkNXNxAH4ACyZWmMZ0AAhjYXRlZ29yeXNxAH4AC9kYrOh0AAM9PT1zcQB+AAtgRRrqdAAYbmV3VGVzdENhbmNlbGVkRXhjZXB0aW9uc3EAfgALQ3HPNnQAB21lc3NhZ2VzcQB+AAsoAFK1dAAMcmVjZWl2ZVdoaWxlc3EAfgALKBsKhnQAB2NvdW50ZXJzcQB+AAt4lTGpdAAIdG9TdHJpbmdzcQB+AAtNXHdsdAAJYWZ0ZXJXb3Jkc3EAfgAL0MjPBnQABWdhdWdlc3EAfgALhkTLxnQABXdoaWNoc3EAfgALCtqbWHQACXRlc3ROYW1lc3NxAH4AC/VXpKp0AA95ZU9sZGVUZXN0TmFtZXNzcQB+AAuE4hl3dAACYW5zcQB+AAvjKJG7dAAGbGVuZ3Roc3EAfgAL5KdTznQADmV4cGVjdE1zZ0FueU9mc3EAfgALLlxpJnQAGFN0cmluZ011c3RXcmFwcGVyRm9yVmVyYnNxAH4ACxXWzmN0ABFleGVjdXRlJGRlZmF1bHQkMXNxAH4AC8n4kvJ0AAJiZXNxAH4AC4LZJFR0AAIhPXNxAH4AC9w+yOF0ACJSZXN1bHRPZkhhdmVXb3JkRm9yQ29sbGVjdGVkRXh0ZW50c3EAfgAL4YtqmnQAH1Jlc3VsdE9mRnVsbHlNYXRjaFdvcmRGb3JTdHJpbmdzcQB+AAsp/8IldAAyaW52b2tlQmVmb3JlQWxsQW5kQWZ0ZXJBbGxFdmVuSWZOb1Rlc3RzQXJlRXhwZWN0ZWRzcQB+AAtdDa/cdAAMbWF0Y2hQYXR0ZXJuc3EAfgALS1Pd2nQAB2NvbGxlY3RzcQB+AAvL6S5LdAAIZ2V0Q2xhc3NzcQB+AAsRjudhdAATcmVnaXN0ZXJJZ25vcmVkVGVzdHNxAH4AC4Ldwoh0AAZiZWhhdmVzcQB+AAtRIbvidAAYZmlzaEZvck1lc3NhZ2UkZGVmYXVsdCQxc3EAfgALnEUA9nQACHJ1blRlc3Rzc3EAfgALQ49z3nQAEXBlbmRpbmdVbnRpbEZpeGVkc3EAfgALuBvLfHQAEmF0TW9zdE9uZUVsZW1lbnRPZnNxAH4AC+5mo+p0AAtleHBlY3ROb01zZ3NxAH4AC46NRC90ABh0aGVTYW1lRWxlbWVudHNJbk9yZGVyQXNzcQB+AAspPqv+dAAXVGhlU2FtZUluc3RhbmNlQXNQaHJhc2VzcQB+AAtD2+ZfdAAWcmVjZWl2ZVdoaWxlJGRlZmF1bHQkM3NxAH4AC6JBlPN0ABVleHBlY3RNc2dQRiRkZWZhdWx0JDJzcQB+AAtmd32KdAANYXJlRXF1aXZhbGVudHNxAH4AC4rmvHF0AAdiZXR3ZWVuc3EAfgALwBNddXQACGFmdGVyQWxsc3EAfgALSTZzuXQAB2RlY2lkZWRzcQB+AAumi4NbdAAUUmVzdWx0T2ZCZVdvcmRGb3JBbnlzcQB+AAuMo9dkdAARZXhwZWN0ZWRUZXN0Q291bnRzcQB+AAtJu5RIdAAHZW5kV2l0aHNxAH4AC0L7EPN0AAxub0VsZW1lbnRzT2ZzcQB+AAvWI3Q2dAAIcmVydW5uZXJzcQB+AAvuYSUedAALc2hvdWxkRXF1YWxzcQB+AAuNDw3tdAAJUmVnZXhXb3Jkc3EAfgAL/Si1AHQADFRoZUFmdGVyV29yZHNxAH4AC8bEBnB0ACJjb252ZXJ0RXF1aXZhbGVuY2VUb0JUb0FDb25zdHJhaW50c3EAfgALAOmlgHQABW9uZU9mc3EAfgALLlAAlXQAAm5lc3EAfgALVPQwynQAC3JlbWFpbmluZ09yc3EAfgAL7co46nQACWV4cGVjdE1zZ3NxAH4AC3gmy1J0ABhNZXRyaWNTY2FsZURlY29yYXRvclNwZWNzcQB+AAuD4N5qdAAYZmlzaEZvck1lc3NhZ2UkZGVmYXVsdCQyc3EAfgALJZYp9XQADXRlc3RBY3Rvck5hbWVzcQB+AAsO6WSddAAQZXhwZWN0VGVybWluYXRlZHNxAH4AC5eA2mN0AAJub3NxAH4AC+5Wqm10ABJzaHV0ZG93biRkZWZhdWx0JDNzcQB+AAtDmXxWdAAoUmVzdWx0T2ZGdWxseU1hdGNoV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4AC8UAhPZ0AAtkb0NvbGxlY3RlZHNxAH4ACxsw+GB0ABFDaGVja2luZ0VxdWFsaXplcnNxAH4ACystkt50AAh3cml0YWJsZXNxAH4AC/7ZeRB0AAdwZW5kaW5nc3EAfgAL+vfOlHQABXZhbHVlc3EAfgALo/4jcnQABHdoZW5zcQB+AAsu4ppldAAGaWdub3Jlc3EAfgALEOP/MXQACHNob3VsZEJlc3EAfgALf+imn3QAHFJlc3VsdE9mSW5jbHVkZVdvcmRGb3JTdHJpbmdzcQB+AAtUzLNndAALbWFjcm9Bc3NlcnRzcQB+AAu0vjdsdAATYXdhaXRDb25kJGRlZmF1bHQkNHNxAH4AC75JYkl0AAJlcXNxAH4AC8APoGp0ABpjb252ZXJ0VG9DaGVja2luZ0VxdWFsaXplcnNxAH4ACwpNBnJ0AAJvZnNxAH4ACzMCJd90ABVhd2FpdEFzc2VydCRkZWZhdWx0JDNzcQB+AAsmXRGodAAKbGFzdFNlbmRlcnNxAH4ACwCSZ/10AAIrLXNxAH4ACxuYUPx0AAlOb0FyZ1Rlc3RzcQB+AAvoMeXgdAABPnNxAH4AC0FD1nV0AAhyZWFkYWJsZXNxAH4ACz8HcpF0AAIjI3NxAH4AC7TgNGN0AAltaWNyb1RpbWVzcQB+AAvJ+9yQdAAaU3RyaW5nU2hvdWxkV3JhcHBlckZvclZlcmJzcQB+AAu9Jm6GdAAIZmluYWxpemVzcQB+AAsc4c8WdAAbY29udmVyc2lvbkNoZWNrZWRDb25zdHJhaW50c3EAfgALOMovCXQAC2F0TW9zdE9uZU9mc3EAfgALYihjHHQADmZpc2hGb3JNZXNzYWdlc3EAfgAL+YzGc3QABWFsbE9mc3EAfgALpyJltXQACGhhc2hDb2Rlc3EAfgAL7L81k3QACHJlY29yZGVyc3EAfgALuDNpx3QAB3N1aXRlSWRzcQB+AAvx1sbLdAAJc3VpdGVOYW1lc3EAfgALwaWu6XQADFJlZ2V4V3JhcHBlcnNxAH4AC2y9bdl0AA1yZW1vdmVDb3VudGVyc3EAfgALcODrJXQAA3RoZXNxAH4ACyIjgFd0AARvbmx5c3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAnNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4Co3hyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAHQAJWthbW9uLm1ldHJpYy5NZXRyaWNTY2FsZURlY29yYXRvclNwZWN1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAhDbGFzc0RlZnVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAJ0ABBzY2FsYS5kZXByZWNhdGVkdAAnc2NhbGEucmVmbGVjdC5tYWNyb3MuaW50ZXJuYWwubWFjcm9JbXBsc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+Ar1zcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4Co0wACWluaGVyaXRlZHEAfgKjTAAHcGFyZW50c3EAfgKjeHEAfgLCc3EAfgK9dXEAfgKeAAAAAHNxAH4CvXVxAH4CngAAAABzcQB+Ar11cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAHHNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADEwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AsF0ABBTbmFwc2hvdEZpeHR1cmVzc3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgLBc3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAADc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADHhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AAVrYW1vbnNxAH4C2nQABm1ldHJpY3NyAA54c2J0aS5hcGkuVGhpc9sJ7abMWkBcAgAAeHEAfgLbc3EAfgLOdAANQmFzZUthbW9uU3BlY3NxAH4C0nNxAH4C1XVxAH4C2AAAAANzcQB+Atp0AAVrYW1vbnNxAH4C2nQAB3Rlc3RraXRxAH4C4XNxAH4CznQAEUJlZm9yZUFuZEFmdGVyQWxsc3EAfgLSc3EAfgLVdXEAfgLYAAAAA3NxAH4C2nQAA29yZ3NxAH4C2nQACXNjYWxhdGVzdHEAfgLhc3EAfgLOdAAKU3VpdGVNaXhpbnEAfgLtc3EAfgLOdAAOSW1wbGljaXRTZW5kZXJzcQB+AtJzcQB+AtV1cQB+AtgAAAADc3EAfgLadAAEYWtrYXNxAH4C2nQAB3Rlc3RraXRxAH4C4XNxAH4CznQACE1hdGNoZXJzcQB+Au1zcQB+As50AApFeHBsaWNpdGx5c3EAfgLSc3EAfgLVdXEAfgLYAAAAA3NxAH4C2nQAA29yZ3NxAH4C2nQACXNjYWxhY3RpY3EAfgLhc3EAfgLOdAAMTWF0Y2hlcldvcmRzc3EAfgLSc3EAfgLVdXEAfgLYAAAABHNxAH4C2nQAA29yZ3NxAH4C2nQACXNjYWxhdGVzdHNxAH4C2nQABXdvcmRzcQB+AuFzcQB+As50AAlUb2xlcmFuY2VxAH4DA3NxAH4CznQADFdvcmRTcGVjTGlrZXEAfgLtc3EAfgLOdAALRG9jdW1lbnRpbmdxAH4C7XNxAH4CznQACEFsZXJ0aW5ncQB+Au1zcQB+As50AAlOb3RpZnlpbmdxAH4C7XNxAH4CznQACUluZm9ybWluZ3EAfgLtc3EAfgLOdAAHQ2FuVmVyYnEAfgMMc3EAfgLOdAAITXVzdFZlcmJxAH4DDHNxAH4CznQAClNob3VsZFZlcmJxAH4DDHNxAH4CznQAEFRlc3RSZWdpc3RyYXRpb25xAH4C7XNxAH4CznQACVRlc3RTdWl0ZXEAfgLtc3EAfgLOdAAFU3VpdGVxAH4C7XNxAH4CznQADFNlcmlhbGl6YWJsZXNxAH4C0nNxAH4C1XVxAH4C2AAAAAJzcQB+Atp0AAVzY2FsYXEAfgLhc3EAfgLOcQB+Ay5zcQB+AtJzcQB+AtV1cQB+AtgAAAADc3EAfgLadAAEamF2YXNxAH4C2nQAAmlvcQB+AuFzcQB+As50AApBc3NlcnRpb25zcQB+Au1zcQB+As50AAxUcmlwbGVFcXVhbHNxAH4DA3NxAH4CznQAE1RyaXBsZUVxdWFsc1N1cHBvcnRxAH4DA3NxAH4CznQAC1Rlc3RLaXRCYXNlcQB+AvhzcQB+As50AAZPYmplY3RzcQB+AtJzcQB+AtV1cQB+AtgAAAADc3EAfgLacQB+AzlzcQB+Atp0AARsYW5ncQB+AuFzcQB+As50AANBbnlxAH4DL3NxAH4CoHEAfgKtdXEAfgKuAAAAAHNxAH4CsAF0AB1rYW1vbi5tZXRyaWMuU25hcHNob3RGaXh0dXJlc3VxAH4CswAAAAB+cQB+ArV0AAVUcmFpdHVxAH4CuQAAAABzcQB+Ar1xAH4Cw3NxAH4CvXNxAH4CxXNxAH4CvXVxAH4CngAAAABzcQB+Ar11cQB+Ap4AAAAAc3EAfgK9dXEAfgLMAAAAAnNxAH4CznEAfgNFc3EAfgLSc3EAfgLVdXEAfgLYAAAAA3NxAH4C2nEAfgM5c3EAfgLacQB+A0txAH4C4XNxAH4CznEAfgNNc3EAfgLSc3EAfgLVdXEAfgLYAAAAAnNxAH4C2nEAfgMzcQB+AuF1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAnNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0AAxrYW1vbi5tZXRyaWNzcQB+A2x0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV6O0Z1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AAxMAA9zb3VyY2VEaXJlY3RvcnlxAH4ADHhwdABCL2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvdGVzdC1jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUGD5KgKmi8RB7BG9niPAw/utYrB8=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwMSCYPwAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAA9zcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHDmAdNedAAjY29udmVydFRvU3RyaW5nU2hvdWxkV3JhcHBlckZvclZlcmJzcQB+AAt6b9nfdAAZY29udmVydFRvU3RyaW5nQ2FuV3JhcHBlcnNxAH4AC+vHsFR0AAZzeXN0ZW1zcQB+AAt3/NHqdAAeY29udmVydFRvV29yZFNwZWNTdHJpbmdXcmFwcGVyc3EAfgALBzvQJXQAGWNvbnZlcnRUb0FueVNob3VsZFdyYXBwZXJzcQB+AAt2+uV6dAAiY29udmVydE51bWVyaWNUb1BsdXNPck1pbnVzV3JhcHBlcnNxAH4ACx2M9Fh0ABJjb252ZXJ0VG9FcXVhbGl6ZXJzcQB+AAsgCfSadAAEc2VsZnNxAH4AC768fDl0AChzdWJqZWN0V2l0aEFmdGVyV29yZFJlZ2lzdHJhdGlvbkZ1bmN0aW9uc3EAfgAL1IzP2nQAFWNvbnZlcnRUb1JlZ2V4V3JhcHBlcnNxAH4AC1cOPlB0ABV1bmNvbnN0cmFpbmVkRXF1YWxpdHlzcQB+AAt/w42NdAAhY29udmVydFRvU3RyaW5nTXVzdFdyYXBwZXJGb3JWZXJic3EAfgALCekbQ3QAHGNvbnZlcnRUb1N0cmluZ1Nob3VsZFdyYXBwZXJzcQB+AAuBZ9jFdAArY29udmVydFN5bWJvbFRvSGF2ZVByb3BlcnR5TWF0Y2hlckdlbmVyYXRvcnNxAH4AC5/LW8Z0ABtzdWJqZWN0UmVnaXN0cmF0aW9uRnVuY3Rpb251cQB+AAkAAAEnc3EAfgALQTEPCnQAC2luT3JkZXJPbmx5c3EAfgALSwAJu3QABmFzc2VydHNxAH4AC+DkD9d0AAxjaGlsZEFjdG9yT2ZzcQB+AAvNVSnNdAAeUmVzdWx0T2ZTdGFydFdpdGhXb3JkRm9yU3RyaW5nc3EAfgALfF0D53QAB3N1Y2NlZWRzcQB+AAueYXP/dAASUGx1c09yTWludXNXcmFwcGVyc3EAfgALjmxdBnQABm5vdGlmeXNxAH4ACwtsZk50ACZsb3dQcmlvcml0eUNvbnZlcnNpb25DaGVja2VkQ29uc3RyYWludHNxAH4AC928x2N0AAlzaG91bGROb3RzcQB+AAvrPBYxdAAVV29yZFNwZWNTdHJpbmdXcmFwcGVyc3EAfgALUh5m83QABXJlZ2V4c3EAfgAL+6PMB3QABkFuV29yZHNxAH4ACzVPoOh0ABBBc3NlcnRpb25zSGVscGVyc3EAfgALNKBHl3QABmNhbmNlbHNxAH4AC+dXKvl0ABFleGVjdXRlJGRlZmF1bHQkMnNxAH4AC9b6b890AAlpbnRlcmNlcHRzcQB+AAsSvTivdAAEZmFpbHNxAH4ACzJiqmt0AARuYW1lc3EAfgALIKvMHXQAGmV4cGVjdFRlcm1pbmF0ZWQkZGVmYXVsdCQyc3EAfgALiPx0k3QAAmluc3EAfgAL3vzXenQAHEhhdmVQcm9wZXJ0eU1hdGNoZXJHZW5lcmF0b3JzcQB+AAsDve2qdAAFQVdvcmRzcQB+AAtv2Jh2dAAEaGF2ZXNxAH4AC/pkO1t0ABRhc3NlcnREb2VzTm90Q29tcGlsZXNxAH4AC5ou2bB0ABFleGVjdXRlJGRlZmF1bHQkNHNxAH4AC0ujl4N0ACJSZXN1bHRPZkNvbnRhaW5Xb3JkRm9yQ29sbGVjdGVkQW55c3EAfgALo6R5iXQAAmlzc3EAfgALqpoh2nQAEnJlbWFpbmluZ09yRGVmYXVsdHNxAH4AC8Dlprt0AAdleGVjdXRlc3EAfgALsIJhlXQABHdhaXRzcQB+AAvR1a/5dAATZXhwZWN0TXNnQWxsQ2xhc3NPZnNxAH4AC25DIKR0AA5EZXRlcm1pbmVkV29yZHNxAH4ACxGdd9x0AAt0ZXN0RGF0YUZvcnNxAH4AC7GkoXd0ABNjcmVhdGVDYXRjaFJlcG9ydGVyc3EAfgALCekyknQAAjw9c3EAfgALOdNJMHQACXN0eWxlTmFtZXNxAH4AC6jMKBN0ABZyZWNlaXZlV2hpbGUkZGVmYXVsdCQyc3EAfgALAkQnGnQADWxlZnRTaWRlVmFsdWVzcQB+AAt7Lbz4dAATYXRMZWFzdE9uZUVsZW1lbnRPZnNxAH4AC0TYQlJ0AA0kYXNJbnN0YW5jZU9mc3EAfgALDFdSC3QABWVtcHR5c3EAfgALTNGezHQAFnJlY2VpdmVXaGlsZSRkZWZhdWx0JDFzcQB+AAvpw6CzdAAJc3RhcnRXaXRoc3EAfgALmOwwYHQADmV4cGVjdE1zZ0NsYXNzc3EAfgALxppwoXQABHNpemVzcQB+AAvCDavudAARZXhlY3V0ZSRkZWZhdWx0JDNzcQB+AAu+Ns5qdAALZXhwZWN0TXNnUEZzcQB+AAvqXPihdAALc2Vjb25kRW1wdHlzcQB+AAvfqMxtdAAUUmVzdWx0T2ZDb2xsZWN0ZWRBbnlzcQB+AAtfpx33dAANYWxsRWxlbWVudHNPZnNxAH4ACwX0q310AAVleGlzdHNxAH4AC4bQQ0Z0ABNleHBlY3RNc2dBbnlDbGFzc09mc3EAfgAL8sPFKXQACUFmdGVyV29yZHNxAH4AC07UlqV0AAljb25maWdNYXBzcQB+AAsYYB2+dAAPdGVzdEtpdFNldHRpbmdzc3EAfgALhJZPjHQACVZhbHVlV29yZHNxAH4ACytWQNZ0ABFjb2xsZWN0aW9uQ29udGV4dHNxAH4AC1egjTJ0AAZlcXVhbHNzcQB+AAuZ9g+7dAAMYXRMZWFzdE9uZU9mc3EAfgAL7gdVn3QADnNlY29uZE5vbkVtcHR5c3EAfgALxfcmnnQAB2F0TGVhc3RzcQB+AAvGa4eLdAAIdGhyb3duQnlzcQB+AAv/mxCrdAAsY29udmVydEVxdWl2YWxlbmNlVG9BVG9CQ29udmVyc2lvbkNvbnN0cmFpbnRzcQB+AAvSpLQrdAAPZGVmYXVsdEVxdWFsaXR5c3EAfgALw4l7fXQACnJlY2VpdmVPbmVzcQB+AAtw4MyedAAiY29udmVydEVxdWl2YWxlbmNlVG9BVG9CQ29uc3RyYWludHNxAH4ACx7G+jZ0ABxSZXN1bHRPZkVuZFdpdGhXb3JkRm9yU3RyaW5nc3EAfgALwtcTl3QABG11c3RzcQB+AAsbyAYhdAAVYXdhaXRBc3NlcnQkZGVmYXVsdCQyc3EAfgALQGdqTXQAA2FsbHNxAH4AC5OPQWl0AAR0YWdzc3EAfgALO2NDnHQADGFzSW5zdGFuY2VPZnNxAH4AC1HgC5x0AAE8c3EAfgALhX7imXQABWFsZXJ0c3EAfgALuXGkFnQAC2xhc3RNZXNzYWdlc3EAfgALKimEq3QAB2luT3JkZXJzcQB+AAuIRb1XdAAKcHJldHRpZmllcnNxAH4AC96reoF0AAhyZWNlaXZlTnNxAH4AC7yvOd10ABNhd2FpdENvbmQkZGVmYXVsdCQyc3EAfgALp6utLnQAA3J1bnNxAH4AC3tPXex0ABFEZWNpZGVkQnlFcXVhbGl0eXNxAH4ACyx+x0d0AAVldmVyeXNxAH4AC0Oe9Ml0AAd1bndhdGNoc3EAfgALHY6ye3QABnNjb3Blc3NxAH4AC9oY8CF0AANwb3NzcQB+AAu+smvGdAAJYmVmb3JlQWxsc3EAfgAL66yQFHQACndpdGhHcm91cHNzcQB+AAvbw5cgdAAMc3luY2hyb25pemVkc3EAfgALESZWUnQAAml0c3EAfgALU9PL3HQADWV4cGVjdE1zZ1R5cGVzcQB+AAv08167dAAHS2V5V29yZHNxAH4AC6Lp+ll0ABF0aGVTYW1lRWxlbWVudHNBc3NxAH4ACyUWnQp0AA5hc3NlcnRDb21waWxlc3NxAH4ACz4mHmd0AAV3YXRjaHNxAH4ACyqhmBV0AApkZXRlcm1pbmVkc3EAfgALO48iqXQAAWFzcQB+AAsjGeq8dAAMYXNzZXJ0VGhyb3dzc3EAfgAL8YYOLXQADmxlZnRTaWRlU3RyaW5nc3EAfgALJHTlkHQADSRpc0luc3RhbmNlT2ZzcQB+AAtG2LkFdAAEdHJhcHNxAH4AC4oEDjN0ABV0ZXN0RGF0YUZvciRkZWZhdWx0JDJzcQB+AAtyfoOndAAMYXNzZXJ0UmVzdWx0c3EAfgAL5MPDBXQAHlJlc3VsdE9mTm90V29yZEZvckNvbGxlY3RlZEFueXNxAH4ACyGxHHl0AA5leHBlY3RNc2dBbGxPZnNxAH4AC6oLYuZ0AAI+PXNxAH4ACx5swR90AAZ3aXRoaW5zcQB+AAvD6DGQdAAMb25lRWxlbWVudE9mc3EAfgALYLJE73QAF1N0cmluZ0NhbldyYXBwZXJGb3JWZXJic3EAfgALgIrNq3QABHRleHRzcQB+AAsTTDLDdAAlUmVzdWx0T2ZJbmNsdWRlV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4AC/zRVpN0ACxjb252ZXJ0RXF1aXZhbGVuY2VUb0JUb0FDb252ZXJzaW9uQ29uc3RyYWludHNxAH4AC4fm3VF0ABVleHBlY3RNc2dQRiRkZWZhdWx0JDFzcQB+AAsxTZWZdAAGY29uZmlnc3EAfgALoWyVsHQAB2NvbnRhaW5zcQB+AAuga0TWdAAKbmV3Q29udGV4dHNxAH4ACzYNiVl0AAR0aGV5c3EAfgAL6w3743QAB2NvbXBpbGVzcQB+AAtdhj7VdAARZXhlY3V0ZSRkZWZhdWx0JDdzcQB+AAsqmw7NdAAHZXhhY3RseXNxAH4ACxIMWvt0ABF0aGVTYW1lSW5zdGFuY2VBc3NxAH4AC+1nuXZ0AAthd2FpdEFzc2VydHNxAH4AC1WMDMJ0ACdSZXN1bHRPZlN0YXJ0V2l0aFdvcmRGb3JDb2xsZWN0ZWRTdHJpbmdzcQB+AAudfAbpdAARaW5PcmRlckVsZW1lbnRzT2ZzcQB+AAtlMNxHdAALRGVjaWRlZFdvcmRzcQB+AAsuNpcwdAAVdHlwZUNoZWNrZWRDb25zdHJhaW50c3EAfgALphP6qHQAAyE9PXNxAH4ACxIUcTR0AAZhdE1vc3RzcQB+AAsmaj+TdAAEaW5mb3NxAH4ACy98O9V0AAtub0V4Y2VwdGlvbnNxAH4AC3rPKgl0AAlub3RpZnlBbGxzcQB+AAu+iXa5dAAEdGhhdHNxAH4ACwjx9+l0AApzdGFja0RlcHRoc3EAfgALCSAVpXQAHFRpY2tNZXRyaWNTbmFwc2hvdEJ1ZmZlclNwZWNzcQB+AAuBgg8sdAALd2l0aEZpeHR1cmVzcQB+AAuyc9a4dAARdGVzdFRyYWNlSWRlbnRpdHlzcQB+AAuvrXj2dAAHcnVuVGVzdHNxAH4AC7AUfZN0AAlhd2FpdENvbmRzcQB+AAu6S9FpdAAdUmVzdWx0T2ZCZVdvcmRGb3JDb2xsZWN0ZWRBbnlzcQB+AAu2ZGORdAADa2V5c3EAfgALzhzSRHQAA25vd3NxAH4AC/bWOUV0AAxpc0luc3RhbmNlT2ZzcQB+AAtEEVwZdAAKdGhpcmRFbXB0eXNxAH4AC56ylJ90AAh3aXRoQ2x1ZXNxAH4AC6srAy90ABBhc3NlcnRpb25zSGVscGVyc3EAfgALxZS3/XQAEWV4ZWN1dGUkZGVmYXVsdCQ2c3EAfgALsCchrXQACHRhZ2dlZEFzc3EAfgALAmKQMnQAD2Fzc2VydFR5cGVFcnJvcnNxAH4AC5eDqq10ABBTbmFwc2hvdEZpeHR1cmVzc3EAfgALXQRxmnQAJVJlc3VsdE9mRW5kV2l0aFdvcmRGb3JDb2xsZWN0ZWRTdHJpbmdzcQB+AAudC3hSdAAGbWFya3Vwc3EAfgALW9/quXQACHNodXRkb3duc3EAfgALCGVqlnQACGxlZnRTaWRlc3EAfgAL69S6OnQAE2F3YWl0Q29uZCRkZWZhdWx0JDNzcQB+AAuNMdiQdAAYZXhwZWN0TXNnQWxsQ29uZm9ybWluZ09mc3EAfgALXJFt/XQABjxpbml0PnNxAH4AC/K0dRh0AAttYWNyb0Fzc3VtZXNxAH4ACw0Y8PJ0AA9ydW5OZXN0ZWRTdWl0ZXNzcQB+AAubzLbndAAZUmVzdWx0T2ZIYXZlV29yZEZvckV4dGVudHNxAH4AC5v63lV0AAxtc2dBdmFpbGFibGVzcQB+AAuQM2W0dAADY2Fuc3EAfgAL8IHfKnQADHNldEF1dG9QaWxvdHNxAH4AC4Nbp6l0AAViZWluZ3NxAH4AC/SzMdh0AAVlcXVhbHNxAH4AC0ETJbV0AAZJdFdvcmRzcQB+AAsPFxIXdAAOdGFrZVNuYXBzaG90T2ZzcQB+AAtzdumydAAIYXJlRXF1YWxzcQB+AAsOJaFpdAAGbm9uZU9mc3EAfgALPVrFyXQABWFwcGx5c3EAfgALTpamu3QACXdpdGhHcm91cHNxAH4AC+zPJYJ0AAtpZ25vcmVOb01zZ3NxAH4AC9Mbtpt0AAVhZnRlcnNxAH4AC+AYImB0AAlFcXVhbGl6ZXJzcQB+AAu9+mvUdAAKYWZ0ZXJCZWluZ3NxAH4AC9T9/Cx0ACJSZXN1bHRPZlRhZ2dlZEFzSW52b2NhdGlvbk9uU3RyaW5nc3EAfgALIPLf7nQAG25ld0Fzc2VydGlvbkZhaWxlZEV4Y2VwdGlvbnNxAH4AC6WNfR50AA1maXJzdE5vbkVtcHR5c3EAfgALVSaLKnQABG5vdGVzcQB+AAvgjpI6dAACPT1zcQB+AAsAQFjXdAANdHJhY2VSZWNvcmRlcnNxAH4ACxsv8290ABJzaHV0ZG93biRkZWZhdWx0JDJzcQB+AAt1IVCTdAAKZmlyc3RFbXB0eXNxAH4AC20bTJJ0AAJieXNxAH4AC81ockN0AAZzb3J0ZWRzcQB+AAth4XRmdAAKZnVsbHlNYXRjaHNxAH4AC9iKkJJ0AAVjbG9uZXNxAH4AC4KFKnZ0AAlyZW1haW5pbmdzcQB+AAtXyfPodAAJaWdub3JlTXNnc3EAfgALSR8/YHQAE1N0cmluZ1Nob3VsZFdyYXBwZXJzcQB+AAtKkMVRdAAGc2hvdWxkc3EAfgALlHwIgHQAEEFueVNob3VsZFdyYXBwZXJzcQB+AAuuVFf5dAAXRGV0ZXJtaW5lZEJ5RXF1aXZhbGVuY2VzcQB+AAv1xB7rdAADbm90c3EAfgALVaE9v3QAH1Jlc3VsdE9mQmVXb3JkRm9yQ29sbGVjdGVkQXJyYXlzcQB+AAvBWWcFdAASZmx1c2hTdWJzY3JpcHRpb25zc3EAfgALpotM2nQACWRlZmluZWRBdHNxAH4AC/xC6lN0AAxuZXN0ZWRTdWl0ZXNzcQB+AAu9AOSLdAAGYXNzdW1lc3EAfgALpi6c3XQABiRpbml0JHNxAH4AC9LKJBF0AAdkZWZpbmVkc3EAfgALaErYI3QAIGxvd1ByaW9yaXR5VHlwZUNoZWNrZWRDb25zdHJhaW50c3EAfgALq0f8WXQACXRlc3RBY3RvcnNxAH4ACx3nW2p0AAdpbmNsdWRlc3EAfgALP8p4AnQACFRoZXlXb3Jkc3EAfgALuld0IHQAEnNodXRkb3duJGRlZmF1bHQkMXNxAH4AC6ldyVR0AAxyZWdpc3RlclRlc3RzcQB+AAuRfdWtdAAJdHlwZUNoZWNrc3EAfgALqgcHVnQAEWV4ZWN1dGUkZGVmYXVsdCQ1c3EAfgAL53uSX3QAAz09PXNxAH4AC2giZw50ABhuZXdUZXN0Q2FuY2VsZWRFeGNlcHRpb25zcQB+AAs/OfJ4dAAHbWVzc2FnZXNxAH4AC9Wo+Gp0AAxyZWNlaXZlV2hpbGVzcQB+AAsbTJUIdAAIdG9TdHJpbmdzcQB+AAu458vpdAAJYWZ0ZXJXb3Jkc3EAfgAL1N9ilnQABXdoaWNoc3EAfgAL3/ZAbXQACXRlc3ROYW1lc3NxAH4AC7sdOfd0AA95ZU9sZGVUZXN0TmFtZXNzcQB+AAveXEngdAACYW5zcQB+AAvHuqoTdAAGbGVuZ3Roc3EAfgALDXOOMHQADmV4cGVjdE1zZ0FueU9mc3EAfgALiUHaP3QAGFN0cmluZ011c3RXcmFwcGVyRm9yVmVyYnNxAH4AC4L42s90ABFleGVjdXRlJGRlZmF1bHQkMXNxAH4ACzqF4dh0AAJiZXNxAH4AC4Fj8TB0AAIhPXNxAH4AC4cpZmF0ACJSZXN1bHRPZkhhdmVXb3JkRm9yQ29sbGVjdGVkRXh0ZW50c3EAfgALb8MiTHQAH1Jlc3VsdE9mRnVsbHlNYXRjaFdvcmRGb3JTdHJpbmdzcQB+AAs/HMcmdAAyaW52b2tlQmVmb3JlQWxsQW5kQWZ0ZXJBbGxFdmVuSWZOb1Rlc3RzQXJlRXhwZWN0ZWRzcQB+AAt08ND9dAAMbWF0Y2hQYXR0ZXJuc3EAfgALsoWhzHQACGdldENsYXNzc3EAfgALAj0GMXQAE3JlZ2lzdGVySWdub3JlZFRlc3RzcQB+AAtiqznLdAAGYmVoYXZlc3EAfgALsWZbD3QAGGZpc2hGb3JNZXNzYWdlJGRlZmF1bHQkMXNxAH4AC+nhEsl0AAhydW5UZXN0c3NxAH4ACz3r+2N0ABFwZW5kaW5nVW50aWxGaXhlZHNxAH4AC+b9tZd0ABJhdE1vc3RPbmVFbGVtZW50T2ZzcQB+AAuzJ1q2dAALZXhwZWN0Tm9Nc2dzcQB+AAtFhhepdAAYdGhlU2FtZUVsZW1lbnRzSW5PcmRlckFzc3EAfgALb4KwR3QAF1RoZVNhbWVJbnN0YW5jZUFzUGhyYXNlc3EAfgALMgx9y3QAFnJlY2VpdmVXaGlsZSRkZWZhdWx0JDNzcQB+AAsSF3VTdAAVZXhwZWN0TXNnUEYkZGVmYXVsdCQyc3EAfgALqBjXl3QADWFyZUVxdWl2YWxlbnRzcQB+AAv2a2isdAAHYmV0d2VlbnNxAH4AC4cgLKZ0AAhhZnRlckFsbHNxAH4AC+e6/UV0AAdkZWNpZGVkc3EAfgALwpSO1XQAFFJlc3VsdE9mQmVXb3JkRm9yQW55c3EAfgAL/lE9enQAEWV4cGVjdGVkVGVzdENvdW50c3EAfgALSGSA63QAB2VuZFdpdGhzcQB+AAuVO876dAAMbm9FbGVtZW50c09mc3EAfgALgUjo83QACHJlcnVubmVyc3EAfgALlEWBvXQAC3Nob3VsZEVxdWFsc3EAfgAL7GGn03QACVJlZ2V4V29yZHNxAH4ACyn4uUB0AAxUaGVBZnRlcldvcmRzcQB+AAtLWdoKdAAiY29udmVydEVxdWl2YWxlbmNlVG9CVG9BQ29uc3RyYWludHNxAH4AC4VfiFx0AAVvbmVPZnNxAH4AC2DF3RJ0AAJuZXNxAH4AC7mVjq10AAtyZW1haW5pbmdPcnNxAH4AC+y6U3p0AAlleHBlY3RNc2dzcQB+AAsv44WwdAAYZmlzaEZvck1lc3NhZ2UkZGVmYXVsdCQyc3EAfgALaZBRmXQADXRlc3RBY3Rvck5hbWVzcQB+AAu7BqztdAAQZXhwZWN0VGVybWluYXRlZHNxAH4AC423OLt0AAJub3NxAH4AC3KBgoB0ABJzaHV0ZG93biRkZWZhdWx0JDNzcQB+AAv/YYuRdAAoUmVzdWx0T2ZGdWxseU1hdGNoV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4ACyxLf4x0AAtkb0NvbGxlY3RlZHNxAH4AC7CCQQF0ABFDaGVja2luZ0VxdWFsaXplcnNxAH4AC2N1RjF0AAh3cml0YWJsZXNxAH4AC1P1QJV0AAdwZW5kaW5nc3EAfgALFpO1AHQABXZhbHVlc3EAfgALn7ukQnQABHdoZW5zcQB+AAtyh2pDdAAGaWdub3Jlc3EAfgALzN4TOHQACHNob3VsZEJlc3EAfgALkT6rDnQAHFJlc3VsdE9mSW5jbHVkZVdvcmRGb3JTdHJpbmdzcQB+AAushmDedAALbWFjcm9Bc3NlcnRzcQB+AAvhzJ5adAATYXdhaXRDb25kJGRlZmF1bHQkNHNxAH4AC7dDpZ10AAJlcXNxAH4AC+XEixh0ABpjb252ZXJ0VG9DaGVja2luZ0VxdWFsaXplcnNxAH4AC50Bx/50AAJvZnNxAH4AC2d0eoZ0ABVhd2FpdEFzc2VydCRkZWZhdWx0JDNzcQB+AAteKdwPdAAKbGFzdFNlbmRlcnNxAH4AC+oeTcp0AAIrLXNxAH4AC05wocR0AAlOb0FyZ1Rlc3RzcQB+AAvnGRw8dAABPnNxAH4AC7zrWrB0AAhyZWFkYWJsZXNxAH4AC6jGWFd0AAIjI3NxAH4AC6ozX8p0ABpTdHJpbmdTaG91bGRXcmFwcGVyRm9yVmVyYnNxAH4AC7cbQVl0AAhmaW5hbGl6ZXNxAH4AC7wKZRR0ABtjb252ZXJzaW9uQ2hlY2tlZENvbnN0cmFpbnRzcQB+AAsovE35dAALYXRNb3N0T25lT2ZzcQB+AAtbwzyqdAAOZmlzaEZvck1lc3NhZ2VzcQB+AAtBFWhudAAFYWxsT2ZzcQB+AAsk5mtndAAIaGFzaENvZGVzcQB+AAvp6KdQdAAHc3VpdGVJZHNxAH4ACxDzHHp0AAlzdWl0ZU5hbWVzcQB+AAv+ydu/dAAMUmVnZXhXcmFwcGVyc3EAfgALHHTMNHQAA3RoZXNxAH4AC0mO3oh0AARvbmx5c3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4Cg3hyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAHQAKWthbW9uLm1ldHJpYy5UaWNrTWV0cmljU25hcHNob3RCdWZmZXJTcGVjdXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAACdAAQc2NhbGEuZGVwcmVjYXRlZHQAJ3NjYWxhLnJlZmxlY3QubWFjcm9zLmludGVybmFsLm1hY3JvSW1wbHNyACF4c2J0aS5hcGkuQWJzdHJhY3RMYXp5JFN0cmljdExhenkNZhxrKRYquAIAAUwABXZhbHVldAASTGphdmEvbGFuZy9PYmplY3Q7eHBzcgATeHNidGkuYXBpLkVtcHR5VHlwZbz9nkZJO4kkAgAAeHIAFHhzYnRpLmFwaS5TaW1wbGVUeXBlcnhiiCEjv0ACAAB4cgAOeHNidGkuYXBpLlR5cGU/atkhFkmqygIAAHhwc3EAfgKdc3IAE3hzYnRpLmFwaS5TdHJ1Y3R1cmWpqvmAk2/YAAIAA0wACGRlY2xhcmVkcQB+AoNMAAlpbmhlcml0ZWRxAH4Cg0wAB3BhcmVudHNxAH4Cg3hxAH4ConNxAH4CnXVxAH4CfgAAAABzcQB+Ap11cQB+An4AAAAAc3EAfgKddXIAEVtMeHNidGkuYXBpLlR5cGU7dP+lWnv56UECAAB4cAAAABtzcgAUeHNidGkuYXBpLlByb2plY3Rpb27z0o1U6UWkLQIAAkwAAmlkcQB+AAxMAAZwcmVmaXh0ABZMeHNidGkvYXBpL1NpbXBsZVR5cGU7eHEAfgKhdAANQmFzZUthbW9uU3BlY3NyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4CoXNyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AAx4cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAFa2Ftb25zcQB+Arp0AAd0ZXN0a2l0c3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+ArtzcQB+Aq50ABFCZWZvcmVBbmRBZnRlckFsbHNxAH4CsnNxAH4CtXVxAH4CuAAAAANzcQB+Arp0AANvcmdzcQB+Arp0AAlzY2FsYXRlc3RxAH4CwXNxAH4CrnQAClN1aXRlTWl4aW5xAH4CxHNxAH4CrnQADkltcGxpY2l0U2VuZGVyc3EAfgKyc3EAfgK1dXEAfgK4AAAAA3NxAH4CunQABGFra2FzcQB+Arp0AAd0ZXN0a2l0cQB+AsFzcQB+Aq50AAhNYXRjaGVyc3EAfgLEc3EAfgKudAAKRXhwbGljaXRseXNxAH4CsnNxAH4CtXVxAH4CuAAAAANzcQB+Arp0AANvcmdzcQB+Arp0AAlzY2FsYWN0aWNxAH4CwXNxAH4CrnQADE1hdGNoZXJXb3Jkc3NxAH4CsnNxAH4CtXVxAH4CuAAAAARzcQB+Arp0AANvcmdzcQB+Arp0AAlzY2FsYXRlc3RzcQB+Arp0AAV3b3Jkc3EAfgLBc3EAfgKudAAJVG9sZXJhbmNlcQB+AtpzcQB+Aq50AAxXb3JkU3BlY0xpa2VxAH4CxHNxAH4CrnQAC0RvY3VtZW50aW5ncQB+AsRzcQB+Aq50AAhBbGVydGluZ3EAfgLEc3EAfgKudAAJTm90aWZ5aW5ncQB+AsRzcQB+Aq50AAlJbmZvcm1pbmdxAH4CxHNxAH4CrnQAB0NhblZlcmJxAH4C43NxAH4CrnQACE11c3RWZXJicQB+AuNzcQB+Aq50AApTaG91bGRWZXJicQB+AuNzcQB+Aq50ABBUZXN0UmVnaXN0cmF0aW9ucQB+AsRzcQB+Aq50AAlUZXN0U3VpdGVxAH4CxHNxAH4CrnQABVN1aXRlcQB+AsRzcQB+Aq50AAxTZXJpYWxpemFibGVzcQB+ArJzcQB+ArV1cQB+ArgAAAACc3EAfgK6dAAFc2NhbGFxAH4CwXNxAH4CrnEAfgMFc3EAfgKyc3EAfgK1dXEAfgK4AAAAA3NxAH4CunQABGphdmFzcQB+Arp0AAJpb3EAfgLBc3EAfgKudAAKQXNzZXJ0aW9uc3EAfgLEc3EAfgKudAAMVHJpcGxlRXF1YWxzcQB+AtpzcQB+Aq50ABNUcmlwbGVFcXVhbHNTdXBwb3J0cQB+AtpzcQB+Aq50AAtUZXN0S2l0QmFzZXEAfgLPc3EAfgKudAAGT2JqZWN0c3EAfgKyc3EAfgK1dXEAfgK4AAAAA3NxAH4CunEAfgMQc3EAfgK6dAAEbGFuZ3EAfgLBc3EAfgKudAADQW55cQB+AwZ1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAnNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0AAxrYW1vbi5tZXRyaWNzcQB+Ayd0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV6O0Z1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AAxMAA9zb3VyY2VEaXJlY3RvcnlxAH4ADHhwdABCL2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvdGVzdC1jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUKLyLkNQ2quv/rEhRpu+JD4ElJ+Y=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhw/9cJ/AAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAA1zcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHCvwZnUdAAjY29udmVydFRvU3RyaW5nU2hvdWxkV3JhcHBlckZvclZlcmJzcQB+AAsbAcwpdAAZY29udmVydFRvU3RyaW5nQ2FuV3JhcHBlcnNxAH4AC88L8rR0AB5jb252ZXJ0VG9Xb3JkU3BlY1N0cmluZ1dyYXBwZXJzcQB+AAu3SHpCdAAZY29udmVydFRvQW55U2hvdWxkV3JhcHBlcnNxAH4AC21E4ed0ACJjb252ZXJ0TnVtZXJpY1RvUGx1c09yTWludXNXcmFwcGVyc3EAfgAL5tB/lXQAEmNvbnZlcnRUb0VxdWFsaXplcnNxAH4AC3Nl0xR0AChzdWJqZWN0V2l0aEFmdGVyV29yZFJlZ2lzdHJhdGlvbkZ1bmN0aW9uc3EAfgALlnH+W3QAFWNvbnZlcnRUb1JlZ2V4V3JhcHBlcnNxAH4AC3XQVHp0ABV1bmNvbnN0cmFpbmVkRXF1YWxpdHlzcQB+AAt3fvR3dAAhY29udmVydFRvU3RyaW5nTXVzdFdyYXBwZXJGb3JWZXJic3EAfgALaW3fUHQAHGNvbnZlcnRUb1N0cmluZ1Nob3VsZFdyYXBwZXJzcQB+AAseAZ3cdAArY29udmVydFN5bWJvbFRvSGF2ZVByb3BlcnR5TWF0Y2hlckdlbmVyYXRvcnNxAH4ACyw0Fkh0ABtzdWJqZWN0UmVnaXN0cmF0aW9uRnVuY3Rpb251cQB+AAkAAADpc3EAfgALJL8uUnQAC2luT3JkZXJPbmx5c3EAfgAL1no2iXQABmFzc2VydHNxAH4AC8UImhx0AB5SZXN1bHRPZlN0YXJ0V2l0aFdvcmRGb3JTdHJpbmdzcQB+AAtaOhh1dAAHc3VjY2VlZHNxAH4ACytclDR0ABJQbHVzT3JNaW51c1dyYXBwZXJzcQB+AAsdMogvdAAGbm90aWZ5c3EAfgAL/yBXu3QAJmxvd1ByaW9yaXR5Q29udmVyc2lvbkNoZWNrZWRDb25zdHJhaW50c3EAfgALwhIux3QACXNob3VsZE5vdHNxAH4AC2ChoIB0ABVXb3JkU3BlY1N0cmluZ1dyYXBwZXJzcQB+AAuvjzpBdAAFcmVnZXhzcQB+AAuAku9vdAAGQW5Xb3Jkc3EAfgALe8XthHQAEEFzc2VydGlvbnNIZWxwZXJzcQB+AAv2qnGgdAAGY2FuY2Vsc3EAfgALyvng9HQAEWV4ZWN1dGUkZGVmYXVsdCQyc3EAfgALZL5E83QACWludGVyY2VwdHNxAH4ACxzbO310AARmYWlsc3EAfgALYmWN5HQABG5hbWVzcQB+AAuve4oEdAACaW5zcQB+AAtQwKuIdAAcSGF2ZVByb3BlcnR5TWF0Y2hlckdlbmVyYXRvcnNxAH4AC6TDSQx0AAVBV29yZHNxAH4AC8+PIvB0AARoYXZlc3EAfgALrV5wjXQAFGFzc2VydERvZXNOb3RDb21waWxlc3EAfgALj1NyR3QAEWV4ZWN1dGUkZGVmYXVsdCQ0c3EAfgALKaQYYHQAIlJlc3VsdE9mQ29udGFpbldvcmRGb3JDb2xsZWN0ZWRBbnlzcQB+AAuf9FHkdAACaXNzcQB+AAvrszaNdAAHZXhlY3V0ZXNxAH4AC1JkDdR0AAR3YWl0c3EAfgALLbQ0iHQADkRldGVybWluZWRXb3Jkc3EAfgALUkB7Y3QAC3Rlc3REYXRhRm9yc3EAfgALBhI4ZXQAE2NyZWF0ZUNhdGNoUmVwb3J0ZXJzcQB+AAveReJidAACPD1zcQB+AAvad2FgdAAJc3R5bGVOYW1lc3EAfgALINwzMHQADWxlZnRTaWRlVmFsdWVzcQB+AAs9mDfodAATYXRMZWFzdE9uZUVsZW1lbnRPZnNxAH4AC9gJ9gt0AA0kYXNJbnN0YW5jZU9mc3EAfgALORdGlHQABWVtcHR5c3EAfgAL4ZDGIXQACXN0YXJ0V2l0aHNxAH4AC88+kOt0AARzaXplc3EAfgALAzI513QAEWV4ZWN1dGUkZGVmYXVsdCQzc3EAfgALqIxrH3QAFFJlc3VsdE9mQ29sbGVjdGVkQW55c3EAfgALw5hFknQADWFsbEVsZW1lbnRzT2ZzcQB+AAvPwZ4fdAAFZXhpc3RzcQB+AAu5bMrSdAAJQWZ0ZXJXb3Jkc3EAfgALGUO/GnQACWNvbmZpZ01hcHNxAH4ACxKTEYp0AAlWYWx1ZVdvcmRzcQB+AAt6oSoFdAARY29sbGVjdGlvbkNvbnRleHRzcQB+AAvdk3DtdAAGZXF1YWxzc3EAfgAL7FFtVXQADGF0TGVhc3RPbmVPZnNxAH4ACxLgjrJ0AAdhdExlYXN0c3EAfgALnnaB1nQACHRocm93bkJ5c3EAfgALog70UHQALGNvbnZlcnRFcXVpdmFsZW5jZVRvQVRvQkNvbnZlcnNpb25Db25zdHJhaW50c3EAfgALIcawInQAD2RlZmF1bHRFcXVhbGl0eXNxAH4ACz07mm90ACJjb252ZXJ0RXF1aXZhbGVuY2VUb0FUb0JDb25zdHJhaW50c3EAfgALvTxC/3QAHFJlc3VsdE9mRW5kV2l0aFdvcmRGb3JTdHJpbmdzcQB+AAvSsWwqdAAEbXVzdHNxAH4ACz6oKmx0AANhbGxzcQB+AAtQr4cidAAEdGFnc3NxAH4AC3m4OlB0AAxhc0luc3RhbmNlT2ZzcQB+AAsxDgZmdAABPHNxAH4AC8Soa0Z0AAVhbGVydHNxAH4ACzmc+Nx0AAdpbk9yZGVyc3EAfgALlAKeanQACnByZXR0aWZpZXJzcQB+AAtvyYxSdAADcnVuc3EAfgALoc1VZnQAEURlY2lkZWRCeUVxdWFsaXR5c3EAfgALKuupiHQABWV2ZXJ5c3EAfgALLLbcnHQABnNjb3Blc3NxAH4AC0+Jfl90AANwb3NzcQB+AAurMjFCdAAKd2l0aEdyb3Vwc3NxAH4AC6uEsWl0AAxzeW5jaHJvbml6ZWRzcQB+AAtfJ2ILdAACaXRzcQB+AAtIBzqmdAAHS2V5V29yZHNxAH4AC/XgHvh0ABF0aGVTYW1lRWxlbWVudHNBc3NxAH4AC1HiXpp0AA5hc3NlcnRDb21waWxlc3NxAH4ACzTM35J0AApkZXRlcm1pbmVkc3EAfgALjMRcFHQAC0NvdW50ZXJTcGVjc3EAfgALIUcHQHQAAWFzcQB+AAtcX3HDdAAMYXNzZXJ0VGhyb3dzc3EAfgALfZb8L3QADmxlZnRTaWRlU3RyaW5nc3EAfgALDw1KLHQADSRpc0luc3RhbmNlT2ZzcQB+AAuJa3dEdAAEdHJhcHNxAH4AC/46Z/l0ABV0ZXN0RGF0YUZvciRkZWZhdWx0JDJzcQB+AAsJQ8VYdAAMYXNzZXJ0UmVzdWx0c3EAfgALg4u6/XQAHlJlc3VsdE9mTm90V29yZEZvckNvbGxlY3RlZEFueXNxAH4AC7xi6990AAI+PXNxAH4AC3j9f/V0AAxvbmVFbGVtZW50T2ZzcQB+AAu6BViadAAXU3RyaW5nQ2FuV3JhcHBlckZvclZlcmJzcQB+AAsCFqI2dAAGYnVmZmVyc3EAfgALcbPp2HQABHRleHRzcQB+AAv+F4G8dAAlUmVzdWx0T2ZJbmNsdWRlV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4AC9HcPWN0ACxjb252ZXJ0RXF1aXZhbGVuY2VUb0JUb0FDb252ZXJzaW9uQ29uc3RyYWludHNxAH4ACzC16YR0AAdjb250YWluc3EAfgALxi2i4XQABHRoZXlzcQB+AAsENiJ1dAAHY29tcGlsZXNxAH4AC91mEEt0ABFleGVjdXRlJGRlZmF1bHQkN3NxAH4AC1tg61d0AAdleGFjdGx5c3EAfgALnrDHtnQAEXRoZVNhbWVJbnN0YW5jZUFzc3EAfgALXcY5PXQAJ1Jlc3VsdE9mU3RhcnRXaXRoV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4AC0+Yzj50ABFpbk9yZGVyRWxlbWVudHNPZnNxAH4ACyat18V0AAtEZWNpZGVkV29yZHNxAH4AC8vStUN0ABV0eXBlQ2hlY2tlZENvbnN0cmFpbnRzcQB+AAti7Dg1dAADIT09c3EAfgALUjO50nQABmF0TW9zdHNxAH4AC/8Kid10AARpbmZvc3EAfgALJVH8nXQAC25vRXhjZXB0aW9uc3EAfgAL6k71XXQACW5vdGlmeUFsbHNxAH4AC5P0ytR0AAR0aGF0c3EAfgAL/K716XQACnN0YWNrRGVwdGhzcQB+AAtY71Z7dAALd2l0aEZpeHR1cmVzcQB+AAswu25GdAAHcnVuVGVzdHNxAH4AC3XeYC90AB1SZXN1bHRPZkJlV29yZEZvckNvbGxlY3RlZEFueXNxAH4AC30XSZJ0AANrZXlzcQB+AAt5wv2bdAAMaXNJbnN0YW5jZU9mc3EAfgALOiTBcXQACHdpdGhDbHVlc3EAfgALKKs1/XQAEGFzc2VydGlvbnNIZWxwZXJzcQB+AAsdF4UYdAAQdGFrZVNuYXBzaG90RnJvbXNxAH4AC5yaSGl0ABFleGVjdXRlJGRlZmF1bHQkNnNxAH4AC4AWl/t0AAh0YWdnZWRBc3NxAH4AC85NVxh0AA9hc3NlcnRUeXBlRXJyb3JzcQB+AAt4umChdAAlUmVzdWx0T2ZFbmRXaXRoV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4AC0+YoG90AAZtYXJrdXBzcQB+AAtcR4IXdAAIbGVmdFNpZGVzcQB+AAuXOdhZdAAGPGluaXQ+c3EAfgALMEfhU3QAC21hY3JvQXNzdW1lc3EAfgALUojH2HQAD3J1bk5lc3RlZFN1aXRlc3NxAH4AC1gZ5/d0ABlSZXN1bHRPZkhhdmVXb3JkRm9yRXh0ZW50c3EAfgALwPnPlnQAA2NhbnNxAH4AC6CeyhV0AAViZWluZ3NxAH4AC+13JLl0AAVlcXVhbHNxAH4AC3mAQTZ0AAZJdFdvcmRzcQB+AAvhuvIGdAAIYXJlRXF1YWxzcQB+AAtX5Vu9dAAGbm9uZU9mc3EAfgALWTclH3QABWFwcGx5c3EAfgALZOYYW3QACXdpdGhHcm91cHNxAH4ACxMRzIV0AAVhZnRlcnNxAH4ACw1COVR0AAlFcXVhbGl6ZXJzcQB+AAvEo57sdAAKYWZ0ZXJCZWluZ3NxAH4ACwsZQa10ACJSZXN1bHRPZlRhZ2dlZEFzSW52b2NhdGlvbk9uU3RyaW5nc3EAfgALb02VXnQAG25ld0Fzc2VydGlvbkZhaWxlZEV4Y2VwdGlvbnNxAH4AC3R5vHV0AARub3Rlc3EAfgALoQMiOXQAAj09c3EAfgALoOF2ynQAAmJ5c3EAfgALkYgJ9HQABnNvcnRlZHNxAH4AC3sOvMR0AApmdWxseU1hdGNoc3EAfgALAJeCsHQABWNsb25lc3EAfgALIfL/i3QAE1N0cmluZ1Nob3VsZFdyYXBwZXJzcQB+AAsneBAUdAAGc2hvdWxkc3EAfgALHDv7WHQAEEFueVNob3VsZFdyYXBwZXJzcQB+AAsyDnFxdAAXRGV0ZXJtaW5lZEJ5RXF1aXZhbGVuY2VzcQB+AAuNU8CHdAADbm90c3EAfgALR7dJZ3QAH1Jlc3VsdE9mQmVXb3JkRm9yQ29sbGVjdGVkQXJyYXlzcQB+AAvnQ67ddAAJZGVmaW5lZEF0c3EAfgALf1DCDHQADG5lc3RlZFN1aXRlc3NxAH4AC/FAohJ0AAZhc3N1bWVzcQB+AAvXLbfqdAAGJGluaXQkc3EAfgALgmh9jHQAB2RlZmluZWRzcQB+AAvZrxW5dAAgbG93UHJpb3JpdHlUeXBlQ2hlY2tlZENvbnN0cmFpbnRzcQB+AAvsWZ9VdAAHaW5jbHVkZXNxAH4ACzSvj590AAhUaGV5V29yZHNxAH4AC4Mkqix0AAxyZWdpc3RlclRlc3RzcQB+AAtK2K+1dAAJdHlwZUNoZWNrc3EAfgAL2Rv0GXQAEWV4ZWN1dGUkZGVmYXVsdCQ1c3EAfgALWK5YsnQADkNvdW50ZXJGaXh0dXJlc3EAfgALPzm00XQAAz09PXNxAH4AC5/ET0d0ABhuZXdUZXN0Q2FuY2VsZWRFeGNlcHRpb25zcQB+AAv0Bmr5dAAHbWVzc2FnZXNxAH4AC9bmAQp0AAdjb3VudGVyc3EAfgALN4I0unQACHRvU3RyaW5nc3EAfgALhrNq83QACWFmdGVyV29yZHNxAH4AC6dKotl0AAV3aGljaHNxAH4AC+tzcAB0AAl0ZXN0TmFtZXNzcQB+AAu0O2UZdAAPeWVPbGRlVGVzdE5hbWVzc3EAfgALpZ4IcXQAAmFuc3EAfgALRvNQ9HQABmxlbmd0aHNxAH4ACxq47Sp0ABhTdHJpbmdNdXN0V3JhcHBlckZvclZlcmJzcQB+AAv0Vid3dAARZXhlY3V0ZSRkZWZhdWx0JDFzcQB+AAt9b8sQdAACYmVzcQB+AAtlHTQIdAACIT1zcQB+AAv1b4HNdAAiUmVzdWx0T2ZIYXZlV29yZEZvckNvbGxlY3RlZEV4dGVudHNxAH4AC4XUo3l0AB9SZXN1bHRPZkZ1bGx5TWF0Y2hXb3JkRm9yU3RyaW5nc3EAfgALBOJx3nQADG1hdGNoUGF0dGVybnNxAH4AC4dNi9R0AAhnZXRDbGFzc3NxAH4AC8ITf350ABNyZWdpc3Rlcklnbm9yZWRUZXN0c3EAfgALv2t5NHQABmJlaGF2ZXNxAH4AC4F2zuR0AAhydW5UZXN0c3NxAH4AC0Z+Se10ABFwZW5kaW5nVW50aWxGaXhlZHNxAH4ACxgkTgp0ABJhdE1vc3RPbmVFbGVtZW50T2ZzcQB+AAtAOLXldAAYdGhlU2FtZUVsZW1lbnRzSW5PcmRlckFzc3EAfgALmMtYOHQAF1RoZVNhbWVJbnN0YW5jZUFzUGhyYXNlc3EAfgALJculOHQADWFyZUVxdWl2YWxlbnRzcQB+AAsaVwJjdAAHYmV0d2VlbnNxAH4AC/fAIZp0AAdkZWNpZGVkc3EAfgALHW2Pg3QAFFJlc3VsdE9mQmVXb3JkRm9yQW55c3EAfgALuBj1FXQAEWV4cGVjdGVkVGVzdENvdW50c3EAfgALRwjfv3QAB2VuZFdpdGhzcQB+AAsxYMaxdAAMbm9FbGVtZW50c09mc3EAfgALnBQsVXQACHJlcnVubmVyc3EAfgALh93zvHQAC3Nob3VsZEVxdWFsc3EAfgALc6skJnQACVJlZ2V4V29yZHNxAH4AC6WV4FJ0AAxUaGVBZnRlcldvcmRzcQB+AAuESK3QdAAiY29udmVydEVxdWl2YWxlbmNlVG9CVG9BQ29uc3RyYWludHNxAH4AC0Mj46N0AAVvbmVPZnNxAH4AC0dXOPp0AAJuZXNxAH4AC8ZYEKB0AAJub3NxAH4AC6vyepB0AChSZXN1bHRPZkZ1bGx5TWF0Y2hXb3JkRm9yQ29sbGVjdGVkU3RyaW5nc3EAfgALVcYianQAC2RvQ29sbGVjdGVkc3EAfgALnm0CcnQAEUNoZWNraW5nRXF1YWxpemVyc3EAfgALq5cjInQACHdyaXRhYmxlc3EAfgALY8i3THQAB3BlbmRpbmdzcQB+AAtIvYbadAAFdmFsdWVzcQB+AAtwXno0dAAEd2hlbnNxAH4ACy7PfrJ0AAZpZ25vcmVzcQB+AAuZlrsydAAIc2hvdWxkQmVzcQB+AAtNLpLpdAAcUmVzdWx0T2ZJbmNsdWRlV29yZEZvclN0cmluZ3NxAH4AC0kpF0h0AAttYWNyb0Fzc2VydHNxAH4AC3H7C410AAJlcXNxAH4AC7Yb7al0ABpjb252ZXJ0VG9DaGVja2luZ0VxdWFsaXplcnNxAH4AC0N/eNV0AAJvZnNxAH4AC6gOPYZ0AAIrLXNxAH4AC1G8yjF0AAlOb0FyZ1Rlc3RzcQB+AAuKKqQWdAABPnNxAH4AC5ksxTp0AAhyZWFkYWJsZXNxAH4AC98oXpd0AAIjI3NxAH4ACz4Qb5p0ABpTdHJpbmdTaG91bGRXcmFwcGVyRm9yVmVyYnNxAH4ACzZXCpZ0AAhmaW5hbGl6ZXNxAH4AC8Dps290ABtjb252ZXJzaW9uQ2hlY2tlZENvbnN0cmFpbnRzcQB+AAseoUsudAALYXRNb3N0T25lT2ZzcQB+AAsuxF2ddAAFYWxsT2ZzcQB+AAuxQSI0dAAIaGFzaENvZGVzcQB+AAtDllXPdAAHc3VpdGVJZHNxAH4AC2TBXpB0AAlzdWl0ZU5hbWVzcQB+AAugaz6+dAAMUmVnZXhXcmFwcGVyc3EAfgAL78k6SnQAA3RoZXNxAH4AC6AXnvB0AARvbmx5c3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4CA3hyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAHQAI2thbW9uLm1ldHJpYy5pbnN0cnVtZW50LkNvdW50ZXJTcGVjdXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAACdAAQc2NhbGEuZGVwcmVjYXRlZHQAJ3NjYWxhLnJlZmxlY3QubWFjcm9zLmludGVybmFsLm1hY3JvSW1wbHNyACF4c2J0aS5hcGkuQWJzdHJhY3RMYXp5JFN0cmljdExhenkNZhxrKRYquAIAAUwABXZhbHVldAASTGphdmEvbGFuZy9PYmplY3Q7eHBzcgATeHNidGkuYXBpLkVtcHR5VHlwZbz9nkZJO4kkAgAAeHIAFHhzYnRpLmFwaS5TaW1wbGVUeXBlcnhiiCEjv0ACAAB4cgAOeHNidGkuYXBpLlR5cGU/atkhFkmqygIAAHhwc3EAfgIdc3IAE3hzYnRpLmFwaS5TdHJ1Y3R1cmWpqvmAk2/YAAIAA0wACGRlY2xhcmVkcQB+AgNMAAlpbmhlcml0ZWRxAH4CA0wAB3Bh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
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwM/ZTEgAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAABBzcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHB8HXxYdAAjY29udmVydFRvU3RyaW5nU2hvdWxkV3JhcHBlckZvclZlcmJzcQB+AAv3nrtxdAAZY29udmVydFRvU3RyaW5nQ2FuV3JhcHBlcnNxAH4AC03zIUR0AAZzeXN0ZW1zcQB+AAsscd4SdAAeY29udmVydFRvV29yZFNwZWNTdHJpbmdXcmFwcGVyc3EAfgALecHXFXQAB2NvbnRleHRzcQB+AAsqC4tvdAAZY29udmVydFRvQW55U2hvdWxkV3JhcHBlcnNxAH4AC++bxA90ACJjb252ZXJ0TnVtZXJpY1RvUGx1c09yTWludXNXcmFwcGVyc3EAfgALxAcdtHQAEmNvbnZlcnRUb0VxdWFsaXplcnNxAH4AC0O85jp0AARzZWxmc3EAfgALOHUDlnQAKHN1YmplY3RXaXRoQWZ0ZXJXb3JkUmVnaXN0cmF0aW9uRnVuY3Rpb25zcQB+AAvrAAw2dAAVY29udmVydFRvUmVnZXhXcmFwcGVyc3EAfgAL5erdynQAFXVuY29uc3RyYWluZWRFcXVhbGl0eXNxAH4AC513Hyp0ACFjb252ZXJ0VG9TdHJpbmdNdXN0V3JhcHBlckZvclZlcmJzcQB+AAtQPk7adAAcY29udmVydFRvU3RyaW5nU2hvdWxkV3JhcHBlcnNxAH4ACwskNq10ACtjb252ZXJ0U3ltYm9sVG9IYXZlUHJvcGVydHlNYXRjaGVyR2VuZXJhdG9yc3EAfgALV+D0t3QAG3N1YmplY3RSZWdpc3RyYXRpb25GdW5jdGlvbnVxAH4ACQAAATNzcQB+AAuytX5mdAALaW5PcmRlck9ubHlzcQB+AAsnT7UmdAAGYXNzZXJ0c3EAfgALxW4hp3QAEU1pbk1heENvdW50ZXJTcGVjc3EAfgALQol7y3QADGNoaWxkQWN0b3JPZnNxAH4AC+pW7Bt0AB5SZXN1bHRPZlN0YXJ0V2l0aFdvcmRGb3JTdHJpbmdzcQB+AAuEQQ5odAAHc3VjY2VlZHNxAH4AC4AfgFZ0ABJQbHVzT3JNaW51c1dyYXBwZXJzcQB+AAtpt+xOdAAGbm90aWZ5c3EAfgALdiSq7XQAJmxvd1ByaW9yaXR5Q29udmVyc2lvbkNoZWNrZWRDb25zdHJhaW50c3EAfgALfSbqOHQACXNob3VsZE5vdHNxAH4ACxSlGBl0ABVXb3JkU3BlY1N0cmluZ1dyYXBwZXJzcQB+AAsHFzXCdAAFcmVnZXhzcQB+AAsF/NFKdAAGQW5Xb3Jkc3EAfgAL6IPO6nQAB1JlY2VpdmVzcQB+AAv1nrDydAAQQXNzZXJ0aW9uc0hlbHBlcnNxAH4AC+hOG010AAZjYW5jZWxzcQB+AAvycUCodAARZXhlY3V0ZSRkZWZhdWx0JDJzcQB+AAvnzcoQdAABeHNxAH4AC6oV4UB0AAlpbnRlcmNlcHRzcQB+AAuxHqSJdAAEZmFpbHNxAH4AC5fj5BR0AARuYW1lc3EAfgALyHKlfnQAGmV4cGVjdFRlcm1pbmF0ZWQkZGVmYXVsdCQyc3EAfgAL2qR9pnQAAmluc3EAfgALA5XH+HQAHEhhdmVQcm9wZXJ0eU1hdGNoZXJHZW5lcmF0b3JzcQB+AAsxEgWydAAFQVdvcmRzcQB+AAuWKr3wdAAEaGF2ZXNxAH4ACzFMSCx0ABRhc3NlcnREb2VzTm90Q29tcGlsZXNxAH4AC99fgKZ0ABFleGVjdXRlJGRlZmF1bHQkNHNxAH4AC92aTIJ0ACJSZXN1bHRPZkNvbnRhaW5Xb3JkRm9yQ29sbGVjdGVkQW55c3EAfgALopvlDHQAAmlzc3EAfgALfIrv7nQAEnJlbWFpbmluZ09yRGVmYXVsdHNxAH4ACzFfKwp0AAdleGVjdXRlc3EAfgALFbcOuXQABHdhaXRzcQB+AAtipdcWdAATZXhwZWN0TXNnQWxsQ2xhc3NPZnNxAH4AC85YleB0AA5EZXRlcm1pbmVkV29yZHNxAH4AC+1Bt7l0AAt0ZXN0RGF0YUZvcnNxAH4AC9O2dm50ABNjcmVhdGVDYXRjaFJlcG9ydGVyc3EAfgALrmmIVnQAAjw9c3EAfgALLaCQK3QACXN0eWxlTmFtZXNxAH4AC4OH2AB0ABZyZWNlaXZlV2hpbGUkZGVmYXVsdCQyc3EAfgAL1w/ryHQADWxlZnRTaWRlVmFsdWVzcQB+AAuYlZf3dAATYXRMZWFzdE9uZUVsZW1lbnRPZnNxAH4ACy0B/ZB0AA0kYXNJbnN0YW5jZU9mc3EAfgAL68sAonQABWVtcHR5c3EAfgAL2T+hsHQAFnJlY2VpdmVXaGlsZSRkZWZhdWx0JDFzcQB+AAstkAZIdAAJc3RhcnRXaXRoc3EAfgALuHOPmXQADmV4cGVjdE1zZ0NsYXNzc3EAfgALOgf3yXQABHNpemVzcQB+AAs7K6B+dAARZXhlY3V0ZSRkZWZhdWx0JDNzcQB+AAvCperxdAALZXhwZWN0TXNnUEZzcQB+AAuozp0IdAAUUmVzdWx0T2ZDb2xsZWN0ZWRBbnlzcQB+AAvFSbArdAANYWxsRWxlbWVudHNPZnNxAH4AC8xFlVV0AAVleGlzdHNxAH4ACw2i7BZ0ABNleHBlY3RNc2dBbnlDbGFzc09mc3EAfgALOEiRKHQACUFmdGVyV29yZHNxAH4AC0yj9nR0AAljb25maWdNYXBzcQB+AAuM5MwOdAAPdGVzdEtpdFNldHRpbmdzc3EAfgALBcnmQnQACVZhbHVlV29yZHNxAH4AC/DCpWp0ABFjb2xsZWN0aW9uQ29udGV4dHNxAH4AC122BIx0AAZlcXVhbHNzcQB+AAuIKyRfdAAMYXRMZWFzdE9uZU9mc3EAfgALT8MONHQAB2F0TGVhc3RzcQB+AAuOxsThdAAIdGhyb3duQnlzcQB+AAsK5//sdAAsY29udmVydEVxdWl2YWxlbmNlVG9BVG9CQ29udmVyc2lvbkNvbnN0cmFpbnRzcQB+AAve74TQdAAPZGVmYXVsdEVxdWFsaXR5c3EAfgAL+yu8I3QACnJlY2VpdmVPbmVzcQB+AAuceJXrdAAiY29udmVydEVxdWl2YWxlbmNlVG9BVG9CQ29uc3RyYWludHNxAH4AC+TY4OJ0ABxSZXN1bHRPZkVuZFdpdGhXb3JkRm9yU3RyaW5nc3EAfgALYxcd2nQABG11c3RzcQB+AAvS3x7bdAAWY29sbGVjdENvdW50ZXJTbmFwc2hvdHNxAH4AC5GrtOV0ABVhd2FpdEFzc2VydCRkZWZhdWx0JDJzcQB+AAvLGjLkdAADYWxsc3EAfgALzuBiPXQABHRhZ3NzcQB+AAs3MOKzdAAMYXNJbnN0YW5jZU9mc3EAfgALkLvfFXQAATxzcQB+AAtb4iCgdAAFYWxlcnRzcQB+AAsNE9X1dAALbGFzdE1lc3NhZ2VzcQB+AAsGfMX7dAAHaW5PcmRlcnNxAH4AC4NGwNJ0AApwcmV0dGlmaWVyc3EAfgAL5L3q+XQACHJlY2VpdmVOc3EAfgALA0zM4nQAE2F3YWl0Q29uZCRkZWZhdWx0JDJzcQB+AAtKJvOgdAADcnVuc3EAfgAL7/2dd3QAEURlY2lkZWRCeUVxdWFsaXR5c3EAfgAL4G4uCXQABWV2ZXJ5c3EAfgALY/9mEXQAB3Vud2F0Y2hzcQB+AAsnYCoYdAAGc2NvcGVzc3EAfgALNmOIr3QAA3Bvc3NxAH4ACylvXRR0AAliZWZvcmVBbGxzcQB+AAuUnpsEdAAKd2l0aEdyb3Vwc3NxAH4AC9HW4bh0AAxzeW5jaHJvbml6ZWRzcQB+AAt9ch0VdAACaXRzcQB+AAtxfqSpdAANZXhwZWN0TXNnVHlwZXNxAH4AC3wlVSF0AAdLZXlXb3Jkc3EAfgAL47h8J3QAEXRoZVNhbWVFbGVtZW50c0Fzc3EAfgAL6YT5KXQADmFzc2VydENvbXBpbGVzc3EAfgALV7a4hnQABXdhdGNoc3EAfgALbq3N6HQACmRldGVybWluZWRzcQB+AAue70N+dAABYXNxAH4ACxrhIq50AAxhc3NlcnRUaHJvd3NzcQB+AAt58ySGdAAObGVmdFNpZGVTdHJpbmdzcQB+AAtdGpI0dAANJGlzSW5zdGFuY2VPZnNxAH4AC8V1A1R0AAR0cmFwc3EAfgAL5eMGd3QAFXRlc3REYXRhRm9yJGRlZmF1bHQkMnNxAH4AC3tvN+p0AAxhc3NlcnRSZXN1bHRzcQB+AAtwiMlddAAHcmVjZWl2ZXNxAH4AC95S2fJ0AB5SZXN1bHRPZk5vdFdvcmRGb3JDb2xsZWN0ZWRBbnlzcQB+AAvZ35hudAAKcHJlUmVzdGFydHNxAH4AC+lvTOR0AA5leHBlY3RNc2dBbGxPZnNxAH4AC8J0+e50AAI+PXNxAH4AC5KzcYN0AAZ3aXRoaW5zcQB+AAtPJ8T3dAAMb25lRWxlbWVudE9mc3EAfgALoo6XinQADWFyb3VuZFJlY2VpdmVzcQB+AAv4YPlcdAAXU3RyaW5nQ2FuV3JhcHBlckZvclZlcmJzcQB+AAuhKrXxdAAGYnVmZmVyc3EAfgALq70sYXQABHRleHRzcQB+AAu3HaLsdAAlUmVzdWx0T2ZJbmNsdWRlV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4ACzpny0h0ACxjb252ZXJ0RXF1aXZhbGVuY2VUb0JUb0FDb252ZXJzaW9uQ29uc3RyYWludHNxAH4AC/nvqGl0ABVleHBlY3RNc2dQRiRkZWZhdWx0JDFzcQB+AAufcJkgdAAGY29uZmlnc3EAfgALiyEhvHQAB2NvbnRhaW5zcQB+AAuKQsG9dAAUTWluTWF4Q291bnRlckZpeHR1cmVzcQB+AAuOFmSqdAALcG9zdFJlc3RhcnRzcQB+AAsVX2ajdAAKbmV3Q29udGV4dHNxAH4ACwiyDqN0AAR0aGV5c3EAfgALTnaaVnQAB2NvbXBpbGVzcQB+AAvYtkDHdAAIcG9zdFN0b3BzcQB+AAuwRgDkdAARZXhlY3V0ZSRkZWZhdWx0JDdzcQB+AAuGsjjxdAAHZXhhY3RseXNxAH4AC/+EBcZ0ABF0aGVTYW1lSW5zdGFuY2VBc3NxAH4AC8LvlJh0AAthd2FpdEFzc2VydHNxAH4AC0ue9a90ACdSZXN1bHRPZlN0YXJ0V2l0aFdvcmRGb3JDb2xsZWN0ZWRTdHJpbmdzcQB+AAvU3Lf6dAARaW5PcmRlckVsZW1lbnRzT2ZzcQB+AAsEpR6RdAALRGVjaWRlZFdvcmRzcQB+AAu4bSThdAAVdHlwZUNoZWNrZWRDb25zdHJhaW50c3EAfgALtXxu8HQAAyE9PXNxAH4ACy9oiXl0AAZhdE1vc3RzcQB+AAu/xEmGdAAEaW5mb3NxAH4AC5pm+F10AAtub0V4Y2VwdGlvbnNxAH4AC3U3MDt0AAlub3RpZnlBbGxzcQB+AAtTijnVdAAEdGhhdHNxAH4AC//JYt90AApzdGFja0RlcHRoc3EAfgALiko/nXQAC3dpdGhGaXh0dXJlc3EAfgALOAd1BnQAB3J1blRlc3RzcQB+AAtp/oz5dAARYXJvdW5kUG9zdFJlc3RhcnRzcQB+AAvhXd9qdAAJYXdhaXRDb25kc3EAfgAL/Y2SAHQAHVJlc3VsdE9mQmVXb3JkRm9yQ29sbGVjdGVkQW55c3EAfgALVmskeXQAA2tleXNxAH4AC20n38B0AANub3dzcQB+AAt2og5kdAAMaXNJbnN0YW5jZU9mc3EAfgALc8QVanQACHdpdGhDbHVlc3EAfgALy2c6ZHQAEGFzc2VydGlvbnNIZWxwZXJzcQB+AAstYc3CdAAQYXJvdW5kUHJlUmVzdGFydHNxAH4ACyUWJr50ABFleGVjdXRlJGRlZmF1bHQkNnNxAH4AC9p7JER0AA5hcm91bmRQb3N0U3RvcHNxAH4AC06X+YV0AAh0YWdnZWRBc3NxAH4AC1BinPh0AA9hc3NlcnRUeXBlRXJyb3JzcQB+AAu8pRqIdAAlUmVzdWx0T2ZFbmRXaXRoV29yZEZvckNvbGxlY3RlZFN0cmluZ3NxAH4AC7lLN+R0AAZtYXJrdXBzcQB+AAv2/ghYdAAIc2h1dGRvd25zcQB+AAurfOHkdAAIbGVmdFNpZGVzcQB+AAvQ+napdAATYXdhaXRDb25kJGRlZmF1bHQkM3NxAH4AC+YCoGR0ABhleHBlY3RNc2dBbGxDb25mb3JtaW5nT2ZzcQB+AAsEROGPdAAGPGluaXQ+c3EAfgALpT5OXXQAC21hY3JvQXNzdW1lc3EAfgALzaugIHQAD3J1bk5lc3RlZFN1aXRlc3NxAH4AC+lkczZ0ABhNaW5NYXhDb3VudGVyVXBkYXRlQWN0b3JzcQB+AAsoo+TUdAAZUmVzdWx0T2ZIYXZlV29yZEZvckV4dGVudHNxAH4ACyveqsp0AAhwcmVTdGFydHNxAH4AC5Y60J90AAxtc2dBdmFpbGFibGVzcQB+AAt82q3YdAADY2Fuc3EAfgALhbEoIHQADHNldEF1dG9QaWxvdHNxAH4AC1Rahth0AAViZWluZ3NxAH4AC9dywqB0AAl1bmhhbmRsZWRzcQB+AAuuD5gmdAAFZXF1YWxzcQB+AAv+VO5PdAAGSXRXb3Jkc3EAfgALLp3wsXQADnRha2VTbmFwc2hvdE9mc3EAfgALbHGY7HQACGFyZUVxdWFsc3EAfgALs5DMS3QABm5vbmVPZnNxAH4AC8YJtb10AAVhcHBseXNxAH4AC/L4Bv10AAl3aXRoR3JvdXBzcQB+AAtXDo5tdAALaWdub3JlTm9Nc2dzcQB+AAvdclrAdAAFYWZ0ZXJzcQB+AAvqi1TcdAAJRXF1YWxpemVyc3EAfgAL/agMyHQACmFmdGVyQmVpbmdzcQB+AAshkLlHdAAiUmVzdWx0T2ZUYWdnZWRBc0ludm9jYXRpb25PblN0cmluZ3NxAH4AC6VvC4l0ABtuZXdBc3NlcnRpb25GYWlsZWRFeGNlcHRpb25zcQB+AAudah40dAAEbm90ZXNxAH4ACyQPpU50AAI9PXNxAH4AC/zpPiN0ABJzaHV0ZG93biRkZWZhdWx0JDJzcQB+AAt0F80ldAACYnlzcQB+AAsYRCJndAAGc29ydGVkc3EAfgALSg3wPnQACmZ1bGx5TWF0Y2hzcQB+AAuMYksodAAFY2xvbmVzcQB+AAuvppQZdAAJcmVtYWluaW5nc3EAfgALjhLownQACWlnbm9yZU1zZ3NxAH4AC5M0oN90ABNTdHJpbmdTaG91bGRXcmFwcGVyc3EAfgALQQ+61XQABnNob3VsZHNxAH4AC66LK+t0ABBBbnlTaG91bGRXcmFwcGVyc3EAfgALftT5a3QAF0RldGVybWluZWRCeUVxdWl2YWxlbmNlc3EAfgALnWwLKHQAA25vdHNxAH4AC2loXIx0AB9SZXN1bHRPZkJlV29yZEZvckNvbGxlY3RlZEFycmF5c3EAfgAL25dCGHQAEmZsdXNoU3Vic2NyaXB0aW9uc3NxAH4ACzKmA750AAlkZWZpbmVkQXRzcQB+AAsBs8mYdAAMbmVzdGVkU3VpdGVzc3EAfgALDdLNF3QABmFzc3VtZXNxAH4AC0whaxR0AAYkaW5pdCRzcQB+AAs05WrrdAAHZGVmaW5lZHNxAH4AC+mjXfx0ACBsb3dQcmlvcml0eVR5cGVDaGVja2VkQ29uc3RyYWludHNxAH4AC8QL+yh0AAl0ZXN0QWN0b3JzcQB+AAvXCcg+dAAHaW5jbHVkZXNxAH4AC5Lp3Yh0AAhUaGV5V29yZHNxAH4AC4lNP7V0ABJzaHV0ZG93biRkZWZhdWx0JDFzcQB+AAvwPVrzdAAMcmVnaXN0ZXJUZXN0c3EAfgALwmSrv3QACXR5cGVDaGVja3NxAH4ACwm4UlR0ABFleGVjdXRlJGRlZmF1bHQkNXNxAH4AC0XPqaJ0AAM9PT1zcQB+AAs1rVordAAGc2VuZGVyc3EAfgALWfMoM3QAGG5ld1Rlc3RDYW5jZWxlZEV4Y2VwdGlvbnNxAH4AC6V3Axx0AAdtZXNzYWdlc3EAfgALpqanSXQADHJlY2VpdmVXaGlsZXNxAH4ACwX0V+90AAh0b1N0cmluZ3NxAH4ACxNHi510AAlhZnRlcldvcmRzcQB+AAu9pBNwdAAFd2hpY2hzcQB+AAt1Px/gdAAJdGVzdE5hbWVzc3EAfgALUJOHUHQAD3llT2xkZVRlc3ROYW1lc3NxAH4AC/C03TF0AAJhbnNxAH4AC08wxzV0AAZsZW5ndGhzcQB+AAsS9erjdAAOZXhwZWN0TXNnQW55T2ZzcQB+AAstiJjzdAAYU3RyaW5nTXVzdFdyYXBwZXJGb3JWZXJic3EAfgALcQj263QAEWV4ZWN1dGUkZGVmYXVsdCQxc3EAfgALKxHe6XQAAmJlc3EAfgALPyzwanQAAiE9c3EAfgALDd0773QAIlJlc3VsdE9mSGF2ZVdvcmRGb3JDb2xsZWN0ZWRFeHRlbnRzcQB+AAtWqjZAdAAfUmVzdWx0T2ZGdWxseU1hdGNoV29yZEZvclN0cmluZ3NxAH4AC3ly67F0ADJpbnZva2VCZWZvcmVBbGxBbmRBZnRlckFsbEV2ZW5JZk5vVGVzdHNBcmVFeHBlY3RlZHNxAH4AC5etpp50AAxtYXRjaFBhdHRlcm5zcQB+AAsddpv7dAAIZ2V0Q2xhc3NzcQB+AAvHM4GAdAATcmVnaXN0ZXJJZ25vcmVkVGVzdHNxAH4AC4e6W6l0AAZiZWhhdmVzcQB+AAuUDSm3dAAYZmlzaEZvck1lc3NhZ2UkZGVmYXVsdCQxc3EAfgALCxaN0HQACHJ1blRlc3Rzc3EAfgALoVD6SnQAEXBlbmRpbmdVbnRpbEZpeGVkc3EAfgALEwPmeXQAEmF0TW9zdE9uZUVsZW1lbnRPZnNxAH4AC7BEJ+t0AAtleHBlY3ROb01zZ3NxAH4AC7XDal10ABh0aGVTYW1lRWxlbWVudHNJbk9yZGVyQXNzcQB+AAtQsz4jdAAXVGhlU2FtZUluc3RhbmNlQXNQaHJhc2VzcQB+AAusnCeFdAAWcmVjZWl2ZVdoaWxlJGRlZmF1bHQkM3NxAH4AC8Oaef90ABVleHBlY3RNc2dQRiRkZWZhdWx0JDJzcQB+AAtPc6DQdAANYXJlRXF1aXZhbGVudHNxAH4ACyzYfUJ0AAdiZXR3ZWVuc3EAfgAL6zk7XHQACGFmdGVyQWxsc3EAfgALZM+kyHQAB2RlY2lkZWRzcQB+AAvC+tXAdAAUUmVzdWx0T2ZCZVdvcmRGb3JBbnlzcQB+AAty5D2GdAARZXhwZWN0ZWRUZXN0Q291bnRzcQB+AAvZ25OjdAAHZW5kV2l0aHNxAH4AC9i8Kw10AAxub0VsZW1lbnRzT2ZzcQB+AAvo0r7udAAIcmVydW5uZXJzcQB+AAtiSDxKdAALc2hvdWxkRXF1YWxzcQB+AAtkKolVdAAJUmVnZXhXb3Jkc3EAfgALLb71VXQADFRoZUFmdGVyV29yZHNxAH4ACzQEjq50ACJjb252ZXJ0RXF1aXZhbGVuY2VUb0JUb0FDb25zdHJhaW50c3EAfgAL9SCwl3QABW9uZU9mc3EAfgALb4PilXQAAm5lc3EAfgALQjjwc3QAC3JlbWFpbmluZ09yc3EAfgALOXMw2XQACWV4cGVjdE1zZ3NxAH4ACz6CXZF0ABhmaXNoRm9yTWVzc2FnZSRkZWZhdWx0JDJzcQB+AAuS9xKWdAANdGVzdEFjdG9yTmFtZXNxAH4AC8yy+hd0ABBleHBlY3RUZXJtaW5hdGVkc3EAfgAL5vwfoXQAAm5vc3EAfgAL4nBjWXQAEnNodXRkb3duJGRlZmF1bHQkM3NxAH4AC7aIeVh0AChSZXN1bHRPZkZ1bGx5TWF0Y2hXb3JkRm9yQ29sbGVjdGVkU3RyaW5nc3EAfgALLHVfcXQAC2RvQ29sbGVjdGVkc3EAfgALaoLG3XQAEUNoZWNraW5nRXF1YWxpemVyc3EAfgALLcJdOHQACHdyaXRhYmxlc3EAfgAL3kluzXQAB3BlbmRpbmdzcQB+AAsJoflFdAAFdmFsdWVzcQB+AAthupMbdAAEd2hlbnNxAH4ACzLB/mZ0AAZpZ25vcmVzcQB+AAvUgd4xdAAIc2hvdWxkQmVzcQB+AAvor/bodAAcUmVzdWx0T2ZJbmNsdWRlV29yZEZvclN0cmluZ3NxAH4AC7+8BNx0AAttYWNyb0Fzc2VydHNxAH4ACy7c3JZ0ABNhd2FpdENvbmQkZGVmYXVsdCQ0c3EAfgALT1HlPXQAEnN1cGVydmlzb3JTdHJhdGVneXNxAH4AC/C9FvN0AAJlcXNxAH4ACy+0bbB0ABpjb252ZXJ0VG9DaGVja2luZ0VxdWFsaXplcnNxAH4AC+WZvAN0AAJvZnNxAH4AC0cAn5p0ABVhd2FpdEFzc2VydCRkZWZhdWx0JDNzcQB+AAsDRUR8dAAKbGFzdFNlbmRlcnNxAH4AC8ULdet0AAIrLXNxAH4AC0CtLLF0AAlOb0FyZ1Rlc3RzcQB+AAtsqE+1dAABPnNxAH4ACxspzyB0AAhyZWFkYWJsZXNxAH4AC0VqTiR0AAIjI3NxAH4AC8DQ/C50ABpTdHJpbmdTaG91bGRXcmFwcGVyRm9yVmVyYnNxAH4AC+McnXJ0AAhmaW5hbGl6ZXNxAH4AC2U3BHh0ABtjb252ZXJzaW9uQ2hlY2tlZENvbnN0cmFpbnRzcQB+AAsyQeLAdAALYXRNb3N0T25lT2ZzcQB+AAu4yIpYdAAOZmlzaEZvck1lc3NhZ2VzcQB+AAvhSU+XdAAFYWxsT2ZzcQB+AAsFMiTvdAAIaGFzaENvZGVzcQB+AAvQzcBldAAHc3VpdGVJZHNxAH4AC+H+DfV0AAlzdWl0ZU5hbWVzcQB+AAu0HaN+dAAOYXJvdW5kUHJlU3RhcnRzcQB+AAtiuPLNdAAMUmVnZXhXcmFwcGVyc3EAfgALecW7M3QAA3RoZXNxAH4ACzrkwId0AAltbUNvdW50ZXJzcQB+AAvgY9EqdAAEb25seXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAJzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+Ap14cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgAMeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAB0AClrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5NaW5NYXhDb3VudGVyU3BlY3VyABpbTHhzYnRpLmFwaS5UeXBlUGFyYW1ldGVyO9ltJg8onfK2AgAAeHAAAAAAfnIAGHhzYnRpLmFwaS5EZWZpbml0aW9uVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQACENsYXNzRGVmdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAnQAEHNjYWxhLmRlcHJlY2F0ZWR0ACdzY2FsYS5yZWZsZWN0Lm1hY3Jvcy5pbnRlcm5hbC5tYWNyb0ltcGxzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4Ct3NyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgKdTAAJaW5oZXJpdGVkcQB+Ap1MAAdwYXJlbnRzcQB+Ap14cQB+ArxzcQB+Ard1cQB+ApgAAAAAc3EAfgK3dXEAfgKYAAAAAHNxAH4Ct3VyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAAbc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgAMTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4Cu3QADUJhc2VLYW1vblNwZWNzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+ArtzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgAMeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABWthbW9uc3EAfgLUdAAHdGVzdGtpdHNyAA54c2J0aS5hcGkuVGhpc9sJ7abMWkBcAgAAeHEAfgLVc3EAfgLIdAARQmVmb3JlQW5kQWZ0ZXJBbGxzcQB+AsxzcQB+As91cQB+AtIAAAADc3EAfgLUdAADb3Jnc3EAfgLUdAAJc2NhbGF0ZXN0cQB+AttzcQB+Ash0AApTdWl0ZU1peGlucQB+At5zcQB+Ash0AA5JbXBsaWNpdFNlbmRlcnNxAH4CzHNxAH4Cz3VxAH4C0gAAAANzcQB+AtR0AARha2thc3EAfgLUdAAHdGVzdGtpdHEAfgLbc3EAfgLIdAAITWF0Y2hlcnNxAH4C3nNxAH4CyHQACkV4cGxpY2l0bHlzcQB+AsxzcQB+As91cQB+AtIAAAADc3EAfgLUdAADb3Jnc3EAfgLUdAAJc2NhbGFjdGljcQB+AttzcQB+Ash0AAxNYXRjaGVyV29yZHNzcQB+AsxzcQB+As91cQB+AtIAAAAEc3EAfgLUdAADb3Jnc3EAfgLUdAAJc2NhbGF0ZXN0c3EAfgLUdAAFd29yZHNxAH4C23NxAH4CyHQACVRvbGVyYW5jZXEAfgL0c3EAfgLIdAAMV29yZFNwZWNMaWtlcQB+At5zcQB+Ash0AAtEb2N1bWVudGluZ3EAfgLec3EAfgLIdAAIQWxlcnRpbmdxAH4C3nNxAH4CyHQACU5vdGlmeWluZ3EAfgLec3EAfgLIdAAJSW5mb3JtaW5ncQB+At5zcQB+Ash0AAdDYW5WZXJicQB+Av1zcQB+Ash0AAhNdXN0VmVyYnEAfgL9c3EAfgLIdAAKU2hvdWxkVmVyYnEAfgL9c3EAfgLIdAAQVGVzdFJlZ2lzdHJhdGlvbnEAfgLec3EAfgLIdAAJVGVzdFN1aXRlcQB+At5zcQB+Ash0AAVTdWl0ZXEAfgLec3EAfgLIdAAMU2VyaWFsaXphYmxlc3EAfgLMc3EAfgLPdXEAfgLSAAAAAnNxAH4C1HQABXNjYWxhcQB+AttzcQB+AshxAH4DH3NxAH4CzHNxAH4Cz3VxAH4C0gAAAANzcQB+AtR0AARqYXZhc3EAfgLUdAACaW9xAH4C23NxAH4CyHQACkFzc2VydGlvbnNxAH4C3nNxAH4CyHQADFRyaXBsZUVxdWFsc3EAfgL0c3EAfgLIdAATVHJpcGxlRXF1YWxzU3VwcG9ydHEAfgL0c3EAfgLIdAALVGVzdEtpdEJhc2VxAH4C6XNxAH4CyHQABk9iamVjdHNxAH4CzHNxAH4Cz3VxAH4C0gAAAANzcQB+AtRxAH4DKnNxAH4C1HQABGxhbmdxAH4C23NxAH4CyHQAA0FueXEAfgMgc3EAfgKacQB+Aqd1cQB+AqgAAAAAc3EAfgKqAHQAMGthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lk1pbk1heENvdW50ZXJVcGRhdGVBY3RvcnVxAH4CrQAAAABxAH4CsXVxAH4CswAAAABzcQB+ArdxAH4CvXNxAH4Ct3NxAH4Cv3NxAH4Ct3VxAH4CmAAAAABzcQB+Ard1cQB+ApgAAAAAc3EAfgK3dXEAfgLGAAAAA3NxAH4CyHQABUFjdG9yc3EAfgLMc3EAfgLPdXEAfgLSAAAAA3NxAH4C1HQABGFra2FzcQB+AtR0AAVhY3RvcnEAfgLbc3EAfgLIcQB+AzZzcQB+AsxzcQB+As91cQB+AtIAAAADc3EAfgLUcQB+AypzcQB+AtRxAH4DPHEAfgLbc3EAfgLIcQB+Az5zcQB+AsxzcQB+As91cQB+AtIAAAACc3EAfgLUcQB+AyRxAH4C23VyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAADc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AAx4cHQADGthbW9uLm1ldHJpY3NxAH4DZHQAF2thbW9uLm1ldHJpYy5pbnN0cnVtZW50c3EAfgNkdAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjlejtGdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgAMTAAPc291cmNlRGlyZWN0b3J5cQB+AAx4cHQAQi9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL3Rlc3QtY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFHyNq7LQ/YD25I+h7FLsMySF8pgr
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> 

/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> 

external apis:
65 items
kamon.Kamon -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwRxr83wAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAbc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hw9CK5tXQABm5vdGlmeXNxAH4ADHZE5Nd0AAR3YWl0c3EAfgAMzcoGOnQADSRhc0luc3RhbmNlT2ZzcQB+AAy6hGDMdAAGZXF1YWxzc3EAfgAMk5TJ2HQADGFzSW5zdGFuY2VPZnNxAH4ADKv2RF50AAxzeW5jaHJvbml6ZWRzcQB+AAyFRr6udAANJGlzSW5zdGFuY2VPZnNxAH4ADEF4Gux0AA5Db25maWdQcm92aWRlcnNxAH4ADDSbBC10AAZjb25maWdzcQB+AAx4KxvSdAAJbm90aWZ5QWxsc3EAfgAM781rx3QADGlzSW5zdGFuY2VPZnNxAH4ADNIeaVZ0AAhzaHV0ZG93bnNxAH4ADBBVDVt0AAI9PXNxAH4ADNjsHIZ0AAVjbG9uZXNxAH4ADD8iBVB0AAZ0cmFjZXJzcQB+AAy4qf02dAAIdG9TdHJpbmdzcQB+AAyss9mydAAHbWV0cmljc3NxAH4ADOzKaHp0AAIhPXNxAH4ADI/QjkJ0AAhnZXRDbGFzc3NxAH4ADF3+kI10AAVzdGFydHNxAH4ADOiUw1N0AAJuZXNxAH4ADJfnXvJ0AAVLYW1vbnNxAH4ADOVPA8V0AAJlcXNxAH4ADBMpymh0AAlFeHRlbnNpb25zcQB+AAy187JVdAACIyNzcQB+AAyW+3+CdAAIZmluYWxpemVzcQB+AAxHtTVxdAAIaGFzaENvZGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAACc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgBNeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHAAdAALa2Ftb24uS2Ftb251cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAZNb2R1bGV1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AGVzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4ATUwACWluaGVyaXRlZHEAfgBNTAAHcGFyZW50c3EAfgBNeHEAfgBqc3EAfgBldXEAfgBIAAAAAHNxAH4AZXVxAH4ASAAAAABzcQB+AGV1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAAnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AGl0AAZPYmplY3RzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AGlzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABGphdmFzcQB+AIJ0AARsYW5nc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AINzcQB+AHZ0AANBbnlzcQB+AHpzcQB+AH11cQB+AIAAAAACc3EAfgCCdAAFc2NhbGFxAH4AiXNxAH4ASnEAfgBXdXEAfgBYAAAAAHNxAH4AWgF0ABRrYW1vbi5Db25maWdQcm92aWRlcnVxAH4AXQAAAAB+cQB+AF90AAVUcmFpdHVxAH4AYwAAAABzcQB+AGVxAH4Aa3NxAH4AZXNxAH4AbXNxAH4AZXVxAH4ASAAAAABzcQB+AGV1cQB+AEgAAAAAc3EAfgBldXEAfgB0AAAAAnNxAH4AdnEAfgB5c3EAfgB6c3EAfgB9dXEAfgCAAAAAA3NxAH4AgnEAfgCFc3EAfgCCcQB+AIdxAH4AiXNxAH4AdnEAfgCLc3EAfgB6c3EAfgB9dXEAfgCAAAAAAnNxAH4AgnEAfgCQcQB+AIl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAXNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV5haB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AA1MAA9zb3VyY2VEaXJlY3RvcnlxAH4ADXhwdAA9L2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFB26I418dwQsLto2vA1XUqRbHgaz
kamon.Kamon$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwRxr83wAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAbc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hw9CK5tXQABm5vdGlmeXNxAH4ADHZE5Nd0AAR3YWl0c3EAfgAMzcoGOnQADSRhc0luc3RhbmNlT2ZzcQB+AAy6hGDMdAAGZXF1YWxzc3EAfgAMk5TJ2HQADGFzSW5zdGFuY2VPZnNxAH4ADKv2RF50AAxzeW5jaHJvbml6ZWRzcQB+AAyFRr6udAANJGlzSW5zdGFuY2VPZnNxAH4ADEF4Gux0AA5Db25maWdQcm92aWRlcnNxAH4ADDSbBC10AAZjb25maWdzcQB+AAx4KxvSdAAJbm90aWZ5QWxsc3EAfgAM781rx3QADGlzSW5zdGFuY2VPZnNxAH4ADNIeaVZ0AAhzaHV0ZG93bnNxAH4ADBBVDVt0AAI9PXNxAH4ADNjsHIZ0AAVjbG9uZXNxAH4ADD8iBVB0AAZ0cmFjZXJzcQB+AAy4qf02dAAIdG9TdHJpbmdzcQB+AAyss9mydAAHbWV0cmljc3NxAH4ADOzKaHp0AAIhPXNxAH4ADI/QjkJ0AAhnZXRDbGFzc3NxAH4ADF3+kI10AAVzdGFydHNxAH4ADOiUw1N0AAJuZXNxAH4ADJfnXvJ0AAVLYW1vbnNxAH4ADOVPA8V0AAJlcXNxAH4ADBMpymh0AAlFeHRlbnNpb25zcQB+AAy187JVdAACIyNzcQB+AAyW+3+CdAAIZmluYWxpemVzcQB+AAxHtTVxdAAIaGFzaENvZGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAACc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgBNeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHAAdAALa2Ftb24uS2Ftb251cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAZNb2R1bGV1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AGVzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4ATUwACWluaGVyaXRlZHEAfgBNTAAHcGFyZW50c3EAfgBNeHEAfgBqc3EAfgBldXEAfgBIAAAAAHNxAH4AZXVxAH4ASAAAAABzcQB+AGV1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAAnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AGl0AAZPYmplY3RzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AGlzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABGphdmFzcQB+AIJ0AARsYW5nc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AINzcQB+AHZ0AANBbnlzcQB+AHpzcQB+AH11cQB+AIAAAAACc3EAfgCCdAAFc2NhbGFxAH4AiXNxAH4ASnEAfgBXdXEAfgBYAAAAAHNxAH4AWgF0ABRrYW1vbi5Db25maWdQcm92aWRlcnVxAH4AXQAAAAB+cQB+AF90AAVUcmFpdHVxAH4AYwAAAABzcQB+AGVxAH4Aa3NxAH4AZXNxAH4AbXNxAH4AZXVxAH4ASAAAAABzcQB+AGV1cQB+AEgAAAAAc3EAfgBldXEAfgB0AAAAAnNxAH4AdnEAfgB5c3EAfgB6c3EAfgB9dXEAfgCAAAAAA3NxAH4AgnEAfgCFc3EAfgCCcQB+AIdxAH4AiXNxAH4AdnEAfgCLc3EAfgB6c3EAfgB9dXEAfgCAAAAAAnNxAH4AgnEAfgCQcQB+AIl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAXNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV5haB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AA1MAA9zb3VyY2VEaXJlY3RvcnlxAH4ADXhwdAA9L2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFB26I418dwQsLto2vA1XUqRbHgaz
kamon.metric.Entity -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwpECvSQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAlc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hw/RKbDHQABm5vdGlmeXNxAH4ADMGz/fx0AAd1bmFwcGx5c3EAfgAMu9trB3QABG5hbWVzcQB+AAwszq/TdAAEd2FpdHNxAH4ADI0veHd0AA5jb3B5JGRlZmF1bHQkMnNxAH4ADA3fwIJ0AA0kYXNJbnN0YW5jZU9mc3EAfgAM0IOzonQADHByb2R1Y3RBcml0eXNxAH4ADEla1Up0AAZlcXVhbHNzcQB+AAzkeIycdAAEdGFnc3NxAH4ADJ9GbNV0AAxhc0luc3RhbmNlT2ZzcQB+AAwrfmsvdAAMc3luY2hyb25pemVkc3EAfgAM9iasJXQABkVudGl0eXNxAH4ADCkpuEJ0AA0kaXNJbnN0YW5jZU9mc3EAfgAM4wK+MHQABmNyZWF0ZXNxAH4ADFQBV4d0AAhjYW5FcXVhbHNxAH4ADBL7kbJ0AA1wcm9kdWN0UHJlZml4c3EAfgAMlRIBpXQACW5vdGlmeUFsbHNxAH4ADHKbNFh0AAxpc0luc3RhbmNlT2ZzcQB+AAzlFj2KdAAGPGluaXQ+c3EAfgAMGGQIL3QABWFwcGx5c3EAfgAMUuqTiHQAAj09c3EAfgAMZPatoHQABWNsb25lc3EAfgAMdKLPHHQABiRpbml0JHNxAH4ADHemlKB0AA5jb3B5JGRlZmF1bHQkM3NxAH4ADFhhqD10AARjb3B5c3EAfgAMS+J6enQACGNhdGVnb3J5c3EAfgAMRwWdz3QACHRvU3RyaW5nc3EAfgAMGThNtnQAAiE9c3EAfgAM9RG72nQACGdldENsYXNzc3EAfgAMMTjBHXQADmNvcHkkZGVmYXVsdCQxc3EAfgAMLOYpbnQAAm5lc3EAfgAMIE4pf3QAAmVxc3EAfgAMoFfsXXQAD3Byb2R1Y3RJdGVyYXRvcnNxAH4ADLkdXeF0AAIjI3NxAH4ADJcUYgV0AAhmaW5hbGl6ZXNxAH4ADLhKTB10AA5wcm9kdWN0RWxlbWVudHNxAH4ADOO/DLt0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAJzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AGF4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAB0ABNrYW1vbi5tZXRyaWMuRW50aXR5dXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AHlzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AYUwACWluaGVyaXRlZHEAfgBhTAAHcGFyZW50c3EAfgBheHEAfgB+c3EAfgB5dXEAfgBcAAAAAHNxAH4AeXVxAH4AXAAAAABzcQB+AHl1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAABnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AH10AAxTZXJpYWxpemFibGVzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AH1zcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAAJzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABXNjYWxhc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AJdzcQB+AIpxAH4AjXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZ0AARqYXZhc3EAfgCWdAACaW9xAH4Am3NxAH4AinQAB1Byb2R1Y3RxAH4AkHNxAH4AinQABkVxdWFsc3EAfgCQc3EAfgCKdAAGT2JqZWN0c3EAfgCOc3EAfgCRdXEAfgCUAAAAA3NxAH4AlnEAfgChc3EAfgCWdAAEbGFuZ3EAfgCbc3EAfgCKdAADQW55cQB+AJBzcQB+AF5xAH4Aa3VxAH4AbAAAAABzcQB+AG4AdAATa2Ftb24ubWV0cmljLkVudGl0eXVxAH4AcQAAAAB+cQB+AHN0AAZNb2R1bGV1cQB+AHcAAAAAc3EAfgB5cQB+AH9zcQB+AHlzcQB+AIFzcQB+AHl1cQB+AFwAAAAAc3EAfgB5dXEAfgBcAAAAAHNxAH4AeXVxAH4AiAAAAARzcQB+AIpxAH4AjXNxAH4AjnNxAH4AkXVxAH4AlAAAAAJzcQB+AJZxAH4AmXEAfgCbc3EAfgCKcQB+AI1zcQB+AI5zcQB+AJF1cQB+AJQAAAADc3EAfgCWcQB+AKFzcQB+AJZ0AAJpb3EAfgCbc3EAfgCKcQB+AKlzcQB+AI5zcQB+AJF1cQB+AJQAAAADc3EAfgCWcQB+AKFzcQB+AJZxAH4Ar3EAfgCbc3EAfgCKcQB+ALFxAH4AxHVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQADGthbW9uLm1ldHJpY3NxAH4A2HQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUKp9Dfh1vrTdx5T7VA/UNo6NmCmI=
kamon.metric.Entity$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwpECvSQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAlc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hw/RKbDHQABm5vdGlmeXNxAH4ADMGz/fx0AAd1bmFwcGx5c3EAfgAMu9trB3QABG5hbWVzcQB+AAwszq/TdAAEd2FpdHNxAH4ADI0veHd0AA5jb3B5JGRlZmF1bHQkMnNxAH4ADA3fwIJ0AA0kYXNJbnN0YW5jZU9mc3EAfgAM0IOzonQADHByb2R1Y3RBcml0eXNxAH4ADEla1Up0AAZlcXVhbHNzcQB+AAzkeIycdAAEdGFnc3NxAH4ADJ9GbNV0AAxhc0luc3RhbmNlT2ZzcQB+AAwrfmsvdAAMc3luY2hyb25pemVkc3EAfgAM9iasJXQABkVudGl0eXNxAH4ADCkpuEJ0AA0kaXNJbnN0YW5jZU9mc3EAfgAM4wK+MHQABmNyZWF0ZXNxAH4ADFQBV4d0AAhjYW5FcXVhbHNxAH4ADBL7kbJ0AA1wcm9kdWN0UHJlZml4c3EAfgAMlRIBpXQACW5vdGlmeUFsbHNxAH4ADHKbNFh0AAxpc0luc3RhbmNlT2ZzcQB+AAzlFj2KdAAGPGluaXQ+c3EAfgAMGGQIL3QABWFwcGx5c3EAfgAMUuqTiHQAAj09c3EAfgAMZPatoHQABWNsb25lc3EAfgAMdKLPHHQABiRpbml0JHNxAH4ADHemlKB0AA5jb3B5JGRlZmF1bHQkM3NxAH4ADFhhqD10AARjb3B5c3EAfgAMS+J6enQACGNhdGVnb3J5c3EAfgAMRwWdz3QACHRvU3RyaW5nc3EAfgAMGThNtnQAAiE9c3EAfgAM9RG72nQACGdldENsYXNzc3EAfgAMMTjBHXQADmNvcHkkZGVmYXVsdCQxc3EAfgAMLOYpbnQAAm5lc3EAfgAMIE4pf3QAAmVxc3EAfgAMoFfsXXQAD3Byb2R1Y3RJdGVyYXRvcnNxAH4ADLkdXeF0AAIjI3NxAH4ADJcUYgV0AAhmaW5hbGl6ZXNxAH4ADLhKTB10AA5wcm9kdWN0RWxlbWVudHNxAH4ADOO/DLt0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAJzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AGF4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAB0ABNrYW1vbi5tZXRyaWMuRW50aXR5dXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AHlzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AYUwACWluaGVyaXRlZHEAfgBhTAAHcGFyZW50c3EAfgBheHEAfgB+c3EAfgB5dXEAfgBcAAAAAHNxAH4AeXVxAH4AXAAAAABzcQB+AHl1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAABnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AH10AAxTZXJpYWxpemFibGVzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AH1zcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAAJzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABXNjYWxhc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AJdzcQB+AIpxAH4AjXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZ0AARqYXZhc3EAfgCWdAACaW9xAH4Am3NxAH4AinQAB1Byb2R1Y3RxAH4AkHNxAH4AinQABkVxdWFsc3EAfgCQc3EAfgCKdAAGT2JqZWN0c3EAfgCOc3EAfgCRdXEAfgCUAAAAA3NxAH4AlnEAfgChc3EAfgCWdAAEbGFuZ3EAfgCbc3EAfgCKdAADQW55cQB+AJBzcQB+AF5xAH4Aa3VxAH4AbAAAAABzcQB+AG4AdAATa2Ftb24ubWV0cmljLkVudGl0eXVxAH4AcQAAAAB+cQB+AHN0AAZNb2R1bGV1cQB+AHcAAAAAc3EAfgB5cQB+AH9zcQB+AHlzcQB+AIFzcQB+AHl1cQB+AFwAAAAAc3EAfgB5dXEAfgBcAAAAAHNxAH4AeXVxAH4AiAAAAARzcQB+AIpxAH4AjXNxAH4AjnNxAH4AkXVxAH4AlAAAAAJzcQB+AJZxAH4AmXEAfgCbc3EAfgCKcQB+AI1zcQB+AI5zcQB+AJF1cQB+AJQAAAADc3EAfgCWcQB+AKFzcQB+AJZ0AAJpb3EAfgCbc3EAfgCKcQB+AKlzcQB+AI5zcQB+AJF1cQB+AJQAAAADc3EAfgCWcQB+AKFzcQB+AJZxAH4Ar3EAfgCbc3EAfgCKcQB+ALFxAH4AxHVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQADGthbW9uLm1ldHJpY3NxAH4A2HQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUKp9Dfh1vrTdx5T7VA/UNo6NmCmI=
kamon.metric.EntityRecorder -> 

kamon.metric.EntityRecorderFactory -> 

kamon.metric.EntitySnapshot -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwEp4/cQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAhc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwrccgeXQABm5vdGlmeXNxAH4ADOb5OtF0AApoaXN0b2dyYW1zc3EAfgAMTGKbr3QABmdhdWdlc3NxAH4ADDXiMl50AAR3YWl0c3EAfgAMNw9RyHQADSRhc0luc3RhbmNlT2ZzcQB+AAwD2yt3dAAGZXF1YWxzc3EAfgAMsjjKGnQACGNvdW50ZXJzc3EAfgAMQ2CaDXQADGFzSW5zdGFuY2VPZnNxAH4ADGSnGnR0AAxzeW5jaHJvbml6ZWRzcQB+AAyw3XPKdAAVRGVmYXVsdEVudGl0eVNuYXBzaG90c3EAfgAMQMkfSnQADSRpc0luc3RhbmNlT2ZzcQB+AAxzdcGGdAAJbm90aWZ5QWxsc3EAfgAMFElxanQACWhpc3RvZ3JhbXNxAH4ADPzShpF0AAxpc0luc3RhbmNlT2ZzcQB+AAxnxWz9dAANbWluTWF4Q291bnRlcnNxAH4ADOXCiJJ0AAY8aW5pdD5zcQB+AAzIl4cgdAAFbWVyZ2VzcQB+AAyEWZBtdAAORW50aXR5U25hcHNob3RzcQB+AAzaLkMfdAACPT1zcQB+AAwN32GvdAAFY2xvbmVzcQB+AAx4qKI/dAAGJGluaXQkc3EAfgAMt5wLlHQAB2NvdW50ZXJzcQB+AAzekwxCdAAIdG9TdHJpbmdzcQB+AAzUiQOHdAAFZ2F1Z2VzcQB+AAyHd/nmdAAHbWV0cmljc3NxAH4ADK0nhsp0AAIhPXNxAH4ADGBG7rd0AAhnZXRDbGFzc3NxAH4ADG0bfW10AAJuZXNxAH4ADNZ27Sh0AA5taW5NYXhDb3VudGVyc3NxAH4ADLNQITB0AAJlcXNxAH4ADCoDCvV0AAIjI3NxAH4ADAEM45Z0AAhmaW5hbGl6ZXNxAH4ADIKaprZ0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAJzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AFl4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ABtrYW1vbi5tZXRyaWMuRW50aXR5U25hcHNob3R1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4AcXNyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgBZTAAJaW5oZXJpdGVkcQB+AFlMAAdwYXJlbnRzcQB+AFl4cQB+AHZzcQB+AHF1cQB+AFQAAAAAc3EAfgBxdXEAfgBUAAAAAHNxAH4AcXVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4AdXQABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4AdXNyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4AjnQABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4Aj3NxAH4AgnQAA0FueXNxAH4AhnNxAH4AiXVxAH4AjAAAAAJzcQB+AI50AAVzY2FsYXEAfgCVc3EAfgBWcQB+AGN1cQB+AGQAAAAAc3EAfgBmAHQAImthbW9uLm1ldHJpYy5EZWZhdWx0RW50aXR5U25hcHNob3R1cQB+AGkAAAAAfnEAfgBrdAAIQ2xhc3NEZWZ1cQB+AG8AAAAAc3EAfgBxcQB+AHdzcQB+AHFzcQB+AHlzcQB+AHF1cQB+AFQAAAAAc3EAfgBxdXEAfgBUAAAAAHNxAH4AcXVxAH4AgAAAAANzcQB+AIJ0AA5FbnRpdHlTbmFwc2hvdHNxAH4AhnNxAH4AiXVxAH4AjAAAAANzcQB+AI50AAVrYW1vbnNxAH4AjnQABm1ldHJpY3EAfgCVc3EAfgCCcQB+AIVzcQB+AIZzcQB+AIl1cQB+AIwAAAADc3EAfgCOcQB+AJFzcQB+AI5xAH4Ak3EAfgCVc3EAfgCCcQB+AJdzcQB+AIZzcQB+AIl1cQB+AIwAAAACc3EAfgCOcQB+AJxxAH4AlXVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQADGthbW9uLm1ldHJpY3NxAH4AxHQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUTULd+/G3FnJs3xW3votnPmW8bcA=
kamon.metric.GenericEntityRecorder -> 

kamon.metric.MetricScaleDecorator$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhw9ccYPgAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAJzcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHAcMsF5dAAEc2VsZnNxAH4AC4nJxlp0AAdjb250ZXh0dXEAfgAJAAAAJXNxAH4AC4P8MER0AAZub3RpZnlzcQB+AAva4QwEdAAHUmVjZWl2ZXNxAH4AC1N/A5x0AAR3YWl0c3EAfgALLrL0e3QADSRhc0luc3RhbmNlT2ZzcQB+AAvsn1IsdAAGZXF1YWxzc3EAfgALE4jCdXQAFE1ldHJpY1NjYWxlRGVjb3JhdG9yc3EAfgALP8lyu3QADGFzSW5zdGFuY2VPZnNxAH4ACzHNHNd0AAxzeW5jaHJvbml6ZWRzcQB+AAuTVpWAdAANJGlzSW5zdGFuY2VPZnNxAH4AC0YXPPt0AAdyZWNlaXZlc3EAfgALc4YCbnQACnByZVJlc3RhcnRzcQB+AAvB4kXrdAANYXJvdW5kUmVjZWl2ZXNxAH4AC/rojKx0AAtwb3N0UmVzdGFydHNxAH4AC5/1tzZ0AAhwb3N0U3RvcHNxAH4AC3F43zl0AAlub3RpZnlBbGxzcQB+AAs7TrLbdAARYXJvdW5kUG9zdFJlc3RhcnRzcQB+AAv4i9addAAMaXNJbnN0YW5jZU9mc3EAfgAL13BSKXQAEGFyb3VuZFByZVJlc3RhcnRzcQB+AAsvY2CTdAAOYXJvdW5kUG9zdFN0b3BzcQB+AAt/fFqbdAAGPGluaXQ+c3EAfgALSY++6HQACHByZVN0YXJ0c3EAfgALBMPDTnQACXVuaGFuZGxlZHNxAH4ACxMXCVN0AAI9PXNxAH4AC5F4M+t0AAVjbG9uZXNxAH4AC27xt4Z0AAYkaW5pdCRzcQB+AAtQEoP2dAAGc2VuZGVyc3EAfgAL5PQAt3QACHRvU3RyaW5nc3EAfgALKF/AfHQAAiE9c3EAfgALCWtyeXQACGdldENsYXNzc3EAfgALis2LYHQABXByb3Bzc3EAfgALnZJCrnQAAm5lc3EAfgALb598sHQAEnN1cGVydmlzb3JTdHJhdGVneXNxAH4AC0PRLiV0AAJlcXNxAH4AC0TszqB0AAIjI3NxAH4AC0K2Jm90AAhmaW5hbGl6ZXNxAH4ACxrtBnx0AAhoYXNoQ29kZXNxAH4AC/0F+RV0AA5hcm91bmRQcmVTdGFydHNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAJzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AGV4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgAMeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAB0ACFrYW1vbi5tZXRyaWMuTWV0cmljU2NhbGVEZWNvcmF0b3J1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAhDbGFzc0RlZnVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4AfXNyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgBlTAAJaW5oZXJpdGVkcQB+AGVMAAdwYXJlbnRzcQB+AGV4cQB+AIJzcQB+AH11cQB+AGAAAAAAc3EAfgB9dXEAfgBgAAAAAHNxAH4AfXVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAADc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgAMTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4AgXQABUFjdG9yc3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgCBc3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAADc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADHhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AARha2thc3EAfgCadAAFYWN0b3JzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4Am3NxAH4AjnQABk9iamVjdHNxAH4AknNxAH4AlXVxAH4AmAAAAANzcQB+AJp0AARqYXZhc3EAfgCadAAEbGFuZ3EAfgChc3EAfgCOdAADQW55c3EAfgCSc3EAfgCVdXEAfgCYAAAAAnNxAH4AmnQABXNjYWxhcQB+AKFzcQB+AGJxAH4Ab3VxAH4AcAAAAABzcQB+AHIAdAAha2Ftb24ubWV0cmljLk1ldHJpY1NjYWxlRGVjb3JhdG9ydXEAfgB1AAAAAH5xAH4Ad3QABk1vZHVsZXVxAH4AewAAAABzcQB+AH1xAH4Ag3NxAH4AfXNxAH4AhXNxAH4AfXVxAH4AYAAAAABzcQB+AH11cQB+AGAAAAAAc3EAfgB9dXEAfgCMAAAAAnNxAH4AjnEAfgCjc3EAfgCSc3EAfgCVdXEAfgCYAAAAA3NxAH4AmnEAfgCoc3EAfgCacQB+AKpxAH4AoXNxAH4AjnEAfgCsc3EAfgCSc3EAfgCVdXEAfgCYAAAAAnNxAH4AmnEAfgCxcQB+AKF1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAnNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0AAxrYW1vbi5tZXRyaWNzcQB+ANB0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV5haB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AAxMAA9zb3VyY2VEaXJlY3RvcnlxAH4ADHhwdAA9L2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFF+932BxhEZbKupa0Zik7KxRrE0O
kamon.metric.MetricsModule -> 

kamon.metric.MetricsModuleImpl -> 

kamon.metric.MetricsSettings -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwnGzyVwAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAzc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwEk5KAXQABm5vdGlmeXNxAH4ADNpXpJx0AAd1bmFwcGx5c3EAfgAMZaFqq3QAD01ldHJpY3NTZXR0aW5nc3NxAH4ADAQ+NZx0ABdsb2FkSW5zdHJ1bWVudEZhY3Rvcmllc3NxAH4ADLCqzGt0AAR3YWl0c3EAfgAM+i16vXQABmFjY2VwdHNxAH4ADIOrq/J0AA5jb3B5JGRlZmF1bHQkMnNxAH4ADGtFJtl0AA0kYXNJbnN0YW5jZU9mc3EAfgAMF8FvXXQADmNvcHkkZGVmYXVsdCQ1c3EAfgAMyCYHNHQADHByb2R1Y3RBcml0eXNxAH4ADH0sl9x0AAZlcXVhbHNzcQB+AAwLgCq4dAAMYXNJbnN0YW5jZU9mc3EAfgAMpxiX2HQAImRlZmF1bHRDb2xsZWN0aW9uQ29udGV4dEJ1ZmZlclNpemVzcQB+AAxg8kfadAAMc3luY2hyb25pemVkc3EAfgAMLumL5HQADSRpc0luc3RhbmNlT2ZzcQB+AAwGLC/ndAAIY2FuRXF1YWxzcQB+AAwtAsQndAAYZGVmYXVsdEluc3RydW1lbnRGYWN0b3J5c3EAfgAM8idHR3QADmNvcHkkZGVmYXVsdCQ0c3EAfgAMdT94A3QADXByb2R1Y3RQcmVmaXhzcQB+AAy2TtF4dAAOcG9pbnRTY2hlZHVsZXJzcQB+AAz+0yNbdAAJbm90aWZ5QWxsc3EAfgAMjVqDIXQACGV4Y2x1ZGVzc3EAfgAMIl+fq3QADGlzSW5zdGFuY2VPZnNxAH4ADO8e8nh0ABZ0cmFja1VubWF0Y2hlZEVudGl0aWVzc3EAfgAMJAto5XQADEVudGl0eUZpbHRlcnNxAH4ADLRVF8N0AAY8aW5pdD5zcQB+AAyrGYDOdAAFYXBwbHlzcQB+AAyCk4gqdAACPT1zcQB+AAzvk3l9dAAFY2xvbmVzcQB+AAwoTAfxdAAOY29weSRkZWZhdWx0JDdzcQB+AAyJGujpdAAGJGluaXQkc3EAfgAMj849u3QAE2luc3RydW1lbnRGYWN0b3JpZXNzcQB+AAxC3z9sdAAOY29weSRkZWZhdWx0JDNzcQB+AAwNrfuadAAEY29weXNxAH4ADKUsH/B0AAh0b1N0cmluZ3NxAH4ADDvyKNN0AAIhPXNxAH4ADNVboS50AAx0aWNrSW50ZXJ2YWxzcQB+AAwIsYCpdAAQcmVmcmVzaFNjaGVkdWxlcnNxAH4ADDY/+CZ0AAhnZXRDbGFzc3NxAH4ADL+UWE10AA5jb3B5JGRlZmF1bHQkMXNxAH4ADNVq/ih0AA1lbnRpdHlGaWx0ZXJzc3EAfgAMxp9Po3QACGluY2x1ZGVzc3EAfgAMn0TmdXQAC2xvYWRGaWx0ZXJzc3EAfgAMHM6ppXQADmNvcHkkZGVmYXVsdCQ2c3EAfgAMXVTwMXQAAm5lc3EAfgAMoytQ/3QAAmVxc3EAfgAMX+mGunQAD3Byb2R1Y3RJdGVyYXRvcnNxAH4ADFSsFYV0AAIjI3NxAH4ADMbk7Qd0AAhmaW5hbGl6ZXNxAH4ADGuZ1zx0AA5wcm9kdWN0RWxlbWVudHNxAH4ADOaff+10AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAANzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AH14cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAB0ABxrYW1vbi5tZXRyaWMuTWV0cmljc1NldHRpbmdzdXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AJVzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AfUwACWluaGVyaXRlZHEAfgB9TAAHcGFyZW50c3EAfgB9eHEAfgCac3EAfgCVdXEAfgB4AAAAAHNxAH4AlXVxAH4AeAAAAABzcQB+AJV1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAABnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AJl0AAxTZXJpYWxpemFibGVzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AJlzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAAJzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABXNjYWxhc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+ALNzcQB+AKZxAH4AqXNxAH4AqnNxAH4ArXVxAH4AsAAAAANzcQB+ALJ0AARqYXZhc3EAfgCydAACaW9xAH4At3NxAH4ApnQAB1Byb2R1Y3RxAH4ArHNxAH4ApnQABkVxdWFsc3EAfgCsc3EAfgCmdAAGT2JqZWN0c3EAfgCqc3EAfgCtdXEAfgCwAAAAA3NxAH4AsnEAfgC9c3EAfgCydAAEbGFuZ3EAfgC3c3EAfgCmdAADQW55cQB+AKxzcQB+AHpxAH4Ah3VxAH4AiAAAAABzcQB+AIoAdAAZa2Ftb24ubWV0cmljLkVudGl0eUZpbHRlcnVxAH4AjQAAAABxAH4AkXVxAH4AkwAAAABzcQB+AJVxAH4Am3NxAH4AlXNxAH4AnXNxAH4AlXVxAH4AeAAAAABzcQB+AJV1cQB+AHgAAAAAc3EAfgCVdXEAfgCkAAAABnNxAH4ApnEAfgCpc3EAfgCqc3EAfgCtdXEAfgCwAAAAAnNxAH4AsnEAfgC1cQB+ALdzcQB+AKZxAH4AqXNxAH4AqnNxAH4ArXVxAH4AsAAAAANzcQB+ALJxAH4AvXNxAH4AsnQAAmlvcQB+ALdzcQB+AKZxAH4AwXEAfgDec3EAfgCmdAAGRXF1YWxzcQB+AN5zcQB+AKZxAH4AxXNxAH4AqnNxAH4ArXVxAH4AsAAAAANzcQB+ALJxAH4AvXNxAH4AsnEAfgDLcQB+ALdzcQB+AKZxAH4AzXEAfgDec3EAfgB6cQB+AId1cQB+AIgAAAAAc3EAfgCKAHQAHGthbW9uLm1ldHJpYy5NZXRyaWNzU2V0dGluZ3N1cQB+AI0AAAAAfnEAfgCPdAAGTW9kdWxldXEAfgCTAAAAAHNxAH4AlXEAfgCbc3EAfgCVc3EAfgCdc3EAfgCVdXEAfgB4AAAAAHNxAH4AlXVxAH4AeAAAAABzcQB+AJV1cQB+AKQAAAAEc3EAfgCmcQB+AKlzcQB+AKpzcQB+AK11cQB+ALAAAAACc3EAfgCycQB+ALVxAH4At3NxAH4ApnEAfgCpc3EAfgCqc3EAfgCtdXEAfgCwAAAAA3NxAH4AsnEAfgC9c3EAfgCydAACaW9xAH4At3NxAH4ApnEAfgDFc3EAfgCqc3EAfgCtdXEAfgCwAAAAA3NxAH4AsnEAfgC9c3EAfgCycQB+AMtxAH4At3NxAH4ApnEAfgDNcQB+AQV1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAnNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+ARl0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV5haB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AA1MAA9zb3VyY2VEaXJlY3RvcnlxAH4ADXhwdAA9L2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFJAxldQohsrLkQU1vu4x0sXUcWLA
kamon.metric.SubscriptionsDispatcher -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwdYhDYwAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAJzcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHDvFH0UdAAEc2VsZnNxAH4AC3xHrlh0AAdjb250ZXh0dXEAfgAJAAAATnNxAH4ACxyArRh0AAZub3RpZnlzcQB+AAsMW+b6dAAHdW5hcHBseXNxAH4AC+iyTxZ0AAtwZXJtYW5lbnRseXNxAH4AC0OIoad0AAdjdXJyaWVkc3EAfgALnA38THQAB1JlY2VpdmVzcQB+AAuxumIXdAALVW5zdWJzY3JpYmVzcQB+AAt9GTvhdAASZGlzcGF0Y2hTZWxlY3Rpb25zc3EAfgALaSbLNXQAFG9uZVNob3RTdWJzY3JpcHRpb25zc3EAfgALgHHMtnQABHdhaXRzcQB+AAuTtt1bdAAGYWNjZXB0c3EAfgAL7Mb2g3QAElN1YnNjcmlwdGlvbkZpbHRlcnNxAH4AC2vIXxh0AA5jb3B5JGRlZmF1bHQkMnNxAH4AC6xQaXV0AA0kYXNJbnN0YW5jZU9mc3EAfgALMoQOKnQAB2NvbXBvc2VzcQB+AAv6BGaydAAMcHJvZHVjdEFyaXR5c3EAfgALIajL7XQAEWNvbGxlY3Rpb25Db250ZXh0c3EAfgAL83PwQ3QABmVxdWFsc3NxAH4AC4oWJAZ0AApzdWJzY3JpYmVyc3EAfgALldR/33QADGFzSW5zdGFuY2VPZnNxAH4ACxPeV2R0AAhkaXNwYXRjaHNxAH4AC+DnigR0AAxzeW5jaHJvbml6ZWRzcQB+AAvpqP07dAANJGlzSW5zdGFuY2VPZnNxAH4ACy7njf90AAdhbmRUaGVuc3EAfgALa6xDe3QAD2FwcGx5JGRlZmF1bHQkM3NxAH4AC6tHlN50AAdyZWNlaXZlc3EAfgALtTy+tnQACnByZVJlc3RhcnRzcQB+AAtG0fxldAAJc3Vic2NyaWJlc3EAfgALhlHI2nQABnR1cGxlZHNxAH4AC8jan5p0AA1hcm91bmRSZWNlaXZlc3EAfgALzGDQsXQACGNhbkVxdWFsc3EAfgALn37imHQAC3Bvc3RSZXN0YXJ0c3EAfgALtP+moHQAC3Byb2Nlc3NUaWNrc3EAfgALqKpqPHQACHBvc3RTdG9wc3EAfgALqHunZnQADHRpY2tTY2hlZHVsZXNxAH4ACyYu1Kx0AA1wcm9kdWN0UHJlZml4c3EAfgALW3yyAnQACW5vdGlmeUFsbHNxAH4ACyL6fLR0AAJ0b3NxAH4AC+Fzqhx0ABFhcm91bmRQb3N0UmVzdGFydHNxAH4AC0NGweN0AAxpc0luc3RhbmNlT2ZzcQB+AAtCkbMKdAAQYXJvdW5kUHJlUmVzdGFydHNxAH4ACw8+jZ10AAZmaWx0ZXJzcQB+AAt9owx4dAAOYXJvdW5kUG9zdFN0b3BzcQB+AAtc/mHkdAAQPGluaXQ+JGRlZmF1bHQkM3NxAH4ACxxr1dB0AAY8aW5pdD5zcQB+AAtqKLNDdAAIcHJlU3RhcnRzcQB+AAvkLLI0dAAJdW5oYW5kbGVkc3EAfgAL32PvPHQABWFwcGx5c3EAfgALBMPcO3QACGxhc3RUaWNrc3EAfgALK9kNZ3QABUVtcHR5c3EAfgALdUItvHQAAj09c3EAfgALP+AEVHQABWNsb25lc3EAfgALSc87cHQAC3Vuc3Vic2NyaWJlc3EAfgALLvIP9HQABFRpY2tzcQB+AAsVuJemdAAEZnJvbXNxAH4AC98LDIB0AAYkaW5pdCRzcQB+AAu7ko9EdAAHY29tYmluZXNxAH4AC2vvKs10AA5jb3B5JGRlZmF1bHQkM3NxAH4AC4Kjufd0AARjb3B5c3EAfgALSeO1o3QACVN1YnNjcmliZXNxAH4AC8hertN0AAZzZW5kZXJzcQB+AAuQqsVrdAAIdG9TdHJpbmdzcQB+AAtC3A0odAAHbWV0cmljc3NxAH4AC64O9pd0AAIhPXNxAH4AC/etEbF0AAhnZXRDbGFzc3NxAH4AC8Tz56h0ABdTdWJzY3JpcHRpb25zRGlzcGF0Y2hlcnNxAH4AC+qPKuR0AA5jb3B5JGRlZmF1bHQkMXNxAH4AC9jWJRt0ABJUaWNrTWV0cmljU25hcHNob3RzcQB+AAtiJYphdAAFcHJvcHNzcQB+AAswxO5HdAAWcGVybWFuZW50U3Vic2NyaXB0aW9uc3NxAH4AC8NRTKd0AAJuZXNxAH4ACwEpkyt0ABJzdXBlcnZpc29yU3RyYXRlZ3lzcQB+AAtuv0w5dAACZXFzcQB+AAutpwMXdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgALROFICXQAAiMjc3EAfgAL/vkU7HQACGZpbmFsaXplc3EAfgALclN7XnQADnByb2R1Y3RFbGVtZW50c3EAfgAL+v9cTHQACGhhc2hDb2Rlc3EAfgALGiOpbXQADmFyb3VuZFByZVN0YXJ0c3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAABHNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4At3hyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABF4c2J0aS5hcGkuUHJpdmF0ZVOpYIEm6dU+AgAAeHIAE3hzYnRpLmFwaS5RdWFsaWZpZWSqtF3vVLFtGAIAAUwACXF1YWxpZmllcnQAFUx4c2J0aS9hcGkvUXVhbGlmaWVyO3hyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHNyABV4c2J0aS5hcGkuSWRRdWFsaWZpZXK3hxD0PbJttQIAAUwABXZhbHVlcQB+AAx4cgATeHNidGkuYXBpLlF1YWxpZmllcrN4lKnr1lsnAgAAeHB0AAVrYW1vbnVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHAAdAAka2Ftb24ubWV0cmljLlN1YnNjcmlwdGlvbnNEaXNwYXRjaGVydXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+ANVzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4At0wACWluaGVyaXRlZHEAfgC3TAAHcGFyZW50c3EAfgC3eHEAfgDac3EAfgDVdXEAfgCyAAAAAHNxAH4A1XVxAH4AsgAAAABzcQB+ANV1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAA3NyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADEwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+ANl0AAVBY3RvcnNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4A2XNyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AAx4cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEYWtrYXNxAH4A8nQABWFjdG9yc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+APNzcQB+AOZ0AAZPYmplY3RzcQB+AOpzcQB+AO11cQB+APAAAAADc3EAfgDydAAEamF2YXNxAH4A8nQABGxhbmdxAH4A+XNxAH4A5nQAA0FueXNxAH4A6nNxAH4A7XVxAH4A8AAAAAJzcQB+APJ0AAVzY2FsYXEAfgD5c3EAfgC0c3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhxAH4AwnVxAH4AyAAAAABzcQB+AMoAdAAka2Ftb24ubWV0cmljLlN1YnNjcmlwdGlvbnNEaXNwYXRjaGVydXEAfgDNAAAAAH5xAH4Az3QABk1vZHVsZXVxAH4A0wAAAABzcQB+ANVxAH4A23NxAH4A1XNxAH4A3XNxAH4A1XVxAH4AsgAAAABzcQB+ANV1cQB+ALIAAAAAc3EAfgDVdXEAfgDkAAAAAnNxAH4A5nEAfgD7c3EAfgDqc3EAfgDtdXEAfgDwAAAAA3NxAH4A8nEAfgEAc3EAfgDycQB+AQJxAH4A+XNxAH4A5nEAfgEEc3EAfgDqc3EAfgDtdXEAfgDwAAAAAnNxAH4A8nEAfgEJcQB+APlzcQB+ALRxAH4BDHVxAH4AyAAAAABzcQB+AMoBdAAfa2Ftb24ubWV0cmljLlN1YnNjcmlwdGlvbkZpbHRlcnVxAH4AzQAAAAB+cQB+AM90AAVUcmFpdHVxAH4A0wAAAABzcQB+ANVxAH4A23NxAH4A1XNxAH4A3XNxAH4A1XVxAH4AsgAAAABzcQB+ANV1cQB+ALIAAAAAc3EAfgDVdXEAfgDkAAAAAnNxAH4A5nEAfgD7c3EAfgDqc3EAfgDtdXEAfgDwAAAAA3NxAH4A8nEAfgEAc3EAfgDycQB+AQJxAH4A+XNxAH4A5nEAfgEEc3EAfgDqc3EAfgDtdXEAfgDwAAAAAnNxAH4A8nEAfgEJcQB+APlzcQB+ALRxAH4BDHVxAH4AyAAAAABzcQB+AMoAdAAfa2Ftb24ubWV0cmljLlN1YnNjcmlwdGlvbkZpbHRlcnVxAH4AzQAAAABxAH4BEXVxAH4A0wAAAABzcQB+ANVxAH4A23NxAH4A1XNxAH4A3XNxAH4A1XVxAH4AsgAAAABzcQB+ANV1cQB+ALIAAAAAc3EAfgDVdXEAfgDkAAAAAnNxAH4A5nEAfgD7c3EAfgDqc3EAfgDtdXEAfgDwAAAAA3NxAH4A8nEAfgEAc3EAfgDycQB+AQJxAH4A+XNxAH4A5nEAfgEEc3EAfgDqc3EAfgDtdXEAfgDwAAAAAnNxAH4A8nEAfgEJcQB+APl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAnNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0AAxrYW1vbi5tZXRyaWNzcQB+AWB0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV5haB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AAxMAA9zb3VyY2VEaXJlY3RvcnlxAH4ADHhwdAA9L2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFO/f5Iz+EzL9qqOUVzXm74viasZV
kamon.metric.SubscriptionsDispatcher$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwdYhDYwAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAJzcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHDvFH0UdAAEc2VsZnNxAH4AC3xHrlh0AAdjb250ZXh0dXEAfgAJAAAATnNxAH4ACxyArRh0AAZub3RpZnlzcQB+AAsMW+b6dAAHdW5hcHBseXNxAH4AC+iyTxZ0AAtwZXJtYW5lbnRseXNxAH4AC0OIoad0AAdjdXJyaWVkc3EAfgALnA38THQAB1JlY2VpdmVzcQB+AAuxumIXdAALVW5zdWJzY3JpYmVzcQB+AAt9GTvhdAASZGlzcGF0Y2hTZWxlY3Rpb25zc3EAfgALaSbLNXQAFG9uZVNob3RTdWJzY3JpcHRpb25zc3EAfgALgHHMtnQABHdhaXRzcQB+AAuTtt1bdAAGYWNjZXB0c3EAfgAL7Mb2g3QAElN1YnNjcmlwdGlvbkZpbHRlcnNxAH4AC2vIXxh0AA5jb3B5JGRlZmF1bHQkMnNxAH4AC6xQaXV0AA0kYXNJbnN0YW5jZU9mc3EAfgALMoQOKnQAB2NvbXBvc2VzcQB+AAv6BGaydAAMcHJvZHVjdEFyaXR5c3EAfgALIajL7XQAEWNvbGxlY3Rpb25Db250ZXh0c3EAfgAL83PwQ3QABmVxdWFsc3NxAH4AC4oWJAZ0AApzdWJzY3JpYmVyc3EAfgALldR/33QADGFzSW5zdGFuY2VPZnNxAH4ACxPeV2R0AAhkaXNwYXRjaHNxAH4AC+DnigR0AAxzeW5jaHJvbml6ZWRzcQB+AAvpqP07dAANJGlzSW5zdGFuY2VPZnNxAH4ACy7njf90AAdhbmRUaGVuc3EAfgALa6xDe3QAD2FwcGx5JGRlZmF1bHQkM3NxAH4AC6tHlN50AAdyZWNlaXZlc3EAfgALtTy+tnQACnByZVJlc3RhcnRzcQB+AAtG0fxldAAJc3Vic2NyaWJlc3EAfgALhlHI2nQABnR1cGxlZHNxAH4AC8jan5p0AA1hcm91bmRSZWNlaXZlc3EAfgALzGDQsXQACGNhbkVxdWFsc3EAfgALn37imHQAC3Bvc3RSZXN0YXJ0c3EAfgALtP+moHQAC3Byb2Nlc3NUaWNrc3EAfgALqKpqPHQACHBvc3RTdG9wc3EAfgALqHunZnQADHRpY2tTY2hlZHVsZXNxAH4ACyYu1Kx0AA1wcm9kdWN0UHJlZml4c3EAfgALW3yyAnQACW5vdGlmeUFsbHNxAH4ACyL6fLR0AAJ0b3NxAH4AC+Fzqhx0ABFhcm91bmRQb3N0UmVzdGFydHNxAH4AC0NGweN0AAxpc0luc3RhbmNlT2ZzcQB+AAtCkbMKdAAQYXJvdW5kUHJlUmVzdGFydHNxAH4ACw8+jZ10AAZmaWx0ZXJzcQB+AAt9owx4dAAOYXJvdW5kUG9zdFN0b3BzcQB+AAtc/mHkdAAQPGluaXQ+JGRlZmF1bHQkM3NxAH4ACxxr1dB0AAY8aW5pdD5zcQB+AAtqKLNDdAAIcHJlU3RhcnRzcQB+AAvkLLI0dAAJdW5oYW5kbGVkc3EAfgAL32PvPHQABWFwcGx5c3EAfgALBMPcO3QACGxhc3RUaWNrc3EAfgALK9kNZ3QABUVtcHR5c3EAfgALdUItvHQAAj09c3EAfgALP+AEVHQABWNsb25lc3EAfgALSc87cHQAC3Vuc3Vic2NyaWJlc3EAfgALLvIP9HQABFRpY2tzcQB+AAsVuJemdAAEZnJvbXNxAH4AC98LDIB0AAYkaW5pdCRzcQB+AAu7ko9EdAAHY29tYmluZXNxAH4AC2vvKs10AA5jb3B5JGRlZmF1bHQkM3NxAH4AC4Kjufd0AARjb3B5c3EAfgALSeO1o3QACVN1YnNjcmliZXNxAH4AC8hertN0AAZzZW5kZXJzcQB+AAuQqsVrdAAIdG9TdHJpbmdzcQB+AAtC3A0odAAHbWV0cmljc3NxAH4AC64O9pd0AAIhPXNxAH4AC/etEbF0AAhnZXRDbGFzc3NxAH4AC8Tz56h0ABdTdWJzY3JpcHRpb25zRGlzcGF0Y2hlcnNxAH4AC+qPKuR0AA5jb3B5JGRlZmF1bHQkMXNxAH4AC9jWJRt0ABJUaWNrTWV0cmljU25hcHNob3RzcQB+AAtiJYphdAAFcHJvcHNzcQB+AAswxO5HdAAWcGVybWFuZW50U3Vic2NyaXB0aW9uc3NxAH4AC8NRTKd0AAJuZXNxAH4ACwEpkyt0ABJzdXBlcnZpc29yU3RyYXRlZ3lzcQB+AAtuv0w5dAACZXFzcQB+AAutpwMXdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgALROFICXQAAiMjc3EAfgAL/vkU7HQACGZpbmFsaXplc3EAfgALclN7XnQADnByb2R1Y3RFbGVtZW50c3EAfgAL+v9cTHQACGhhc2hDb2Rlc3EAfgALGiOpbXQADmFyb3VuZFByZVN0YXJ0c3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAABHNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4At3hyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABF4c2J0aS5hcGkuUHJpdmF0ZVOpYIEm6dU+AgAAeHIAE3hzYnRpLmFwaS5RdWFsaWZpZWSqtF3vVLFtGAIAAUwACXF1YWxpZmllcnQAFUx4c2J0aS9hcGkvUXVhbGlmaWVyO3hyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHNyABV4c2J0aS5hcGkuSWRRdWFsaWZpZXK3hxD0PbJttQIAAUwABXZhbHVlcQB+AAx4cgATeHNidGkuYXBpLlF1YWxpZmllcrN4lKnr1lsnAgAAeHB0AAVrYW1vbnVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHAAdAAka2Ftb24ubWV0cmljLlN1YnNjcmlwdGlvbnNEaXNwYXRjaGVydXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+ANVzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4At0wACWluaGVyaXRlZHEAfgC3TAAHcGFyZW50c3EAfgC3eHEAfgDac3EAfgDVdXEAfgCyAAAAAHNxAH4A1XVxAH4AsgAAAABzcQB+ANV1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAA3NyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADEwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+ANl0AAVBY3RvcnNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4A2XNyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AAx4cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEYWtrYXNxAH4A8nQABWFjdG9yc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+APNzcQB+AOZ0AAZPYmplY3RzcQB+AOpzcQB+AO11cQB+APAAAAADc3EAfgDydAAEamF2YXNxAH4A8nQABGxhbmdxAH4A+XNxAH4A5nQAA0FueXNxAH4A6nNxAH4A7XVxAH4A8AAAAAJzcQB+APJ0AAVzY2FsYXEAfgD5c3EAfgC0c3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhxAH4AwnVxAH4AyAAAAABzcQB+AMoAdAAka2Ftb24ubWV0cmljLlN1YnNjcmlwdGlvbnNEaXNwYXRjaGVydXEAfgDNAAAAAH5xAH4Az3QABk1vZHVsZXVxAH4A0wAAAABzcQB+ANVxAH4A23NxAH4A1XNxAH4A3XNxAH4A1XVxAH4AsgAAAABzcQB+ANV1cQB+ALIAAAAAc3EAfgDVdXEAfgDkAAAAAnNxAH4A5nEAfgD7c3EAfgDqc3EAfgDtdXEAfgDwAAAAA3NxAH4A8nEAfgEAc3EAfgDycQB+AQJxAH4A+XNxAH4A5nEAfgEEc3EAfgDqc3EAfgDtdXEAfgDwAAAAAnNxAH4A8nEAfgEJcQB+APlzcQB+ALRxAH4BDHVxAH4AyAAAAABzcQB+AMoBdAAfa2Ftb24ubWV0cmljLlN1YnNjcmlwdGlvbkZpbHRlcnVxAH4AzQAAAAB+cQB+AM90AAVUcmFpdHVxAH4A0wAAAABzcQB+ANVxAH4A23NxAH4A1XNxAH4A3XNxAH4A1XVxAH4AsgAAAABzcQB+ANV1cQB+ALIAAAAAc3EAfgDVdXEAfgDkAAAAAnNxAH4A5nEAfgD7c3EAfgDqc3EAfgDtdXEAfgDwAAAAA3NxAH4A8nEAfgEAc3EAfgDycQB+AQJxAH4A+XNxAH4A5nEAfgEEc3EAfgDqc3EAfgDtdXEAfgDwAAAAAnNxAH4A8nEAfgEJcQB+APlzcQB+ALRxAH4BDHVxAH4AyAAAAABzcQB+AMoAdAAfa2Ftb24ubWV0cmljLlN1YnNjcmlwdGlvbkZpbHRlcnVxAH4AzQAAAABxAH4BEXVxAH4A0wAAAABzcQB+ANVxAH4A23NxAH4A1XNxAH4A3XNxAH4A1XVxAH4AsgAAAABzcQB+ANV1cQB+ALIAAAAAc3EAfgDVdXEAfgDkAAAAAnNxAH4A5nEAfgD7c3EAfgDqc3EAfgDtdXEAfgDwAAAAA3NxAH4A8nEAfgEAc3EAfgDycQB+AQJxAH4A+XNxAH4A5nEAfgEEc3EAfgDqc3EAfgDtdXEAfgDwAAAAAnNxAH4A8nEAfgEJcQB+APl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAnNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0AAxrYW1vbi5tZXRyaWNzcQB+AWB0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV5haB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AAxMAA9zb3VyY2VEaXJlY3RvcnlxAH4ADHhwdAA9L2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFO/f5Iz+EzL9qqOUVzXm74viasZV
kamon.metric.TickMetricSnapshotBuffer$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwOovUlQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAJzcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHAtFB6fdAAEc2VsZnNxAH4AC6jN1rx0AAdjb250ZXh0dXEAfgAJAAAAL3NxAH4ACwarOIN0AAZub3RpZnlzcQB+AAuj33e8dAAHUmVjZWl2ZXNxAH4AC47blIB0AAR3YWl0c3EAfgALkK75enQADSRhc0luc3RhbmNlT2ZzcQB+AAtEwhg7dAAFZW1wdHlzcQB+AAuBLo/JdAANZmx1c2hTY2hlZHVsZXNxAH4AC8KacmB0AAxwcm9kdWN0QXJpdHlzcQB+AAtDLRQzdAARY29sbGVjdGlvbkNvbnRleHRzcQB+AAtAp/SLdAAGZXF1YWxzc3EAfgALp33NGXQADGFzSW5zdGFuY2VPZnNxAH4AC7B9Pul0AAxzeW5jaHJvbml6ZWRzcQB+AAvEWHNAdAANJGlzSW5zdGFuY2VPZnNxAH4AC2F8ww90AAdyZWNlaXZlc3EAfgALtN51bHQACnByZVJlc3RhcnRzcQB+AAs6YdbedAANYXJvdW5kUmVjZWl2ZXNxAH4AC1XPQjp0AAhjYW5FcXVhbHNxAH4ACxT1scl0AAtwb3N0UmVzdGFydHNxAH4AC6DhwKB0AAhwb3N0U3RvcHNxAH4AC3sVfkF0AA1wcm9kdWN0UHJlZml4c3EAfgALef02onQACW5vdGlmeUFsbHNxAH4AC0fVaS50ABFhcm91bmRQb3N0UmVzdGFydHNxAH4ACyf6ARF0AAxpc0luc3RhbmNlT2ZzcQB+AAv/0C0PdAAQYXJvdW5kUHJlUmVzdGFydHNxAH4AC004/XZ0AA5hcm91bmRQb3N0U3RvcHNxAH4AC4lLZl10AAY8aW5pdD5zcQB+AAtCntsqdAAIcHJlU3RhcnRzcQB+AAvIV4L9dAAJdW5oYW5kbGVkc3EAfgALO9Uom3QAAj09c3EAfgALOZwHvHQABWNsb25lc3EAfgALmWIH7nQAC0ZsdXNoQnVmZmVyc3EAfgALS9m4kXQABiRpbml0JHNxAH4ACwYwbj90AAZzZW5kZXJzcQB+AAtGtvIKdAAIdG9TdHJpbmdzcQB+AAsflF+SdAAYVGlja01ldHJpY1NuYXBzaG90QnVmZmVyc3EAfgAL9QelAXQAAiE9c3EAfgALlctVnnQACWJ1ZmZlcmluZ3NxAH4ACwbNtsF0AAhnZXRDbGFzc3NxAH4AC6Q9Tz10AAVwcm9wc3NxAH4AC9TKq3Z0AAJuZXNxAH4AC1s0Uix0ABJzdXBlcnZpc29yU3RyYXRlZ3lzcQB+AAvmb1BgdAACZXFzcQB+AAs1O8BLdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgALv6jzTHQAAiMjc3EAfgALW9BBznQACGZpbmFsaXplc3EAfgAL67qPTHQADnByb2R1Y3RFbGVtZW50c3EAfgALLDs2uHQACGhhc2hDb2Rlc3EAfgALOHAhwnQADmFyb3VuZFByZVN0YXJ0c3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAnNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4AeXhyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAHQAJWthbW9uLm1ldHJpYy5UaWNrTWV0cmljU25hcHNob3RCdWZmZXJ1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAhDbGFzc0RlZnVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4AkXNyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgB5TAAJaW5oZXJpdGVkcQB+AHlMAAdwYXJlbnRzcQB+AHl4cQB+AJZzcQB+AJF1cQB+AHQAAAAAc3EAfgCRdXEAfgB0AAAAAHNxAH4AkXVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAADc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgAMTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4AlXQABUFjdG9yc3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgCVc3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAADc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADHhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AARha2thc3EAfgCudAAFYWN0b3JzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4Ar3NxAH4AonQABk9iamVjdHNxAH4ApnNxAH4AqXVxAH4ArAAAAANzcQB+AK50AARqYXZhc3EAfgCudAAEbGFuZ3EAfgC1c3EAfgCidAADQW55c3EAfgCmc3EAfgCpdXEAfgCsAAAAAnNxAH4ArnQABXNjYWxhcQB+ALVzcQB+AHZxAH4Ag3VxAH4AhAAAAABzcQB+AIYAdAAla2Ftb24ubWV0cmljLlRpY2tNZXRyaWNTbmFwc2hvdEJ1ZmZlcnVxAH4AiQAAAAB+cQB+AIt0AAZNb2R1bGV1cQB+AI8AAAAAc3EAfgCRcQB+AJdzcQB+AJFzcQB+AJlzcQB+AJF1cQB+AHQAAAAAc3EAfgCRdXEAfgB0AAAAAHNxAH4AkXVxAH4AoAAAAAJzcQB+AKJxAH4At3NxAH4ApnNxAH4AqXVxAH4ArAAAAANzcQB+AK5xAH4AvHNxAH4ArnEAfgC+cQB+ALVzcQB+AKJxAH4AwHNxAH4ApnNxAH4AqXVxAH4ArAAAAAJzcQB+AK5xAH4AxXEAfgC1dXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAAJzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADHhwdAAMa2Ftb24ubWV0cmljc3EAfgDkdAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgAMTAAPc291cmNlRGlyZWN0b3J5cQB+AAx4cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABSXA+Z3U16jApT9QR+Qub5urp5kRQ==
kamon.metric.TraceMetrics -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwR2VSjgAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAlc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwGFwrA3QABm5vdGlmeXNxAH4ADAOkWxd0AAR3YWl0c3EAfgAMDIltaHQADSRhc0luc3RhbmNlT2ZzcQB+AAxf3r4rdAAPcmVtb3ZlSGlzdG9ncmFtc3EAfgAMVRjBJnQABmVxdWFsc3NxAH4ADMbqvwN0AAxhc0luc3RhbmNlT2ZzcQB+AAwpCpiDdAAMc3luY2hyb25pemVkc3EAfgAM9yxTRnQADSRpc0luc3RhbmNlT2ZzcQB+AAxdGOT8dAAMVHJhY2VNZXRyaWNzc3EAfgAMOLysKHQADlNlZ21lbnRNZXRyaWNzc3EAfgAMFLc6OHQAC3JlbW92ZUdhdWdlc3EAfgAMbJGYY3QABmVycm9yc3NxAH4ADMpOFAB0ABNyZW1vdmVNaW5NYXhDb3VudGVyc3EAfgAM14zFXnQADmNyZWF0ZVJlY29yZGVyc3EAfgAMCALATHQACW5vdGlmeUFsbHNxAH4ADFNqDol0AAloaXN0b2dyYW1zcQB+AAz5orKEdAAMaXNJbnN0YW5jZU9mc3EAfgAMPfPOeXQADW1pbk1heENvdW50ZXJzcQB+AAwkj5tIdAAHZmFjdG9yeXNxAH4ADG6hBxx0AAY8aW5pdD5zcQB+AAzrnPTFdAALZWxhcHNlZFRpbWVzcQB+AAwRyOgrdAAHY2xlYW51cHNxAH4ADPPWwwd0AAI9PXNxAH4ADBy2XYV0AAVjbG9uZXNxAH4ADPcTkW90AAhjYXRlZ29yeXNxAH4ADO1eBP50AAdjb3VudGVyc3EAfgAMhXU8lXQACHRvU3RyaW5nc3EAfgAMQoQwHXQABWdhdWdlc3EAfgAM5IyjT3QAAiE9c3EAfgAM6YVZhHQAB2NvbGxlY3RzcQB+AAx6zLeodAAIZ2V0Q2xhc3NzcQB+AAxtdnX4dAACbmVzcQB+AAyojcq8dAACZXFzcQB+AAyNXTrVdAACIyNzcQB+AAwx00mndAAIZmluYWxpemVzcQB+AAxqWiucdAAIaGFzaENvZGVzcQB+AAw9JC0PdAANcmVtb3ZlQ291bnRlcnNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAARzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AGF4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAB0ABlrYW1vbi5tZXRyaWMuVHJhY2VNZXRyaWNzdXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AHlzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AYUwACWluaGVyaXRlZHEAfgBhTAAHcGFyZW50c3EAfgBheHEAfgB+c3EAfgB5dXEAfgBcAAAAAHNxAH4AeXVxAH4AXAAAAABzcQB+AHl1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAABHNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AH10ABVHZW5lcmljRW50aXR5UmVjb3JkZXJzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AH1zcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABWthbW9uc3EAfgCWdAAGbWV0cmljc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AJdzcQB+AIp0AA5FbnRpdHlSZWNvcmRlcnEAfgCQc3EAfgCKdAAGT2JqZWN0c3EAfgCOc3EAfgCRdXEAfgCUAAAAA3NxAH4AlnQABGphdmFzcQB+AJZ0AARsYW5ncQB+AJ1zcQB+AIp0AANBbnlzcQB+AI5zcQB+AJF1cQB+AJQAAAACc3EAfgCWdAAFc2NhbGFxAH4AnXNxAH4AXnEAfgBrdXEAfgBsAAAAAHNxAH4AbgB0ABlrYW1vbi5tZXRyaWMuVHJhY2VNZXRyaWNzdXEAfgBxAAAAAH5xAH4Ac3QABk1vZHVsZXVxAH4AdwAAAABzcQB+AHlxAH4Af3NxAH4AeXNxAH4AgXNxAH4AeXVxAH4AXAAAAABzcQB+AHl1cQB+AFwAAAAAc3EAfgB5dXEAfgCIAAAAA3NyABd4c2J0aS5hcGkuUGFyYW1ldGVyaXplZBZs7mkDybt/AgACTAAIYmFzZVR5cGVxAH4Ai1sADXR5cGVBcmd1bWVudHN0ABFbTHhzYnRpL2FwaS9UeXBlO3hxAH4AfXNxAH4AinQAFUVudGl0eVJlY29yZGVyRmFjdG9yeXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZ0AAVrYW1vbnNxAH4AlnQABm1ldHJpY3EAfgCddXEAfgCIAAAAAXNxAH4AinQADFRyYWNlTWV0cmljc3EAfgDGc3EAfgCKcQB+AKFzcQB+AI5zcQB+AJF1cQB+AJQAAAADc3EAfgCWcQB+AKZzcQB+AJZxAH4AqHEAfgCdc3EAfgCKcQB+AKpzcQB+AI5zcQB+AJF1cQB+AJQAAAACc3EAfgCWcQB+AK9xAH4AnXNxAH4AXnEAfgBrdXEAfgBsAAAAAHNxAH4AbgB0ABtrYW1vbi5tZXRyaWMuU2VnbWVudE1ldHJpY3N1cQB+AHEAAAAAcQB+AHV1cQB+AHcAAAAAc3EAfgB5cQB+AH9zcQB+AHlzcQB+AIFzcQB+AHl1cQB+AFwAAAAAc3EAfgB5dXEAfgBcAAAAAHNxAH4AeXVxAH4AiAAAAARzcQB+AIp0ABVHZW5lcmljRW50aXR5UmVjb3JkZXJzcQB+AI5zcQB+AJF1cQB+AJQAAAADc3EAfgCWdAAFa2Ftb25zcQB+AJZ0AAZtZXRyaWNxAH4AnXNxAH4AinQADkVudGl0eVJlY29yZGVycQB+AOxzcQB+AIpxAH4AoXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZxAH4ApnNxAH4AlnEAfgCocQB+AJ1zcQB+AIpxAH4AqnNxAH4AjnNxAH4AkXVxAH4AlAAAAAJzcQB+AJZxAH4Ar3EAfgCdc3EAfgBecQB+AGt1cQB+AGwAAAAAc3EAfgBuAHQAG2thbW9uLm1ldHJpYy5TZWdtZW50TWV0cmljc3VxAH4AcQAAAABxAH4AtXVxAH4AdwAAAABzcQB+AHlxAH4Af3NxAH4AeXNxAH4AgXNxAH4AeXVxAH4AXAAAAABzcQB+AHl1cQB+AFwAAAAAc3EAfgB5dXEAfgCIAAAAA3NxAH4AwXNxAH4AinQAFUVudGl0eVJlY29yZGVyRmFjdG9yeXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZ0AAVrYW1vbnNxAH4AlnQABm1ldHJpY3EAfgCddXEAfgCIAAAAAXNxAH4AinQADlNlZ21lbnRNZXRyaWNzcQB+ARJzcQB+AIpxAH4AoXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZxAH4ApnNxAH4AlnEAfgCocQB+AJ1zcQB+AIpxAH4AqnNxAH4AjnNxAH4AkXVxAH4AlAAAAAJzcQB+AJZxAH4Ar3EAfgCddXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAAJzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADXhwdAAMa2Ftb24ubWV0cmljc3EAfgEpdAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABRn9fEnvFe7HIhvPduJUx2G3Dm5+w==
kamon.metric.TraceMetrics$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwR2VSjgAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAlc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwGFwrA3QABm5vdGlmeXNxAH4ADAOkWxd0AAR3YWl0c3EAfgAMDIltaHQADSRhc0luc3RhbmNlT2ZzcQB+AAxf3r4rdAAPcmVtb3ZlSGlzdG9ncmFtc3EAfgAMVRjBJnQABmVxdWFsc3NxAH4ADMbqvwN0AAxhc0luc3RhbmNlT2ZzcQB+AAwpCpiDdAAMc3luY2hyb25pemVkc3EAfgAM9yxTRnQADSRpc0luc3RhbmNlT2ZzcQB+AAxdGOT8dAAMVHJhY2VNZXRyaWNzc3EAfgAMOLysKHQADlNlZ21lbnRNZXRyaWNzc3EAfgAMFLc6OHQAC3JlbW92ZUdhdWdlc3EAfgAMbJGYY3QABmVycm9yc3NxAH4ADMpOFAB0ABNyZW1vdmVNaW5NYXhDb3VudGVyc3EAfgAM14zFXnQADmNyZWF0ZVJlY29yZGVyc3EAfgAMCALATHQACW5vdGlmeUFsbHNxAH4ADFNqDol0AAloaXN0b2dyYW1zcQB+AAz5orKEdAAMaXNJbnN0YW5jZU9mc3EAfgAMPfPOeXQADW1pbk1heENvdW50ZXJzcQB+AAwkj5tIdAAHZmFjdG9yeXNxAH4ADG6hBxx0AAY8aW5pdD5zcQB+AAzrnPTFdAALZWxhcHNlZFRpbWVzcQB+AAwRyOgrdAAHY2xlYW51cHNxAH4ADPPWwwd0AAI9PXNxAH4ADBy2XYV0AAVjbG9uZXNxAH4ADPcTkW90AAhjYXRlZ29yeXNxAH4ADO1eBP50AAdjb3VudGVyc3EAfgAMhXU8lXQACHRvU3RyaW5nc3EAfgAMQoQwHXQABWdhdWdlc3EAfgAM5IyjT3QAAiE9c3EAfgAM6YVZhHQAB2NvbGxlY3RzcQB+AAx6zLeodAAIZ2V0Q2xhc3NzcQB+AAxtdnX4dAACbmVzcQB+AAyojcq8dAACZXFzcQB+AAyNXTrVdAACIyNzcQB+AAwx00mndAAIZmluYWxpemVzcQB+AAxqWiucdAAIaGFzaENvZGVzcQB+AAw9JC0PdAANcmVtb3ZlQ291bnRlcnNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAARzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AGF4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAB0ABlrYW1vbi5tZXRyaWMuVHJhY2VNZXRyaWNzdXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AHlzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AYUwACWluaGVyaXRlZHEAfgBhTAAHcGFyZW50c3EAfgBheHEAfgB+c3EAfgB5dXEAfgBcAAAAAHNxAH4AeXVxAH4AXAAAAABzcQB+AHl1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAABHNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AH10ABVHZW5lcmljRW50aXR5UmVjb3JkZXJzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AH1zcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABWthbW9uc3EAfgCWdAAGbWV0cmljc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AJdzcQB+AIp0AA5FbnRpdHlSZWNvcmRlcnEAfgCQc3EAfgCKdAAGT2JqZWN0c3EAfgCOc3EAfgCRdXEAfgCUAAAAA3NxAH4AlnQABGphdmFzcQB+AJZ0AARsYW5ncQB+AJ1zcQB+AIp0AANBbnlzcQB+AI5zcQB+AJF1cQB+AJQAAAACc3EAfgCWdAAFc2NhbGFxAH4AnXNxAH4AXnEAfgBrdXEAfgBsAAAAAHNxAH4AbgB0ABlrYW1vbi5tZXRyaWMuVHJhY2VNZXRyaWNzdXEAfgBxAAAAAH5xAH4Ac3QABk1vZHVsZXVxAH4AdwAAAABzcQB+AHlxAH4Af3NxAH4AeXNxAH4AgXNxAH4AeXVxAH4AXAAAAABzcQB+AHl1cQB+AFwAAAAAc3EAfgB5dXEAfgCIAAAAA3NyABd4c2J0aS5hcGkuUGFyYW1ldGVyaXplZBZs7mkDybt/AgACTAAIYmFzZVR5cGVxAH4Ai1sADXR5cGVBcmd1bWVudHN0ABFbTHhzYnRpL2FwaS9UeXBlO3hxAH4AfXNxAH4AinQAFUVudGl0eVJlY29yZGVyRmFjdG9yeXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZ0AAVrYW1vbnNxAH4AlnQABm1ldHJpY3EAfgCddXEAfgCIAAAAAXNxAH4AinQADFRyYWNlTWV0cmljc3EAfgDGc3EAfgCKcQB+AKFzcQB+AI5zcQB+AJF1cQB+AJQAAAADc3EAfgCWcQB+AKZzcQB+AJZxAH4AqHEAfgCdc3EAfgCKcQB+AKpzcQB+AI5zcQB+AJF1cQB+AJQAAAACc3EAfgCWcQB+AK9xAH4AnXNxAH4AXnEAfgBrdXEAfgBsAAAAAHNxAH4AbgB0ABtrYW1vbi5tZXRyaWMuU2VnbWVudE1ldHJpY3N1cQB+AHEAAAAAcQB+AHV1cQB+AHcAAAAAc3EAfgB5cQB+AH9zcQB+AHlzcQB+AIFzcQB+AHl1cQB+AFwAAAAAc3EAfgB5dXEAfgBcAAAAAHNxAH4AeXVxAH4AiAAAAARzcQB+AIp0ABVHZW5lcmljRW50aXR5UmVjb3JkZXJzcQB+AI5zcQB+AJF1cQB+AJQAAAADc3EAfgCWdAAFa2Ftb25zcQB+AJZ0AAZtZXRyaWNxAH4AnXNxAH4AinQADkVudGl0eVJlY29yZGVycQB+AOxzcQB+AIpxAH4AoXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZxAH4ApnNxAH4AlnEAfgCocQB+AJ1zcQB+AIpxAH4AqnNxAH4AjnNxAH4AkXVxAH4AlAAAAAJzcQB+AJZxAH4Ar3EAfgCdc3EAfgBecQB+AGt1cQB+AGwAAAAAc3EAfgBuAHQAG2thbW9uLm1ldHJpYy5TZWdtZW50TWV0cmljc3VxAH4AcQAAAABxAH4AtXVxAH4AdwAAAABzcQB+AHlxAH4Af3NxAH4AeXNxAH4AgXNxAH4AeXVxAH4AXAAAAABzcQB+AHl1cQB+AFwAAAAAc3EAfgB5dXEAfgCIAAAAA3NxAH4AwXNxAH4AinQAFUVudGl0eVJlY29yZGVyRmFjdG9yeXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZ0AAVrYW1vbnNxAH4AlnQABm1ldHJpY3EAfgCddXEAfgCIAAAAAXNxAH4AinQADlNlZ21lbnRNZXRyaWNzcQB+ARJzcQB+AIpxAH4AoXNxAH4AjnNxAH4AkXVxAH4AlAAAAANzcQB+AJZxAH4ApnNxAH4AlnEAfgCocQB+AJ1zcQB+AIpxAH4AqnNxAH4AjnNxAH4AkXVxAH4AlAAAAAJzcQB+AJZxAH4Ar3EAfgCddXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAAJzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADXhwdAAMa2Ftb24ubWV0cmljc3EAfgEpdAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABRn9fEnvFe7HIhvPduJUx2G3Dm5+w==
kamon.metric.instrument.CollectionContext -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwqiLBPAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAApc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwvfP99nQABm5vdGlmeXNxAH4ADGEUfCJ0AAVHYXVnZXNxAH4ADEPxWtZ0AAR3YWl0c3EAfgAM6PeRVXQADSRhc0luc3RhbmNlT2ZzcQB+AAzh8A5ldAAJSGlzdG9ncmFtc3EAfgAM2QaGVXQADHByb2R1Y3RBcml0eXNxAH4ADGZLfut0AAZlcXVhbHNzcQB+AAzbnCp5dAAFc2NhbGVzcQB+AAzJP2ZYdAAMYXNJbnN0YW5jZU9mc3EAfgAMnmwXcnQADHN5bmNocm9uaXplZHNxAH4ADI4MQV90ABFDb2xsZWN0aW9uQ29udGV4dHNxAH4ADP2sfPt0AA0kaXNJbnN0YW5jZU9mc3EAfgAMGPom53QABmJ1ZmZlcnNxAH4ADPeYAOF0AAhjYW5FcXVhbHNxAH4ADDQbC7N0AA1wcm9kdWN0UHJlZml4c3EAfgAM3WlD1XQADFNuYXBzaG90VHlwZXNxAH4ADG+E4J10AAlub3RpZnlBbGxzcQB+AAyC1+PJdAAMaXNJbnN0YW5jZU9mc3EAfgAMJ6MgV3QADU1pbk1heENvdW50ZXJzcQB+AAxpWSomdAAFbWVyZ2VzcQB+AAxGJLRudAASSW5zdHJ1bWVudFNuYXBzaG90c3EAfgAMi1GHEnQABWFwcGx5c3EAfgAMR73wR3QAB2NsZWFudXBzcQB+AAxs3OLsdAACPT1zcQB+AAy016k9dAAFY2xvbmVzcQB+AAwFLo/JdAAPSW5zdHJ1bWVudFR5cGVzc3EAfgAMTSkgU3QABiRpbml0JHNxAH4ADOp4mu10AAh0b1N0cmluZ3NxAH4ADJEUgJt0AAIhPXNxAH4ADNJy5ot0AAdjb2xsZWN0c3EAfgAMA86F4nQACGdldENsYXNzc3EAfgAMjgNhtnQAB0NvdW50ZXJzcQB+AAzcDcrFdAAOSW5zdHJ1bWVudFR5cGVzcQB+AAwbL9bqdAACbmVzcQB+AAwv2+HBdAAKSW5zdHJ1bWVudHNxAH4ADGuWjkt0AAJlcXNxAH4ADKQyps50AA9wcm9kdWN0SXRlcmF0b3JzcQB+AAwpY8pRdAACIyNzcQB+AAwI0qhFdAAIZmluYWxpemVzcQB+AAx+7tN+dAAOcHJvZHVjdEVsZW1lbnRzcQB+AAyWIsOMdAAIaGFzaENvZGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAGc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgBpeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEXhzYnRpLmFwaS5Qcml2YXRlU6lggSbp1T4CAAB4cgATeHNidGkuYXBpLlF1YWxpZmllZKq0Xe9UsW0YAgABTAAJcXVhbGlmaWVydAAVTHhzYnRpL2FwaS9RdWFsaWZpZXI7eHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwc3IAFXhzYnRpLmFwaS5JZFF1YWxpZmllcreHEPQ9sm21AgABTAAFdmFsdWVxAH4ADXhyABN4c2J0aS5hcGkuUXVhbGlmaWVys3iUqevWWycCAAB4cHQABWthbW9udXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ACJrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5JbnN0cnVtZW50dXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AIdzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gA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
kamon.metric.instrument.Counter -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwvhE0AwAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAApc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwZ+r483QAD0NvdW50ZXJTbmFwc2hvdHNxAH4ADJRGNLd0AAZub3RpZnlzcQB+AAy+RfHAdAAFY291bnRzcQB+AAzymuMldAAEd2FpdHNxAH4ADLn3amh0AA0kYXNJbnN0YW5jZU9mc3EAfgAM05h5lHQADHByb2R1Y3RBcml0eXNxAH4ADIAYq350AAZlcXVhbHNzcQB+AAy3qLBsdAAFc2NhbGVzcQB+AAw6sHpGdAAMYXNJbnN0YW5jZU9mc3EAfgAMrGkVinQADHN5bmNocm9uaXplZHNxAH4ADLKn0NF0AA0kaXNJbnN0YW5jZU9mc3EAfgAMbBp2FnQABmNyZWF0ZXNxAH4ADMShzNZ0AAhjYW5FcXVhbHNxAH4ADDAjkX10AA1wcm9kdWN0UHJlZml4c3EAfgAMeHuKBXQADFNuYXBzaG90VHlwZXNxAH4ADGM+7qx0ABBMb25nQWRkZXJDb3VudGVyc3EAfgAMOatFEnQACW5vdGlmeUFsbHNxAH4ADOGekNJ0AAxpc0luc3RhbmNlT2ZzcQB+AAzfPHY4dAAIU25hcHNob3RzcQB+AAxD3vb1dAAGPGluaXQ+c3EAfgAM8qN0pnQABW1lcmdlc3EAfgAMMceEuXQABWFwcGx5c3EAfgAMFA06jHQAB2NsZWFudXBzcQB+AAyXqV/WdAACPT1zcQB+AAzlmTFIdAAFY2xvbmVzcQB+AAykVMe3dAAGJGluaXQkc3EAfgAMDb1usHQABGNvcHlzcQB+AAyvJ/bmdAAIdG9TdHJpbmdzcQB+AAyy09SfdAACIT1zcQB+AAwMStqTdAAHY29sbGVjdHNxAH4ADNYZ8KZ0AAhnZXRDbGFzc3NxAH4ADD2g+810AA5jb3B5JGRlZmF1bHQkMXNxAH4ADO5Tso90AAdDb3VudGVyc3EAfgAMTaEGeHQAAm5lc3EAfgAM5QM68XQACWluY3JlbWVudHNxAH4ADErZ99V0AAJlcXNxAH4ADA5Pobl0AA9wcm9kdWN0SXRlcmF0b3JzcQB+AAyh/LnddAACIyNzcQB+AAwTUl0YdAAIZmluYWxpemVzcQB+AAx5IUqfdAAOcHJvZHVjdEVsZW1lbnRzcQB+AAySFFf+dAAIaGFzaENvZGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAEc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgBpeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHABdAAfa2Ftb24ubWV0cmljLmluc3RydW1lbnQuQ291bnRlcnVyABpbTHhzYnRpLmFwaS5UeXBlUGFyYW1ldGVyO9ltJg8onfK2AgAAeHAAAAAAfnIAGHhzYnRpLmFwaS5EZWZpbml0aW9uVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQABVRyYWl0dXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAHNyACF4c2J0aS5hcGkuQWJzdHJhY3RMYXp5JFN0cmljdExhenkNZhxrKRYquAIAAUwABXZhbHVldAASTGphdmEvbGFuZy9PYmplY3Q7eHBzcgATeHNidGkuYXBpLkVtcHR5VHlwZbz9nkZJO4kkAgAAeHIAFHhzYnRpLmFwaS5TaW1wbGVUeXBlcnhiiCEjv0ACAAB4cgAOeHNidGkuYXBpLlR5cGU/atkhFkmqygIAAHhwc3EAfgCBc3IAE3hzYnRpLmFwaS5TdHJ1Y3R1cmWpqvmAk2/YAAIAA0wACGRlY2xhcmVkcQB+AGlMAAlpbmhlcml0ZWRxAH4AaUwAB3BhcmVudHNxAH4AaXhxAH4AhnNxAH4AgXVxAH4AZAAAAABzcQB+AIF1cQB+AGQAAAAAc3EAfgCBdXIAEVtMeHNidGkuYXBpLlR5cGU7dP+lWnv56UECAAB4cAAAAANzcgAUeHNidGkuYXBpLlByb2plY3Rpb27z0o1U6UWkLQIAAkwAAmlkcQB+AA1MAAZwcmVmaXh0ABZMeHNidGkvYXBpL1NpbXBsZVR5cGU7eHEAfgCFdAAKSW5zdHJ1bWVudHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4AhXNyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAABHNyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAFa2Ftb25zcQB+AJ50AAZtZXRyaWNzcQB+AJ50AAppbnN0cnVtZW50c3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AJ9zcQB+AJJ0AAZPYmplY3RzcQB+AJZzcQB+AJl1cQB+AJwAAAADc3EAfgCedAAEamF2YXNxAH4AnnQABGxhbmdxAH4Ap3NxAH4AknQAA0FueXNxAH4AlnNxAH4AmXVxAH4AnAAAAAJzcQB+AJ50AAVzY2FsYXEAfgCnc3EAfgBmcQB+AHN1cQB+AHQAAAAAc3EAfgB2AHQAH2thbW9uLm1ldHJpYy5pbnN0cnVtZW50LkNvdW50ZXJ1cQB+AHkAAAAAfnEAfgB7dAAGTW9kdWxldXEAfgB/AAAAAHNxAH4AgXEAfgCHc3EAfgCBc3EAfgCJc3EAfgCBdXEAfgBkAAAAAHNxAH4AgXVxAH4AZAAAAABzcQB+AIF1cQB+AJAAAAACc3EAfgCScQB+AKlzcQB+AJZzcQB+AJl1cQB+AJwAAAADc3EAfgCecQB+AK5zcQB+AJ5xAH4AsHEAfgCnc3EAfgCScQB+ALJzcQB+AJZzcQB+AJl1cQB+AJwAAAACc3EAfgCecQB+ALdxAH4Ap3NxAH4AZnEAfgBzdXEAfgB0AAAAAHNxAH4AdgB0AChrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5Mb25nQWRkZXJDb3VudGVydXEAfgB5AAAAAH5xAH4Ae3QACENsYXNzRGVmdXEAfgB/AAAAAHNxAH4AgXEAfgCHc3EAfgCBc3EAfgCJc3EAfgCBdXEAfgBkAAAAAHNxAH4AgXVxAH4AZAAAAABzcQB+AIF1cQB+AJAAAAAEc3EAfgCSdAAHQ291bnRlcnNxAH4AlnNxAH4AmXVxAH4AnAAAAARzcQB+AJ50AAVrYW1vbnNxAH4AnnQABm1ldHJpY3NxAH4AnnQACmluc3RydW1lbnRxAH4Ap3NxAH4AknQACkluc3RydW1lbnRxAH4A53NxAH4AknEAfgCpc3EAfgCWc3EAfgCZdXEAfgCcAAAAA3NxAH4AnnEAfgCuc3EAfgCecQB+ALBxAH4Ap3NxAH4AknEAfgCyc3EAfgCWc3EAfgCZdXEAfgCcAAAAAnNxAH4AnnEAfgC3cQB+AKdzcQB+AGZxAH4Ac3VxAH4AdAAAAABzcQB+AHYAdAAna2Ftb24ubWV0cmljLmluc3RydW1lbnQuQ291bnRlclNuYXBzaG90dXEAfgB5AAAAAHEAfgDZdXEAfgB/AAAAAHNxAH4AgXEAfgCHc3EAfgCBc3EAfgCJc3EAfgCBdXEAfgBkAAAAAHNxAH4AgXVxAH4AZAAAAABzcQB+AIF1cQB+AJAAAAAIc3EAfgCSdAAMU2VyaWFsaXphYmxlc3EAfgCWc3EAfgCZdXEAfgCcAAAAAnNxAH4AnnEAfgC3cQB+AKdzcQB+AJJxAH4BDXNxAH4AlnNxAH4AmXVxAH4AnAAAAANzcQB+AJ5xAH4ArnNxAH4AnnQAAmlvcQB+AKdzcQB+AJJ0AAdQcm9kdWN0cQB+AQ5zcQB+AJJ0AAZFcXVhbHNxAH4BDnNxAH4AknQACFNuYXBzaG90c3EAfgCSdAAHQ291bnRlcnNxAH4AlnNxAH4AmXVxAH4AnAAAAARzcQB+AJ50AAVrYW1vbnNxAH4AnnQABm1ldHJpY3NxAH4AnnQACmluc3RydW1lbnRxAH4Ap3NxAH4AknQAEkluc3RydW1lbnRTbmFwc2hvdHEAfgEhc3EAfgCScQB+AKlzcQB+AJZzcQB+AJl1cQB+AJwAAAADc3EAfgCecQB+AK5zcQB+AJ5xAH4AsHEAfgCnc3EAfgCScQB+ALJxAH4BDnVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAADc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQADGthbW9uLm1ldHJpY3NxAH4BNXQAF2thbW9uLm1ldHJpYy5pbnN0cnVtZW50c3EAfgE1dAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABSaZqLFHumqBpnmmLD1WFqHVPcKMA==
kamon.metric.instrument.Counter$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwvhE0AwAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAApc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwZ+r483QAD0NvdW50ZXJTbmFwc2hvdHNxAH4ADJRGNLd0AAZub3RpZnlzcQB+AAy+RfHAdAAFY291bnRzcQB+AAzymuMldAAEd2FpdHNxAH4ADLn3amh0AA0kYXNJbnN0YW5jZU9mc3EAfgAM05h5lHQADHByb2R1Y3RBcml0eXNxAH4ADIAYq350AAZlcXVhbHNzcQB+AAy3qLBsdAAFc2NhbGVzcQB+AAw6sHpGdAAMYXNJbnN0YW5jZU9mc3EAfgAMrGkVinQADHN5bmNocm9uaXplZHNxAH4ADLKn0NF0AA0kaXNJbnN0YW5jZU9mc3EAfgAMbBp2FnQABmNyZWF0ZXNxAH4ADMShzNZ0AAhjYW5FcXVhbHNxAH4ADDAjkX10AA1wcm9kdWN0UHJlZml4c3EAfgAMeHuKBXQADFNuYXBzaG90VHlwZXNxAH4ADGM+7qx0ABBMb25nQWRkZXJDb3VudGVyc3EAfgAMOatFEnQACW5vdGlmeUFsbHNxAH4ADOGekNJ0AAxpc0luc3RhbmNlT2ZzcQB+AAzfPHY4dAAIU25hcHNob3RzcQB+AAxD3vb1dAAGPGluaXQ+c3EAfgAM8qN0pnQABW1lcmdlc3EAfgAMMceEuXQABWFwcGx5c3EAfgAMFA06jHQAB2NsZWFudXBzcQB+AAyXqV/WdAACPT1zcQB+AAzlmTFIdAAFY2xvbmVzcQB+AAykVMe3dAAGJGluaXQkc3EAfgAMDb1usHQABGNvcHlzcQB+AAyvJ/bmdAAIdG9TdHJpbmdzcQB+AAyy09SfdAACIT1zcQB+AAwMStqTdAAHY29sbGVjdHNxAH4ADNYZ8KZ0AAhnZXRDbGFzc3NxAH4ADD2g+810AA5jb3B5JGRlZmF1bHQkMXNxAH4ADO5Tso90AAdDb3VudGVyc3EAfgAMTaEGeHQAAm5lc3EAfgAM5QM68XQACWluY3JlbWVudHNxAH4ADErZ99V0AAJlcXNxAH4ADA5Pobl0AA9wcm9kdWN0SXRlcmF0b3JzcQB+AAyh/LnddAACIyNzcQB+AAwTUl0YdAAIZmluYWxpemVzcQB+AAx5IUqfdAAOcHJvZHVjdEVsZW1lbnRzcQB+AAySFFf+dAAIaGFzaENvZGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAEc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgBpeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHABdAAfa2Ftb24ubWV0cmljLmluc3RydW1lbnQuQ291bnRlcnVyABpbTHhzYnRpLmFwaS5UeXBlUGFyYW1ldGVyO9ltJg8onfK2AgAAeHAAAAAAfnIAGHhzYnRpLmFwaS5EZWZpbml0aW9uVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQABVRyYWl0dXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAHNyACF4c2J0aS5hcGkuQWJzdHJhY3RMYXp5JFN0cmljdExhenkNZhxrKRYquAIAAUwABXZhbHVldAASTGphdmEvbGFuZy9PYmplY3Q7eHBzcgATeHNidGkuYXBpLkVtcHR5VHlwZbz9nkZJO4kkAgAAeHIAFHhzYnRpLmFwaS5TaW1wbGVUeXBlcnhiiCEjv0ACAAB4cgAOeHNidGkuYXBpLlR5cGU/atkhFkmqygIAAHhwc3EAfgCBc3IAE3hzYnRpLmFwaS5TdHJ1Y3R1cmWpqvmAk2/YAAIAA0wACGRlY2xhcmVkcQB+AGlMAAlpbmhlcml0ZWRxAH4AaUwAB3BhcmVudHNxAH4AaXhxAH4AhnNxAH4AgXVxAH4AZAAAAABzcQB+AIF1cQB+AGQAAAAAc3EAfgCBdXIAEVtMeHNidGkuYXBpLlR5cGU7dP+lWnv56UECAAB4cAAAAANzcgAUeHNidGkuYXBpLlByb2plY3Rpb27z0o1U6UWkLQIAAkwAAmlkcQB+AA1MAAZwcmVmaXh0ABZMeHNidGkvYXBpL1NpbXBsZVR5cGU7eHEAfgCFdAAKSW5zdHJ1bWVudHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4AhXNyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAABHNyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAFa2Ftb25zcQB+AJ50AAZtZXRyaWNzcQB+AJ50AAppbnN0cnVtZW50c3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AJ9zcQB+AJJ0AAZPYmplY3RzcQB+AJZzcQB+AJl1cQB+AJwAAAADc3EAfgCedAAEamF2YXNxAH4AnnQABGxhbmdxAH4Ap3NxAH4AknQAA0FueXNxAH4AlnNxAH4AmXVxAH4AnAAAAAJzcQB+AJ50AAVzY2FsYXEAfgCnc3EAfgBmcQB+AHN1cQB+AHQAAAAAc3EAfgB2AHQAH2thbW9uLm1ldHJpYy5pbnN0cnVtZW50LkNvdW50ZXJ1cQB+AHkAAAAAfnEAfgB7dAAGTW9kdWxldXEAfgB/AAAAAHNxAH4AgXEAfgCHc3EAfgCBc3EAfgCJc3EAfgCBdXEAfgBkAAAAAHNxAH4AgXVxAH4AZAAAAABzcQB+AIF1cQB+AJAAAAACc3EAfgCScQB+AKlzcQB+AJZzcQB+AJl1cQB+AJwAAAADc3EAfgCecQB+AK5zcQB+AJ5xAH4AsHEAfgCnc3EAfgCScQB+ALJzcQB+AJZzcQB+AJl1cQB+AJwAAAACc3EAfgCecQB+ALdxAH4Ap3NxAH4AZnEAfgBzdXEAfgB0AAAAAHNxAH4AdgB0AChrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5Mb25nQWRkZXJDb3VudGVydXEAfgB5AAAAAH5xAH4Ae3QACENsYXNzRGVmdXEAfgB/AAAAAHNxAH4AgXEAfgCHc3EAfgCBc3EAfgCJc3EAfgCBdXEAfgBkAAAAAHNxAH4AgXVxAH4AZAAAAABzcQB+AIF1cQB+AJAAAAAEc3EAfgCSdAAHQ291bnRlcnNxAH4AlnNxAH4AmXVxAH4AnAAAAARzcQB+AJ50AAVrYW1vbnNxAH4AnnQABm1ldHJpY3NxAH4AnnQACmluc3RydW1lbnRxAH4Ap3NxAH4AknQACkluc3RydW1lbnRxAH4A53NxAH4AknEAfgCpc3EAfgCWc3EAfgCZdXEAfgCcAAAAA3NxAH4AnnEAfgCuc3EAfgCecQB+ALBxAH4Ap3NxAH4AknEAfgCyc3EAfgCWc3EAfgCZdXEAfgCcAAAAAnNxAH4AnnEAfgC3cQB+AKdzcQB+AGZxAH4Ac3VxAH4AdAAAAABzcQB+AHYAdAAna2Ftb24ubWV0cmljLmluc3RydW1lbnQuQ291bnRlclNuYXBzaG90dXEAfgB5AAAAAHEAfgDZdXEAfgB/AAAAAHNxAH4AgXEAfgCHc3EAfgCBc3EAfgCJc3EAfgCBdXEAfgBkAAAAAHNxAH4AgXVxAH4AZAAAAABzcQB+AIF1cQB+AJAAAAAIc3EAfgCSdAAMU2VyaWFsaXphYmxlc3EAfgCWc3EAfgCZdXEAfgCcAAAAAnNxAH4AnnEAfgC3cQB+AKdzcQB+AJJxAH4BDXNxAH4AlnNxAH4AmXVxAH4AnAAAAANzcQB+AJ5xAH4ArnNxAH4AnnQAAmlvcQB+AKdzcQB+AJJ0AAdQcm9kdWN0cQB+AQ5zcQB+AJJ0AAZFcXVhbHNxAH4BDnNxAH4AknQACFNuYXBzaG90c3EAfgCSdAAHQ291bnRlcnNxAH4AlnNxAH4AmXVxAH4AnAAAAARzcQB+AJ50AAVrYW1vbnNxAH4AnnQABm1ldHJpY3NxAH4AnnQACmluc3RydW1lbnRxAH4Ap3NxAH4AknQAEkluc3RydW1lbnRTbmFwc2hvdHEAfgEhc3EAfgCScQB+AKlzcQB+AJZzcQB+AJl1cQB+AJwAAAADc3EAfgCecQB+AK5zcQB+AJ5xAH4AsHEAfgCnc3EAfgCScQB+ALJxAH4BDnVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAADc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQADGthbW9uLm1ldHJpY3NxAH4BNXQAF2thbW9uLm1ldHJpYy5pbnN0cnVtZW50c3EAfgE1dAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABSaZqLFHumqBpnmmLD1WFqHVPcKMA==
kamon.metric.instrument.Gauge -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwevcMSQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAJzcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHDXVMH5dAAlY2FsbEJ5TmFtZUxvbmdBc0N1cnJlbnRWYWx1ZUNvbGxlY3RvcnNxAH4AC8uudMh0ACNmdW5jdGlvblplcm9Bc0N1cnJlbnRWYWx1ZUNvbGxlY3RvcnVxAH4ACQAAACFzcQB+AAskt2T0dAAGbm90aWZ5c3EAfgALSpUNh3QABUdhdWdlc3EAfgAL1MWFpHQABHdhaXRzcQB+AAvVRzKwdAANJGFzSW5zdGFuY2VPZnNxAH4AC6pcY6h0AAZlcXVhbHNzcQB+AAvMi8wcdAAMYXNJbnN0YW5jZU9mc3EAfgAL94AHU3QADHN5bmNocm9uaXplZHNxAH4AC0N+6J50ABRIaXN0b2dyYW1CYWNrZWRHYXVnZXNxAH4AC9Bdbqp0AA0kaXNJbnN0YW5jZU9mc3EAfgALfFwXd3QABmNyZWF0ZXNxAH4ACxNbqQR0ABpEaWZmZXJlbnRpYWxWYWx1ZUNvbGxlY3RvcnNxAH4AC/V0RRV0AAxTbmFwc2hvdFR5cGVzcQB+AAtn9buCdAAJbm90aWZ5QWxsc3EAfgALY8yUJnQADGlzSW5zdGFuY2VPZnNxAH4AC0mnu790AAY8aW5pdD5zcQB+AAsEe937dAAFYXBwbHlzcQB+AAvFq3+rdAAHY2xlYW51cHNxAH4AC11P4hZ0AAI9PXNxAH4AC8U+IsV0AAVjbG9uZXNxAH4AC7hVSk10AAh0b1N0cmluZ3NxAH4AC5kzanp0AAIhPXNxAH4ACwF1p6d0AAdjb2xsZWN0c3EAfgAL1+jh0XQACGdldENsYXNzc3EAfgALf6EgIXQADHJlZnJlc2hWYWx1ZXNxAH4ACzZljfp0ABVDdXJyZW50VmFsdWVDb2xsZWN0b3JzcQB+AAt+NI+pdAACbmVzcQB+AAuUqlH0dAAMY3VycmVudFZhbHVlc3EAfgALFfzqIXQAAmVxc3EAfgALxVG0hXQABnJlY29yZHNxAH4AC3X3ySt0AAIjI3NxAH4ACwR7AAB0AAhmaW5hbGl6ZXNxAH4AC9nJsqx0AAhoYXNoQ29kZXNxAH4AC608pkx0AB9hdXRvbWF0aWNWYWx1ZUNvbGxlY3RvclNjaGVkdWxlc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAABXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4AXXhyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAXQAHWthbW9uLm1ldHJpYy5pbnN0cnVtZW50LkdhdWdldXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AHVzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AXUwACWluaGVyaXRlZHEAfgBdTAAHcGFyZW50c3EAfgBdeHEAfgB6c3EAfgB1dXEAfgBYAAAAAHNxAH4AdXVxAH4AWAAAAABzcQB+AHV1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAA3NyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADEwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AHl0AApJbnN0cnVtZW50c3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgB5c3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAAEc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADHhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AAVrYW1vbnNxAH4AknQABm1ldHJpY3NxAH4AknQACmluc3RydW1lbnRzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4Ak3NxAH4AhnQABk9iamVjdHNxAH4AinNxAH4AjXVxAH4AkAAAAANzcQB+AJJ0AARqYXZhc3EAfgCSdAAEbGFuZ3EAfgCbc3EAfgCGdAADQW55c3EAfgCKc3EAfgCNdXEAfgCQAAAAAnNxAH4AknQABXNjYWxhcQB+AJtzcQB+AFpxAH4AZ3VxAH4AaAAAAABzcQB+AGoAdAAda2Ftb24ubWV0cmljLmluc3RydW1lbnQuR2F1Z2V1cQB+AG0AAAAAfnEAfgBvdAAGTW9kdWxldXEAfgBzAAAAAHNxAH4AdXEAfgB7c3EAfgB1c3EAfgB9c3EAfgB1dXEAfgBYAAAAAHNxAH4AdXVxAH4AWAAAAABzcQB+AHV1cQB+AIQAAAACc3EAfgCGcQB+AJ1zcQB+AIpzcQB+AI11cQB+AJAAAAADc3EAfgCScQB+AKJzcQB+AJJxAH4ApHEAfgCbc3EAfgCGcQB+AKZzcQB+AIpzcQB+AI11cQB+AJAAAAACc3EAfgCScQB+AKtxAH4Am3NxAH4AWnEAfgBndXEAfgBoAAAAAHNxAH4AagB0ADJrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5EaWZmZXJlbnRpYWxWYWx1ZUNvbGxlY3RvcnVxAH4AbQAAAAB+cQB+AG90AAhDbGFzc0RlZnVxAH4AcwAAAABzcQB+AHVxAH4Ae3NxAH4AdXNxAH4AfXNxAH4AdXVxAH4AWAAAAABzcQB+AHV1cQB+AFgAAAAAc3EAfgB1dXEAfgCEAAAAA3NxAH4AhnQAFUN1cnJlbnRWYWx1ZUNvbGxlY3RvcnNxAH4AhnQABUdhdWdlc3EAfgCGdAAKaW5zdHJ1bWVudHNxAH4AhnQABm1ldHJpY3NxAH4AhnQABWthbW9uc3EAfgCKc3EAfgCNdXEAfgCQAAAAAXEAfgCbc3EAfgCGcQB+AJ1zcQB+AIpzcQB+AI11cQB+AJAAAAADc3EAfgCScQB+AKJzcQB+AJJxAH4ApHEAfgCbc3EAfgCGcQB+AKZzcQB+AIpzcQB+AI11cQB+AJAAAAACc3EAfgCScQB+AKtxAH4Am3NxAH4AWnEAfgBndXEAfgBoAAAAAHNxAH4AagB0ADJrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5EaWZmZXJlbnRpYWxWYWx1ZUNvbGxlY3RvcnVxAH4AbQAAAABxAH4AsXVxAH4AcwAAAABzcQB+AHVxAH4Ae3NxAH4AdXNxAH4AfXNxAH4AdXVxAH4AWAAAAABzcQB+AHV1cQB+AFgAAAAAc3EAfgB1dXEAfgCEAAAAAnNxAH4AhnEAfgCdc3EAfgCKc3EAfgCNdXEAfgCQAAAAA3NxAH4AknEAfgCic3EAfgCScQB+AKRxAH4Am3NxAH4AhnEAfgCmc3EAfgCKc3EAfgCNdXEAfgCQAAAAAnNxAH4AknEAfgCrcQB+AJtzcQB+AFpxAH4AZ3VxAH4AaAAAAABzcQB+AGoAdAAsa2Ftb24ubWV0cmljLmluc3RydW1lbnQuSGlzdG9ncmFtQmFja2VkR2F1Z2V1cQB+AG0AAAAAcQB+AM11cQB+AHMAAAAAc3EAfgB1cQB+AHtzcQB+AHVzcQB+AH1zcQB+AHV1cQB+AFgAAAAAc3EAfgB1dXEAfgBYAAAAAHNxAH4AdXVxAH4AhAAAAARzcQB+AIZ0AAVHYXVnZXNxAH4AinNxAH4AjXVxAH4AkAAAAARzcQB+AJJ0AAVrYW1vbnNxAH4AknQABm1ldHJpY3NxAH4AknQACmluc3RydW1lbnRxAH4Am3NxAH4AhnQACkluc3RydW1lbnRxAH4BHHNxAH4AhnEAfgCdc3EAfgCKc3EAfgCNdXEAfgCQAAAAA3NxAH4AknEAfgCic3EAfgCScQB+AKRxAH4Am3NxAH4AhnEAfgCmc3EAfgCKc3EAfgCNdXEAfgCQAAAAAnNxAH4AknEAfgCrcQB+AJt1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0AAxrYW1vbi5tZXRyaWNzcQB+ATR0ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4BNHQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADEwAD3NvdXJjZURpcmVjdG9yeXEAfgAMeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUnQKWUcoFviWpS5iui7VxAEeFp3I=
kamon.metric.instrument.Gauge$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwevcMSQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAJzcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHDXVMH5dAAlY2FsbEJ5TmFtZUxvbmdBc0N1cnJlbnRWYWx1ZUNvbGxlY3RvcnNxAH4AC8uudMh0ACNmdW5jdGlvblplcm9Bc0N1cnJlbnRWYWx1ZUNvbGxlY3RvcnVxAH4ACQAAACFzcQB+AAskt2T0dAAGbm90aWZ5c3EAfgALSpUNh3QABUdhdWdlc3EAfgAL1MWFpHQABHdhaXRzcQB+AAvVRzKwdAANJGFzSW5zdGFuY2VPZnNxAH4AC6pcY6h0AAZlcXVhbHNzcQB+AAvMi8wcdAAMYXNJbnN0YW5jZU9mc3EAfgAL94AHU3QADHN5bmNocm9uaXplZHNxAH4AC0N+6J50ABRIaXN0b2dyYW1CYWNrZWRHYXVnZXNxAH4AC9Bdbqp0AA0kaXNJbnN0YW5jZU9mc3EAfgALfFwXd3QABmNyZWF0ZXNxAH4ACxNbqQR0ABpEaWZmZXJlbnRpYWxWYWx1ZUNvbGxlY3RvcnNxAH4AC/V0RRV0AAxTbmFwc2hvdFR5cGVzcQB+AAtn9buCdAAJbm90aWZ5QWxsc3EAfgALY8yUJnQADGlzSW5zdGFuY2VPZnNxAH4AC0mnu790AAY8aW5pdD5zcQB+AAsEe937dAAFYXBwbHlzcQB+AAvFq3+rdAAHY2xlYW51cHNxAH4AC11P4hZ0AAI9PXNxAH4AC8U+IsV0AAVjbG9uZXNxAH4AC7hVSk10AAh0b1N0cmluZ3NxAH4AC5kzanp0AAIhPXNxAH4ACwF1p6d0AAdjb2xsZWN0c3EAfgAL1+jh0XQACGdldENsYXNzc3EAfgALf6EgIXQADHJlZnJlc2hWYWx1ZXNxAH4ACzZljfp0ABVDdXJyZW50VmFsdWVDb2xsZWN0b3JzcQB+AAt+NI+pdAACbmVzcQB+AAuUqlH0dAAMY3VycmVudFZhbHVlc3EAfgALFfzqIXQAAmVxc3EAfgALxVG0hXQABnJlY29yZHNxAH4AC3X3ySt0AAIjI3NxAH4ACwR7AAB0AAhmaW5hbGl6ZXNxAH4AC9nJsqx0AAhoYXNoQ29kZXNxAH4AC608pkx0AB9hdXRvbWF0aWNWYWx1ZUNvbGxlY3RvclNjaGVkdWxlc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAABXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4AXXhyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAXQAHWthbW9uLm1ldHJpYy5pbnN0cnVtZW50LkdhdWdldXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AHVzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AXUwACWluaGVyaXRlZHEAfgBdTAAHcGFyZW50c3EAfgBdeHEAfgB6c3EAfgB1dXEAfgBYAAAAAHNxAH4AdXVxAH4AWAAAAABzcQB+AHV1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAA3NyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADEwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AHl0AApJbnN0cnVtZW50c3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgB5c3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAAEc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADHhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AAVrYW1vbnNxAH4AknQABm1ldHJpY3NxAH4AknQACmluc3RydW1lbnRzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4Ak3NxAH4AhnQABk9iamVjdHNxAH4AinNxAH4AjXVxAH4AkAAAAANzcQB+AJJ0AARqYXZhc3EAfgCSdAAEbGFuZ3EAfgCbc3EAfgCGdAADQW55c3EAfgCKc3EAfgCNdXEAfgCQAAAAAnNxAH4AknQABXNjYWxhcQB+AJtzcQB+AFpxAH4AZ3VxAH4AaAAAAABzcQB+AGoAdAAda2Ftb24ubWV0cmljLmluc3RydW1lbnQuR2F1Z2V1cQB+AG0AAAAAfnEAfgBvdAAGTW9kdWxldXEAfgBzAAAAAHNxAH4AdXEAfgB7c3EAfgB1c3EAfgB9c3EAfgB1dXEAfgBYAAAAAHNxAH4AdXVxAH4AWAAAAABzcQB+AHV1cQB+AIQAAAACc3EAfgCGcQB+AJ1zcQB+AIpzcQB+AI11cQB+AJAAAAADc3EAfgCScQB+AKJzcQB+AJJxAH4ApHEAfgCbc3EAfgCGcQB+AKZzcQB+AIpzcQB+AI11cQB+AJAAAAACc3EAfgCScQB+AKtxAH4Am3NxAH4AWnEAfgBndXEAfgBoAAAAAHNxAH4AagB0ADJrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5EaWZmZXJlbnRpYWxWYWx1ZUNvbGxlY3RvcnVxAH4AbQAAAAB+cQB+AG90AAhDbGFzc0RlZnVxAH4AcwAAAABzcQB+AHVxAH4Ae3NxAH4AdXNxAH4AfXNxAH4AdXVxAH4AWAAAAABzcQB+AHV1cQB+AFgAAAAAc3EAfgB1dXEAfgCEAAAAA3NxAH4AhnQAFUN1cnJlbnRWYWx1ZUNvbGxlY3RvcnNxAH4AhnQABUdhdWdlc3EAfgCGdAAKaW5zdHJ1bWVudHNxAH4AhnQABm1ldHJpY3NxAH4AhnQABWthbW9uc3EAfgCKc3EAfgCNdXEAfgCQAAAAAXEAfgCbc3EAfgCGcQB+AJ1zcQB+AIpzcQB+AI11cQB+AJAAAAADc3EAfgCScQB+AKJzcQB+AJJxAH4ApHEAfgCbc3EAfgCGcQB+AKZzcQB+AIpzcQB+AI11cQB+AJAAAAACc3EAfgCScQB+AKtxAH4Am3NxAH4AWnEAfgBndXEAfgBoAAAAAHNxAH4AagB0ADJrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5EaWZmZXJlbnRpYWxWYWx1ZUNvbGxlY3RvcnVxAH4AbQAAAABxAH4AsXVxAH4AcwAAAABzcQB+AHVxAH4Ae3NxAH4AdXNxAH4AfXNxAH4AdXVxAH4AWAAAAABzcQB+AHV1cQB+AFgAAAAAc3EAfgB1dXEAfgCEAAAAAnNxAH4AhnEAfgCdc3EAfgCKc3EAfgCNdXEAfgCQAAAAA3NxAH4AknEAfgCic3EAfgCScQB+AKRxAH4Am3NxAH4AhnEAfgCmc3EAfgCKc3EAfgCNdXEAfgCQAAAAAnNxAH4AknEAfgCrcQB+AJtzcQB+AFpxAH4AZ3VxAH4AaAAAAABzcQB+AGoAdAAsa2Ftb24ubWV0cmljLmluc3RydW1lbnQuSGlzdG9ncmFtQmFja2VkR2F1Z2V1cQB+AG0AAAAAcQB+AM11cQB+AHMAAAAAc3EAfgB1cQB+AHtzcQB+AHVzcQB+AH1zcQB+AHV1cQB+AFgAAAAAc3EAfgB1dXEAfgBYAAAAAHNxAH4AdXVxAH4AhAAAAARzcQB+AIZ0AAVHYXVnZXNxAH4AinNxAH4AjXVxAH4AkAAAAARzcQB+AJJ0AAVrYW1vbnNxAH4AknQABm1ldHJpY3NxAH4AknQACmluc3RydW1lbnRxAH4Am3NxAH4AhnQACkluc3RydW1lbnRxAH4BHHNxAH4AhnEAfgCdc3EAfgCKc3EAfgCNdXEAfgCQAAAAA3NxAH4AknEAfgCic3EAfgCScQB+AKRxAH4Am3NxAH4AhnEAfgCmc3EAfgCKc3EAfgCNdXEAfgCQAAAAAnNxAH4AknEAfgCrcQB+AJt1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0AAxrYW1vbi5tZXRyaWNzcQB+ATR0ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4BNHQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADEwAD3NvdXJjZURpcmVjdG9yeXEAfgAMeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUnQKWUcoFviWpS5iui7VxAEeFp3I=
kamon.metric.instrument.Histogram -> 

kamon.metric.instrument.Histogram$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwxkPDGgAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAADJc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwUI4RUnQAD2dldENvdW50QXRJbmRleHNxAH4ADHPLgKl0AAtQZXJjZW50aWxlc3NxAH4ADLcZPUB0AAZub3RpZnlzcQB+AAwTUA++dAAHdW5hcHBseXNxAH4ADBuf2+50ABpzaXplT2ZFcXVpdmFsZW50VmFsdWVSYW5nZXNxAH4ADMT1l710AAdjdXJyaWVkc3EAfgAMJ68ObnQAC3BlcmNlbnRpbGVzc3EAfgAMqxlh9nQAJHByb3RlY3RlZFN1YkJ1Y2tldEhhbGZDb3VudE1hZ25pdHVkZXNxAH4ADLwrJqR0ABBlbmRUaW1lU3RhbXBNc2Vjc3EAfgAMZ7FXPXQAGWdldExvd2VzdERpc2Nlcm5pYmxlVmFsdWVzcQB+AAzDDexzdAAFY291bnRzcQB+AAwiw7JudAAPc2V0RW5kVGltZVN0YW1wc3EAfgAMkbUx0XQAJmdldEludGVnZXJUb0RvdWJsZVZhbHVlQ29udmVyc2lvblJhdGlvc3EAfgAMg4oeeHQAFWluY3JlbWVudENvdW50QXRJbmRleHNxAH4ADISpLbh0ABN2YWx1ZVVuaXRzUGVyQnVja2V0c3EAfgAMmwc6F3QAD3NoaWZ0VmFsdWVzTGVmdHNxAH4ADNklfcl0AAR3YWl0c3EAfgAMHv/opXQAHmVzdGFibGlzaEludGVybmFsVGFja2luZ1ZhbHVlc3NxAH4ADL2tzIV0AAlwcmVjaXNpb25zcQB+AAwTGfZAdAATZ2V0TWF4VmFsdWVBc0RvdWJsZXNxAH4ADNrapjh0AA5jb3B5JGRlZmF1bHQkMnNxAH4ADOr8aZt0AA0kYXNJbnN0YW5jZU9mc3EAfgAMfAX+DXQABWVtcHR5c3EAfgAM2Qbrn3QAJ2NvcHlJbnRvQ29ycmVjdGVkRm9yQ29vcmRpbmF0ZWRPbWlzc2lvbnNxAH4ADERcb7Z0ABJzdGFydFRpbWVTdGFtcE1zZWNzcQB+AAxFmBzQdAAebnVtYmVyT2ZTaWduaWZpY2FudFZhbHVlRGlnaXRzc3EAfgAMAoMHOHQAHGdldEJ1Y2tldHNOZWVkZWRUb0NvdmVyVmFsdWVzcQB+AAwJTR1XdAAhZ2V0TnVtYmVyT2ZTaWduaWZpY2FudFZhbHVlRGlnaXRzc3EAfgAMreYtS3QACUhpc3RvZ3JhbXNxAH4ADO5Nl7R0AAdsb2dCYXNlc3EAfgAMJ89ZuXQAFWhpZ2hlc3RUcmFja2FibGVWYWx1ZXNxAH4ADPSQsAV0AA5jb3B5JGRlZmF1bHQkNXNxAH4ADHEbiu90ABZoaWdoZXN0RXF1aXZhbGVudFZhbHVlc3EAfgAMcOlnRXQADWdldFRvdGFsQ291bnRzcQB+AAz7NNgudAAQcmF3Q29tcGFjdFJlY29yZHNxAH4ADFF3/Al0ABNpbmNyZW1lbnRUb3RhbENvdW50c3EAfgAMWQk7EXQAFG51bWJlck9mTWVhc3VyZW1lbnRzc3EAfgAMuCuDrHQAGXNldE5vcm1hbGl6aW5nSW5kZXhPZmZzZXRzcQB+AAyCafuvdAAMcHJvZHVjdEFyaXR5c3EAfgAM4dZ1gHQACHN1YnRyYWN0c3EAfgAM+nAxqXQABmVxdWFsc3NxAH4ADOIs74p0AA9zZXRDb3VudEF0SW5kZXhzcQB+AAxOwPEtdAALZ2V0TWluVmFsdWVzcQB+AAw3/TQOdAAOZ2V0QnVja2V0SW5kZXhzcQB+AAw2Q3l8dAAUcmVzZXRNaW5Ob25aZXJvVmFsdWVzcQB+AAyZyaTFdAADdGFnc3EAfgAMLkosK3QABXNjYWxlc3EAfgAM/kyO/HQACWdldENvdW50c3NxAH4ADIQNVdh0AA11bml0TWFnbml0dWRlc3EAfgAM9l4PPnQAFGVuY29kZUludG9CeXRlQnVmZmVyc3EAfgAM/lnTCnQAEWdldFN0YXJ0VGltZVN0YW1wc3EAfgAMWPWmp3QAGWZpbGxDb3VudHNBcnJheUZyb21CdWZmZXJzcQB+AAzoarUZdAAbcHJvdGVjdGVkU3ViQnVja2V0SGFsZkNvdW50c3EAfgAMcww1CnQADGFzSW5zdGFuY2VPZnNxAH4ADNVxqJN0ACRnZXROZWVkZWRWMFBheWxvYWRCeXRlQnVmZmVyQ2FwYWNpdHlzcQB+AAznLvf9dAANTXV0YWJsZVJlY29yZHNxAH4ADOjp4YZ0ABtnZXRQZXJjZW50aWxlQXRPckJlbG93VmFsdWVzcQB+AAzHeOAYdAAWQ29tcGFjdFJlY29yZENvdW50TWFza3NxAH4ADM06gsV0AAxzeW5jaHJvbml6ZWRzcQB+AAy6wiGCdAAKcGVyY2VudGlsZXNxAH4ADARHtRh0ABZwcm90ZWN0ZWRVbml0TWFnbml0dWRlc3EAfgAMH9JyRnQAGWdldE5vcm1hbGl6aW5nSW5kZXhPZmZzZXRzcQB+AAxLUkSIdAAObm9ybWFsaXplSW5kZXhzcQB+AAyYSG1ddAAOc3ViQnVja2V0Q291bnRzcQB+AAyeXeSpdAANJGlzSW5zdGFuY2VPZnNxAH4ADFoSMvh0AAZjcmVhdGVzcQB+AAzbCwUUdAAPZ2V0Q291bnRBdFZhbHVlc3EAfgAMAhVZXXQAFGxlYWRpbmdaZXJvQ291bnRCYXNlc3EAfgAMIQnRaXQABnR1cGxlZHNxAH4ADPyWBDN0AANtaW5zcQB+AAxocfdfdAAUZ2V0VmFsdWVBdFBlcmNlbnRpbGVzcQB+AAzmSJn8dAAbZ2V0TmVlZGVkQnl0ZUJ1ZmZlckNhcGFjaXR5c3EAfgAMzpVuBHQAD3dvcmRTaXplSW5CeXRlc3NxAH4ADBSG+TV0ACNpbnRlZ2VyVG9Eb3VibGVWYWx1ZUNvbnZlcnNpb25SYXRpb3NxAH4ADKTm2QN0ABVtZWRpYW5FcXVpdmFsZW50VmFsdWVzcQB+AAyyOWXkdAASTGluZWFyQnVja2V0VmFsdWVzc3EAfgAMaUCAnnQAB2ZvckVhY2hzcQB+AAyUe+a5dAAPZ2V0U3RkRGV2aWF0aW9uc3EAfgAM4CCO+XQACGNhbkVxdWFsc3EAfgAMpxSqwnQAIm5vbkNvbmN1cnJlbnROb3JtYWxpemluZ0luZGV4U2hpZnRzcQB+AAxp+JaPdAAOY29weSRkZWZhdWx0JDRzcQB+AAzcP/YNdAAMRHluYW1pY1Jhbmdlc3EAfgAMxc5eo3QAJnNldEludGVnZXJUb0RvdWJsZVZhbHVlQ29udmVyc2lvblJhdGlvc3EAfgAMsWmkRnQADXByb2R1Y3RQcmVmaXhzcQB+AAxK8y7HdAAIaXRlcmF0b3JzcQB+AAwGVVQjdAAZZ2V0Q291bnRBdE5vcm1hbGl6ZWRJbmRleHNxAH4ADAfum0R0AAxTbmFwc2hvdFR5cGVzcQB+AAxmY8MqdAAJbm90aWZ5QWxsc3EAfgAMxOoHA3QAFmxvd2VzdERpc2Nlcm5pYmxlVmFsdWVzcQB+AAwnwbtTdAAecGVyY2VudGlsZVRpY2tzUGVySGFsZkRpc3RhbmNlc3EAfgAMRb9MoXQAFHJlY29yZFZhbHVlV2l0aENvdW50c3EAfgAMUTrEFnQACWhpc3RvZ3JhbXNxAH4ADEbKLbN0AAxpc0F1dG9SZXNpemVzcQB+AAwCxJiWdAAPdXBkYXRlZE1heFZhbHVlc3EAfgAMBACRRXQAEWFkZFRvQ291bnRBdEluZGV4c3EAfgAMdQ/RInQADGlzSW5zdGFuY2VPZnNxAH4ADGIZlLB0AAZyZXNpemVzcQB+AAyCRcjJdAAdX2dldEVzdGltYXRlZEZvb3RwcmludEluQnl0ZXNzcQB+AAw/wILSdAAWbmV4dE5vbkVxdWl2YWxlbnRWYWx1ZXNxAH4ADEefYVF0ABhnZXRIaWdoZXN0VHJhY2thYmxlVmFsdWVzcQB+AAygDyM2dAAhaW50ZXJtZWRpYXRlVW5jb21wcmVzc2VkQnl0ZUFycmF5c3EAfgAMmALTZHQAEnN1YkJ1Y2tldEhhbGZDb3VudHNxAH4ADH4J0LR0ABdMb2dhcml0aG1pY0J1Y2tldFZhbHVlc3NxAH4ADLnn8L10ABV1cGRhdGVNaW5Ob25aZXJvVmFsdWVzcQB+AAxm68YidAAIU25hcHNob3RzcQB+AAzDcjlqdAAhc2hpZnRMb3dlc3RIYWxmQnVja2V0Q29udGVudHNMZWZ0c3EAfgAMNSXV3nQABjxpbml0PnNxAH4ADKdA4at0AAVtZXJnZXNxAH4ADHOYJuJ0ABN2YWx1ZXNBcmVFcXVpdmFsZW50c3EAfgAMtp3r/nQAImdldE5lZWRlZFBheWxvYWRCeXRlQnVmZmVyQ2FwYWNpdHlzcQB+AAyAOgMLdAASZ2V0TWluTm9uWmVyb1ZhbHVlc3EAfgAMM+vVp3QAEWdldFN1YkJ1Y2tldEluZGV4c3EAfgAMybu4CHQAC2dldE1heFZhbHVlc3EAfgAM9br9C3QADWVzdGFibGlzaFNpemVzcQB+AAxT2Cw8dAADbWF4c3EAfgAMyOr6t3QAEXNldFN0YXJ0VGltZVN0YW1wc3EAfgAMmwMYZHQADmNvbXBhY3RSZWNvcmRzc3EAfgAMgRZDNXQAHXNoaWZ0Tm9ybWFsaXppbmdJbmRleEJ5T2Zmc2V0c3EAfgAMvLX+BnQAFnJlY29yZGVkVmFsdWVzSXRlcmF0b3JzcQB+AAxqxjr0dAAFYXBwbHlzcQB+AAyqq0R9dAAHY2xlYW51cHNxAH4ADE5/9eZ0ABVsb3dlc3RFcXVpdmFsZW50VmFsdWVzcQB+AAz9CqlvdAAGc2V0VGFnc3EAfgAMyVapsnQAI2NvcHlDb3JyZWN0ZWRGb3JDb29yZGluYXRlZE9taXNzaW9uc3EAfgAMtRECbXQAGWZpbGxCdWZmZXJGcm9tQ291bnRzQXJyYXlzcQB+AAxmVarodAAOUmVjb3JkZWRWYWx1ZXNzcQB+AAw900p/dAAWbm9ybWFsaXppbmdJbmRleE9mZnNldHNxAH4ADBARtGZ0AAtidWNrZXRDb3VudHNxAH4ADM2mTU90AAI9PXNxAH4ADF5v2PZ0AAlBbGxWYWx1ZXNzcQB+AAyQe9aOdAAcb3V0cHV0UGVyY2VudGlsZURpc3RyaWJ1dGlvbnNxAH4ADL4zUk10AAZSZWNvcmRzcQB+AAziVOdDdAAGdGhpcyQwc3EAfgAMhJL0CHQABWNsb25lc3EAfgAM0slyIHQAEnBlcmNlbnRpbGVJdGVyYXRvcnNxAH4ADPnfu790AAphdXRvUmVzaXplc3EAfgAMhf99D3QAG2dldExlbmd0aEZvck51bWJlck9mQnVja2V0c3NxAH4ADEe8beN0AAdnZXRNZWFuc3EAfgAMSQjGbHQAFmNvdW50RnJvbUNvbXBhY3RSZWNvcmRzcQB+AAxp+GTvdAAZc2V0Q291bnRBdE5vcm1hbGl6ZWRJbmRleHNxAH4ADCsya2N0AAYkaW5pdCRzcQB+AAyQEL1ddAAIY29weUludG9zcQB+AAyY3+vNdAANcmVzZXRNYXhWYWx1ZXNxAH4ADNRCYl50AA5yZWNvcmRlZFZhbHVlc3NxAH4ADKsmW990AA1jb21wYWN0UmVjb3Jkc3EAfgAMQ7gFBHQACnRvdGFsQ291bnRzcQB+AAybnG6ydAAGZ2V0VGFnc3EAfgAM+fIq8XQADmNvcHkkZGVmYXVsdCQzc3EAfgAMQsoCI3QABGNvcHlzcQB+AAwXgu57dAAFcmVzZXRzcQB+AAzyCv3PdAAGY291bnRzc3EAfgAMYMFoN3QAF2xvZ2FyaXRobWljQnVja2V0VmFsdWVzc3EAfgAM7SwtiHQACHRvU3RyaW5nc3EAfgAMJzAmtHQADlNjYWxlZFNuYXBzaG90c3EAfgAM+9ZDbnQAEkNvbXBhY3RIZHJTbmFwc2hvdHNxAH4ADLU+5Pt0AA9hZGRUb1RvdGFsQ291bnRzcQB+AAz0J97PdAACIT1zcQB+AAwe/1gndAANc3ViQnVja2V0TWFza3NxAH4ADE3EXIB0ABd2YWx1ZVVuaXRzSW5GaXJzdEJ1Y2tldHNxAH4ADOa8Tih0ABtzdWJCdWNrZXRIYWxmQ291bnRNYWduaXR1ZGVzcQB+AAxRBLv5dAAHY29sbGVjdHNxAH4ADPbyDiR0AAhtYXhWYWx1ZXNxAH4ADKRA7I90AAhpZGVudGl0eXNxAH4ADA8aXqt0AAhnZXRDbGFzc3NxAH4ADOegWkd0AA5jb3B5JGRlZmF1bHQkMXNxAH4ADAcFSxh0AAtyZWNvcmRWYWx1ZXNxAH4ADB2yNG10ABF1bml0TWFnbml0dWRlTWFza3NxAH4ADMSoGgJ0ABBzaGlmdFZhbHVlc1JpZ2h0c3EAfgAMm/5uPXQAD21pbk5vblplcm9WYWx1ZXNxAH4ADDUOail0AB5lbmNvZGVJbnRvQ29tcHJlc3NlZEJ5dGVCdWZmZXJzcQB+AAykKlB6dAAMSGRySGlzdG9ncmFtc3EAfgAMR665zXQADnZhbHVlRnJvbUluZGV4c3EAfgAMek0T83QAB2lzRW1wdHlzcQB+AAzoql/GdAAcZ2V0RXN0aW1hdGVkRm9vdHByaW50SW5CeXRlc3NxAH4ADNBnbnl0AAtjb3VudHNBcnJheXNxAH4ADM9Ad+d0AAJuZXNxAH4ADMPZAbB0AChhZGRXaGlsZUNvcnJlY3RpbmdGb3JDb29yZGluYXRlZE9taXNzaW9uc3EAfgAMYOcn6HQAA2FkZHNxAH4ADEGdxlt0ABpkZXRlcm1pbmVBcnJheUxlbmd0aE5lZWRlZHNxAH4ADDdzsxN0AAtjbGVhckNvdW50c3NxAH4ADMm4CBF0AB9yZWNvcmRWYWx1ZVdpdGhFeHBlY3RlZEludGVydmFsc3EAfgAMh+XjbnQAImludGVybWVkaWF0ZVVuY29tcHJlc3NlZEJ5dGVCdWZmZXJzcQB+AAxBtfdBdAAPcmVjb3Jkc0l0ZXJhdG9yc3EAfgAMGMOYHHQAEWNvdW50c0FycmF5TGVuZ3Roc3EAfgAMiYm9H3QAAmVxc3EAfgAMJyL9I3QAEmxpbmVhckJ1Y2tldFZhbHVlc3NxAH4ADJA7Hi90AA9wcm9kdWN0SXRlcmF0b3JzcQB+AAxZ6JVndAADc3Vtc3EAfgAMPJnZonQADXNldFRvdGFsQ291bnRzcQB+AAynVoZVdAAGcmVjb3Jkc3EAfgAMWNnKHHQADXNldEF1dG9SZXNpemVzcQB+AAyHt3QBdAACIyNzcQB+AAyjghQmdAAJYWxsVmFsdWVzc3EAfgAMqaDVpXQACGZpbmFsaXplc3EAfgAMyP6SxHQAC3NwbGl0ZXJhdG9yc3EAfgAMdxuEBHQADnByb2R1Y3RFbGVtZW50c3EAfgAMGYQ8OXQACGhhc2hDb2Rlc3EAfgAM3b4minQAD2dldEVuZFRpbWVTdGFtcHNxAH4ADAZLQrx0AAVsZXZlbHNxAH4ADMD8lU90ABBjb3VudHNBcnJheUluZGV4c3EAfgAMeHI0FHQAFWdldENvdW50QmV0d2VlblZhbHVlc3NyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAZzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+Aal4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ACFrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5IaXN0b2dyYW11cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4BwXNyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgGpTAAJaW5oZXJpdGVkcQB+AalMAAdwYXJlbnRzcQB+Aal4cQB+AcZzcQB+AcF1cQB+AaQAAAAAc3EAfgHBdXEAfgGkAAAAAHNxAH4BwXVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAADc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4BxXQACkluc3RydW1lbnRzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AcVzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAARzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABWthbW9uc3EAfgHedAAGbWV0cmljc3EAfgHedAAKaW5zdHJ1bWVudHNyAA54c2J0aS5hcGkuVGhpc9sJ7abMWkBcAgAAeHEAfgHfc3EAfgHSdAAGT2JqZWN0c3EAfgHWc3EAfgHZdXEAfgHcAAAAA3NxAH4B3nQABGphdmFzcQB+Ad50AARsYW5ncQB+AedzcQB+AdJ0AANBbnlzcQB+AdZzcQB+Adl1cQB+AdwAAAACc3EA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
kamon.metric.instrument.Instrument -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwqiLBPAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAApc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwvfP99nQABm5vdGlmeXNxAH4ADGEUfCJ0AAVHYXVnZXNxAH4ADEPxWtZ0AAR3YWl0c3EAfgAM6PeRVXQADSRhc0luc3RhbmNlT2ZzcQB+AAzh8A5ldAAJSGlzdG9ncmFtc3EAfgAM2QaGVXQADHByb2R1Y3RBcml0eXNxAH4ADGZLfut0AAZlcXVhbHNzcQB+AAzbnCp5dAAFc2NhbGVzcQB+AAzJP2ZYdAAMYXNJbnN0YW5jZU9mc3EAfgAMnmwXcnQADHN5bmNocm9uaXplZHNxAH4ADI4MQV90ABFDb2xsZWN0aW9uQ29udGV4dHNxAH4ADP2sfPt0AA0kaXNJbnN0YW5jZU9mc3EAfgAMGPom53QABmJ1ZmZlcnNxAH4ADPeYAOF0AAhjYW5FcXVhbHNxAH4ADDQbC7N0AA1wcm9kdWN0UHJlZml4c3EAfgAM3WlD1XQADFNuYXBzaG90VHlwZXNxAH4ADG+E4J10AAlub3RpZnlBbGxzcQB+AAyC1+PJdAAMaXNJbnN0YW5jZU9mc3EAfgAMJ6MgV3QADU1pbk1heENvdW50ZXJzcQB+AAxpWSomdAAFbWVyZ2VzcQB+AAxGJLRudAASSW5zdHJ1bWVudFNuYXBzaG90c3EAfgAMi1GHEnQABWFwcGx5c3EAfgAMR73wR3QAB2NsZWFudXBzcQB+AAxs3OLsdAACPT1zcQB+AAy016k9dAAFY2xvbmVzcQB+AAwFLo/JdAAPSW5zdHJ1bWVudFR5cGVzc3EAfgAMTSkgU3QABiRpbml0JHNxAH4ADOp4mu10AAh0b1N0cmluZ3NxAH4ADJEUgJt0AAIhPXNxAH4ADNJy5ot0AAdjb2xsZWN0c3EAfgAMA86F4nQACGdldENsYXNzc3EAfgAMjgNhtnQAB0NvdW50ZXJzcQB+AAzcDcrFdAAOSW5zdHJ1bWVudFR5cGVzcQB+AAwbL9bqdAACbmVzcQB+AAwv2+HBdAAKSW5zdHJ1bWVudHNxAH4ADGuWjkt0AAJlcXNxAH4ADKQyps50AA9wcm9kdWN0SXRlcmF0b3JzcQB+AAwpY8pRdAACIyNzcQB+AAwI0qhFdAAIZmluYWxpemVzcQB+AAx+7tN+dAAOcHJvZHVjdEVsZW1lbnRzcQB+AAyWIsOMdAAIaGFzaENvZGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAGc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgBpeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEXhzYnRpLmFwaS5Qcml2YXRlU6lggSbp1T4CAAB4cgATeHNidGkuYXBpLlF1YWxpZmllZKq0Xe9UsW0YAgABTAAJcXVhbGlmaWVydAAVTHhzYnRpL2FwaS9RdWFsaWZpZXI7eHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwc3IAFXhzYnRpLmFwaS5JZFF1YWxpZmllcreHEPQ9sm21AgABTAAFdmFsdWVxAH4ADXhyABN4c2J0aS5hcGkuUXVhbGlmaWVys3iUqevWWycCAAB4cHQABWthbW9udXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ACJrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5JbnN0cnVtZW50dXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AIdzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gA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
kamon.metric.instrument.InstrumentFactory -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwT8RXSQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAArc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwl2/njXQABm5vdGlmeXNxAH4ADHSYtwh0AAR3YWl0c3EAfgAMoile0nQAGWNyZWF0ZUhpc3RvZ3JhbSRkZWZhdWx0JDJzcQB+AAyraOaudAAOY29weSRkZWZhdWx0JDJzcQB+AAxamdTIdAANJGFzSW5zdGFuY2VPZnNxAH4ADOzlUDh0AAhkZWZhdWx0c3NxAH4ADLaYXCZ0AAxwcm9kdWN0QXJpdHlzcQB+AAwg2U9idAAGZXF1YWxzc3EAfgAMDm6u73QADGFzSW5zdGFuY2VPZnNxAH4ADEcR8qd0AAxzeW5jaHJvbml6ZWRzcQB+AAxpA/I6dAAVY3JlYXRlR2F1Z2UkZGVmYXVsdCQzc3EAfgAMpVkYA3QADSRpc0luc3RhbmNlT2ZzcQB+AAxazUw6dAAIY2FuRXF1YWxzcQB+AAxeRyZEdAALY3JlYXRlR2F1Z2VzcQB+AAz4rk6WdAANcHJvZHVjdFByZWZpeHNxAH4ADDKnyC90AAlub3RpZnlBbGxzcQB+AAzLtUtNdAAMaXNJbnN0YW5jZU9mc3EAfgAMT49mH3QAFWNyZWF0ZUdhdWdlJGRlZmF1bHQkMnNxAH4ADGZ1TPB0AAY8aW5pdD5zcQB+AAxoxeCldAAdY3JlYXRlTWluTWF4Q291bnRlciRkZWZhdWx0JDJzcQB+AAzdGIf5dAATY3JlYXRlTWluTWF4Q291bnRlcnNxAH4ADBaeF250AA1jcmVhdGVDb3VudGVyc3EAfgAMacth5HQACXNjaGVkdWxlcnNxAH4ADD3roqZ0AAI9PXNxAH4ADN7kWCt0AAVjbG9uZXNxAH4ADCyPZ/x0AAYkaW5pdCRzcQB+AAwukHSfdAAPY3JlYXRlSGlzdG9ncmFtc3EAfgAMA0MgSnQADmNvcHkkZGVmYXVsdCQzc3EAfgAMuoNqgHQABGNvcHlzcQB+AAyeN52pdAAIdG9TdHJpbmdzcQB+AAzNjeBxdAAOY29uZmlndXJhdGlvbnNzcQB+AAyMVFI8dAACIT1zcQB+AAyM/yEpdAARSW5zdHJ1bWVudEZhY3RvcnlzcQB+AAxME1SydAAIZ2V0Q2xhc3NzcQB+AAzhwWx7dAAOY29weSRkZWZhdWx0JDFzcQB+AAzQUgEHdAAdY3JlYXRlTWluTWF4Q291bnRlciRkZWZhdWx0JDNzcQB+AAzuF2BNdAACbmVzcQB+AAwPq4nzdAACZXFzcQB+AAz6w/7odAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMAhFCZnQAAiMjc3EAfgAMZ1j9p3QACGZpbmFsaXplc3EAfgAMJJVGFXQADnByb2R1Y3RFbGVtZW50c3EAfgAM9qskmXQACGhhc2hDb2Rlc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4AbXhyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AA14cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAHQAKWthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lkluc3RydW1lbnRGYWN0b3J5dXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AIVzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AbUwACWluaGVyaXRlZHEAfgBtTAAHcGFyZW50c3EAfgBteHEAfgCKc3EAfgCFdXEAfgBoAAAAAHNxAH4AhXVxAH4AaAAAAABzcQB+AIV1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAABnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AIl0AAxTZXJpYWxpemFibGVzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AIlzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAAJzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABXNjYWxhc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AKNzcQB+AJZxAH4AmXNxAH4AmnNxAH4AnXVxAH4AoAAAAANzcQB+AKJ0AARqYXZhc3EAfgCidAACaW9xAH4Ap3NxAH4AlnQAB1Byb2R1Y3RxAH4AnHNxAH4AlnQABkVxdWFsc3EAfgCcc3EAfgCWdAAGT2JqZWN0c3EAfgCac3EAfgCddXEAfgCgAAAAA3NxAH4AonEAfgCtc3EAfgCidAAEbGFuZ3EAfgCnc3EAfgCWdAADQW55cQB+AJx1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+AMB0ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4AwHQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAULTYmhP3O4tPwYyU0DESXCsUrSLc=
kamon.metric.instrument.InstrumentFactory$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwT8RXSQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAArc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwl2/njXQABm5vdGlmeXNxAH4ADHSYtwh0AAR3YWl0c3EAfgAMoile0nQAGWNyZWF0ZUhpc3RvZ3JhbSRkZWZhdWx0JDJzcQB+AAyraOaudAAOY29weSRkZWZhdWx0JDJzcQB+AAxamdTIdAANJGFzSW5zdGFuY2VPZnNxAH4ADOzlUDh0AAhkZWZhdWx0c3NxAH4ADLaYXCZ0AAxwcm9kdWN0QXJpdHlzcQB+AAwg2U9idAAGZXF1YWxzc3EAfgAMDm6u73QADGFzSW5zdGFuY2VPZnNxAH4ADEcR8qd0AAxzeW5jaHJvbml6ZWRzcQB+AAxpA/I6dAAVY3JlYXRlR2F1Z2UkZGVmYXVsdCQzc3EAfgAMpVkYA3QADSRpc0luc3RhbmNlT2ZzcQB+AAxazUw6dAAIY2FuRXF1YWxzcQB+AAxeRyZEdAALY3JlYXRlR2F1Z2VzcQB+AAz4rk6WdAANcHJvZHVjdFByZWZpeHNxAH4ADDKnyC90AAlub3RpZnlBbGxzcQB+AAzLtUtNdAAMaXNJbnN0YW5jZU9mc3EAfgAMT49mH3QAFWNyZWF0ZUdhdWdlJGRlZmF1bHQkMnNxAH4ADGZ1TPB0AAY8aW5pdD5zcQB+AAxoxeCldAAdY3JlYXRlTWluTWF4Q291bnRlciRkZWZhdWx0JDJzcQB+AAzdGIf5dAATY3JlYXRlTWluTWF4Q291bnRlcnNxAH4ADBaeF250AA1jcmVhdGVDb3VudGVyc3EAfgAMacth5HQACXNjaGVkdWxlcnNxAH4ADD3roqZ0AAI9PXNxAH4ADN7kWCt0AAVjbG9uZXNxAH4ADCyPZ/x0AAYkaW5pdCRzcQB+AAwukHSfdAAPY3JlYXRlSGlzdG9ncmFtc3EAfgAMA0MgSnQADmNvcHkkZGVmYXVsdCQzc3EAfgAMuoNqgHQABGNvcHlzcQB+AAyeN52pdAAIdG9TdHJpbmdzcQB+AAzNjeBxdAAOY29uZmlndXJhdGlvbnNzcQB+AAyMVFI8dAACIT1zcQB+AAyM/yEpdAARSW5zdHJ1bWVudEZhY3RvcnlzcQB+AAxME1SydAAIZ2V0Q2xhc3NzcQB+AAzhwWx7dAAOY29weSRkZWZhdWx0JDFzcQB+AAzQUgEHdAAdY3JlYXRlTWluTWF4Q291bnRlciRkZWZhdWx0JDNzcQB+AAzuF2BNdAACbmVzcQB+AAwPq4nzdAACZXFzcQB+AAz6w/7odAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMAhFCZnQAAiMjc3EAfgAMZ1j9p3QACGZpbmFsaXplc3EAfgAMJJVGFXQADnByb2R1Y3RFbGVtZW50c3EAfgAM9qskmXQACGhhc2hDb2Rlc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4AbXhyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AA14cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAHQAKWthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lkluc3RydW1lbnRGYWN0b3J5dXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AIVzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AbUwACWluaGVyaXRlZHEAfgBtTAAHcGFyZW50c3EAfgBteHEAfgCKc3EAfgCFdXEAfgBoAAAAAHNxAH4AhXVxAH4AaAAAAABzcQB+AIV1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAABnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AIl0AAxTZXJpYWxpemFibGVzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AIlzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAAJzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABXNjYWxhc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AKNzcQB+AJZxAH4AmXNxAH4AmnNxAH4AnXVxAH4AoAAAAANzcQB+AKJ0AARqYXZhc3EAfgCidAACaW9xAH4Ap3NxAH4AlnQAB1Byb2R1Y3RxAH4AnHNxAH4AlnQABkVxdWFsc3EAfgCcc3EAfgCWdAAGT2JqZWN0c3EAfgCac3EAfgCddXEAfgCgAAAAA3NxAH4AonEAfgCtc3EAfgCidAAEbGFuZ3EAfgCnc3EAfgCWdAADQW55cQB+AJx1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+AMB0ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4AwHQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAULTYmhP3O4tPwYyU0DESXCsUrSLc=
kamon.metric.instrument.InstrumentSnapshot -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwqiLBPAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAApc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwvfP99nQABm5vdGlmeXNxAH4ADGEUfCJ0AAVHYXVnZXNxAH4ADEPxWtZ0AAR3YWl0c3EAfgAM6PeRVXQADSRhc0luc3RhbmNlT2ZzcQB+AAzh8A5ldAAJSGlzdG9ncmFtc3EAfgAM2QaGVXQADHByb2R1Y3RBcml0eXNxAH4ADGZLfut0AAZlcXVhbHNzcQB+AAzbnCp5dAAFc2NhbGVzcQB+AAzJP2ZYdAAMYXNJbnN0YW5jZU9mc3EAfgAMnmwXcnQADHN5bmNocm9uaXplZHNxAH4ADI4MQV90ABFDb2xsZWN0aW9uQ29udGV4dHNxAH4ADP2sfPt0AA0kaXNJbnN0YW5jZU9mc3EAfgAMGPom53QABmJ1ZmZlcnNxAH4ADPeYAOF0AAhjYW5FcXVhbHNxAH4ADDQbC7N0AA1wcm9kdWN0UHJlZml4c3EAfgAM3WlD1XQADFNuYXBzaG90VHlwZXNxAH4ADG+E4J10AAlub3RpZnlBbGxzcQB+AAyC1+PJdAAMaXNJbnN0YW5jZU9mc3EAfgAMJ6MgV3QADU1pbk1heENvdW50ZXJzcQB+AAxpWSomdAAFbWVyZ2VzcQB+AAxGJLRudAASSW5zdHJ1bWVudFNuYXBzaG90c3EAfgAMi1GHEnQABWFwcGx5c3EAfgAMR73wR3QAB2NsZWFudXBzcQB+AAxs3OLsdAACPT1zcQB+AAy016k9dAAFY2xvbmVzcQB+AAwFLo/JdAAPSW5zdHJ1bWVudFR5cGVzc3EAfgAMTSkgU3QABiRpbml0JHNxAH4ADOp4mu10AAh0b1N0cmluZ3NxAH4ADJEUgJt0AAIhPXNxAH4ADNJy5ot0AAdjb2xsZWN0c3EAfgAMA86F4nQACGdldENsYXNzc3EAfgAMjgNhtnQAB0NvdW50ZXJzcQB+AAzcDcrFdAAOSW5zdHJ1bWVudFR5cGVzcQB+AAwbL9bqdAACbmVzcQB+AAwv2+HBdAAKSW5zdHJ1bWVudHNxAH4ADGuWjkt0AAJlcXNxAH4ADKQyps50AA9wcm9kdWN0SXRlcmF0b3JzcQB+AAwpY8pRdAACIyNzcQB+AAwI0qhFdAAIZmluYWxpemVzcQB+AAx+7tN+dAAOcHJvZHVjdEVsZW1lbnRzcQB+AAyWIsOMdAAIaGFzaENvZGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAGc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgBpeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEXhzYnRpLmFwaS5Qcml2YXRlU6lggSbp1T4CAAB4cgATeHNidGkuYXBpLlF1YWxpZmllZKq0Xe9UsW0YAgABTAAJcXVhbGlmaWVydAAVTHhzYnRpL2FwaS9RdWFsaWZpZXI7eHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwc3IAFXhzYnRpLmFwaS5JZFF1YWxpZmllcreHEPQ9sm21AgABTAAFdmFsdWVxAH4ADXhyABN4c2J0aS5hcGkuUXVhbGlmaWVys3iUqevWWycCAAB4cHQABWthbW9udXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ACJrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5JbnN0cnVtZW50dXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AIdzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AaUwACWluaGVyaXRlZHEAfgBpTAAHcGFyZW50c3EAfgBpeHEAfgCMc3EAfgCHdXEAfgBkAAAAAHNxAH4Ah3VxAH4AZAAAAABzcQB+AId1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAAnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AIt0AAZPYmplY3RzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AItzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABGphdmFzcQB+AKR0AARsYW5nc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AKVzcQB+AJh0AANBbnlzcQB+AJxzcQB+AJ91cQB+AKIAAAACc3EAfgCkdAAFc2NhbGFxAH4Aq3NxAH4AZnNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cQB+AHR1cQB+AHoAAAAAc3EAfgB8AXQAKmthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lkluc3RydW1lbnRTbmFwc2hvdHVxAH4AfwAAAABxAH4Ag3VxAH4AhQAAAABzcQB+AIdxAH4AjXNxAH4Ah3NxAH4Aj3NxAH4Ah3VxAH4AZAAAAABzcQB+AId1cQB+AGQAAAAAc3EAfgCHdXEAfgCWAAAAAnNxAH4AmHEAfgCbc3EAfgCcc3EAfgCfdXEAfgCiAAAAA3NxAH4ApHEAfgCnc3EAfgCkcQB+AKlxAH4Aq3NxAH4AmHEAfgCtc3EAfgCcc3EAfgCfdXEAfgCiAAAAAnNxAH4ApHEAfgCycQB+AKtzcQB+AGZxAH4AtXVxAH4AegAAAABzcQB+AHwBdAApa2Ftb24ubWV0cmljLmluc3RydW1lbnQuQ29sbGVjdGlvbkNvbnRleHR1cQB+AH8AAAAAcQB+AIN1cQB+AIUAAAAAc3EAfgCHcQB+AI1zcQB+AIdzcQB+AI9zcQB+AId1cQB+AGQAAAAAc3EAfgCHdXEAfgBkAAAAAHNxAH4Ah3VxAH4AlgAAAAJzcQB+AJhxAH4Am3NxAH4AnHNxAH4An3VxAH4AogAAAANzcQB+AKRxAH4Ap3NxAH4ApHEAfgCpcQB+AKtzcQB+AJhxAH4ArXNxAH4AnHNxAH4An3VxAH4AogAAAAJzcQB+AKRxAH4AsnEAfgCrc3EAfgBmcQB+ALV1cQB+AHoAAAAAc3EAfgB8AHQAKWthbW9uLm1ldHJpYy5pbnN0cnVtZW50LkNvbGxlY3Rpb25Db250ZXh0dXEAfgB/AAAAAH5xAH4AgXQABk1vZHVsZXVxAH4AhQAAAABzcQB+AIdxAH4AjXNxAH4Ah3NxAH4Aj3NxAH4Ah3VxAH4AZAAAAABzcQB+AId1cQB+AGQAAAAAc3EAfgCHdXEAfgCWAAAAAnNxAH4AmHEAfgCbc3EAfgCcc3EAfgCfdXEAfgCiAAAAA3NxAH4ApHEAfgCnc3EAfgCkcQB+AKlxAH4Aq3NxAH4AmHEAfgCtc3EAfgCcc3EAfgCfdXEAfgCiAAAAAnNxAH4ApHEAfgCycQB+AKtzcQB+AGZxAH4AtXVxAH4AegAAAABzcQB+AHwJdAAma2Ftb24ubWV0cmljLmluc3RydW1lbnQuSW5zdHJ1bWVudFR5cGV1cQB+AH8AAAAAcQB+AIN1cQB+AIUAAAAAc3EAfgCHcQB+AI1zcQB+AIdzcQB+AI9zcQB+AId1cQB+AGQAAAAAc3EAfgCHdXEAfgBkAAAAAHNxAH4Ah3VxAH4AlgAAAAJzcQB+AJhxAH4Am3NxAH4AnHNxAH4An3VxAH4AogAAAANzcQB+AKRxAH4Ap3NxAH4ApHEAfgCpcQB+AKtzcQB+AJhxAH4ArXNxAH4AnHNxAH4An3VxAH4AogAAAAJzcQB+AKRxAH4AsnEAfgCrc3EAfgBmcQB+ALV1cQB+AHoAAAAAc3EAfgB8AHQAJ2thbW9uLm1ldHJpYy5pbnN0cnVtZW50Lkluc3RydW1lbnRUeXBlc3VxAH4AfwAAAABxAH4A7nVxAH4AhQAAAABzcQB+AIdxAH4AjXNxAH4Ah3NxAH4Aj3NxAH4Ah3VxAH4AZAAAAABzcQB+AId1cQB+AGQAAAAAc3EAfgCHdXEAfgCWAAAAAnNxAH4AmHEAfgCbc3EAfgCcc3EAfgCfdXEAfgCiAAAAA3NxAH4ApHEAfgCnc3EAfgCkcQB+AKlxAH4Aq3NxAH4AmHEAfgCtc3EAfgCcc3EAfgCfdXEAfgCiAAAAAnNxAH4ApHEAfgCycQB+AKt1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+ATt0ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4BO3QABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUZKjcnVu3iStLWJIGNNTEIHrKBoQ=
kamon.metric.instrument.Memory -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwmSIPegAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA2c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwBHed63QABm5vdGlmeXNxAH4ADM0GEgN0AAd1bmFwcGx5c3EAfgAMGpL1OnQADE1pY3Jvc2Vjb25kc3NxAH4ADNku8Ih0AARuYW1lc3EAfgAMl/0LenQABHdhaXRzcQB+AAyBt43JdAAOY29weSRkZWZhdWx0JDJzcQB+AAyEw7wldAANJGFzSW5zdGFuY2VPZnNxAH4ADJaXNG90AAZNZW1vcnlzcQB+AAwF5IzodAAJR2lnYUJ5dGVzc3EAfgAM33rhzXQADHByb2R1Y3RBcml0eXNxAH4ADN20Sqd0AAZlcXVhbHNzcQB+AAxUPkekdAAFc2NhbGVzcQB+AAy1rpkAdAAMYXNJbnN0YW5jZU9mc3EAfgAM2l1E0XQAAVVzcQB+AAw5NVjAdAAFQnl0ZXNzcQB+AAwhAJhSdAAMc3luY2hyb25pemVkc3EAfgAMZdJfTXQABWxhYmVsc3EAfgAMwXKSA3QADSRpc0luc3RhbmNlT2ZzcQB+AAz055iRdAAJaXNVbmtub3duc3EAfgAMkTiBvHQACUtpbG9CeXRlc3NxAH4ADHe6/y50AAlNZWdhQnl0ZXNzcQB+AAzTdDosdAAIY2FuRXF1YWxzcQB+AAzSLFmedAAMTWlsbGlzZWNvbmRzc3EAfgAMNNXB23QABmlzVGltZXNxAH4ADMYb6Kh0AA1wcm9kdWN0UHJlZml4c3EAfgAMIt9LknQACW5vdGlmeUFsbHNxAH4ADIDCGnt0AAZmYWN0b3JzcQB+AAyuRITddAAMaXNJbnN0YW5jZU9mc3EAfgAMKCvBD3QABjxpbml0PnNxAH4ADP5RSLx0AAVhcHBseXNxAH4ADPZCNC10AAI9PXNxAH4ADGMTwkZ0AAVjbG9uZXNxAH4ADGlHlnx0AAV1bml0c3NxAH4ADHWtnE50AAYkaW5pdCRzcQB+AAzulGJ9dAAEY29weXNxAH4ADCW3vjd0AAh0b1N0cmluZ3NxAH4ADB+tFo90AAh0cnlTY2FsZXNxAH4ADCGVcgJ0AAtOYW5vc2Vjb25kc3NxAH4ADBxTQtF0AAIhPXNxAH4ADMNYNPV0AAhnZXRDbGFzc3NxAH4ADGrwyLZ0AA5jb3B5JGRlZmF1bHQkMXNxAH4ADH1j/gp0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4ADOjG7nB0AAhpc01lbW9yeXNxAH4ADP9OaNV0AAdVbmtub3duc3EAfgAM90OwZHQAAm5lc3EAfgAM4yzKr3QAAmVxc3EAfgAM1NQZz3QABFRpbWVzcQB+AAz6NB87dAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMlky9g3QAAiMjc3EAfgAMlXqeCnQACGZpbmFsaXplc3EAfgAMfSs2d3QAB1NlY29uZHNzcQB+AAzFJ7cddAAOcHJvZHVjdEVsZW1lbnRzcQB+AAywkyCPdAAIaGFzaENvZGVzcQB+AAwDw/bidAAIY2FuU2NhbGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAGc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgCDeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHABdAApa2Ftb24ubWV0cmljLmluc3RydW1lbnQuVW5pdE9mTWVhc3VyZW1lbnR1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlw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AH4AwXEAfgEnc3EAfgCAcQB+AI11cQB+AI4AAAAAc3EAfgCQAHQAHmthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lk1lbW9yeXVxAH4AkwAAAABxAH4A6HVxAH4AmQAAAABzcQB+AJtxAH4AoXNxAH4Am3NxAH4Ao3NxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AH4AAAAAc3EAfgCbdXEAfgCqAAAAB3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAAnNxAH4AuHEAfgDGcQB+AL9zcQB+AKxxAH4A9XNxAH4AsHNxAH4As3VxAH4AtgAAAANzcQB+ALhxAH4Au3NxAH4AuHQAAmlvcQB+AL9zcQB+AKxxAH4BAnEAfgFJc3EAfgCsdAAGRXF1YWxzcQB+AUlzcQB+AKx0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4AsHNxAH4As3VxAH4AtgAAAARzcQB+ALh0AAVrYW1vbnNxAH4AuHQABm1ldHJpY3NxAH4AuHQACmluc3RydW1lbnRxAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AUlzcQB+AIBxAH4AjXVxAH4AjgAAAABzcQB+AJAAdAAea2Ftb24ubWV0cmljLmluc3RydW1lbnQuTWVtb3J5dXEAfgCTAAAAAHEAfgDMdXEAfgCZAAAAAHNxAH4Am3EAfgChc3EAfgCbc3EAfgCjc3EAfgCbdXEAfgB+AAAAAHNxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AKoAAAAEc3EAfgCscQB+APVzcQB+ALBzcQB+ALN1cQB+ALYAAAACc3EAfgC4cQB+AMZxAH4Av3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4dAACaW9xAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AXl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+AY10ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4BjXQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUwLq72veUMXa0Z+IcT8UUkxWAoVk=
kamon.metric.instrument.Memory$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwmSIPegAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA2c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwBHed63QABm5vdGlmeXNxAH4ADM0GEgN0AAd1bmFwcGx5c3EAfgAMGpL1OnQADE1pY3Jvc2Vjb25kc3NxAH4ADNku8Ih0AARuYW1lc3EAfgAMl/0LenQABHdhaXRzcQB+AAyBt43JdAAOY29weSRkZWZhdWx0JDJzcQB+AAyEw7wldAANJGFzSW5zdGFuY2VPZnNxAH4ADJaXNG90AAZNZW1vcnlzcQB+AAwF5IzodAAJR2lnYUJ5dGVzc3EAfgAM33rhzXQADHByb2R1Y3RBcml0eXNxAH4ADN20Sqd0AAZlcXVhbHNzcQB+AAxUPkekdAAFc2NhbGVzcQB+AAy1rpkAdAAMYXNJbnN0YW5jZU9mc3EAfgAM2l1E0XQAAVVzcQB+AAw5NVjAdAAFQnl0ZXNzcQB+AAwhAJhSdAAMc3luY2hyb25pemVkc3EAfgAMZdJfTXQABWxhYmVsc3EAfgAMwXKSA3QADSRpc0luc3RhbmNlT2ZzcQB+AAz055iRdAAJaXNVbmtub3duc3EAfgAMkTiBvHQACUtpbG9CeXRlc3NxAH4ADHe6/y50AAlNZWdhQnl0ZXNzcQB+AAzTdDosdAAIY2FuRXF1YWxzcQB+AAzSLFmedAAMTWlsbGlzZWNvbmRzc3EAfgAMNNXB23QABmlzVGltZXNxAH4ADMYb6Kh0AA1wcm9kdWN0UHJlZml4c3EAfgAMIt9LknQACW5vdGlmeUFsbHNxAH4ADIDCGnt0AAZmYWN0b3JzcQB+AAyuRITddAAMaXNJbnN0YW5jZU9mc3EAfgAMKCvBD3QABjxpbml0PnNxAH4ADP5RSLx0AAVhcHBseXNxAH4ADPZCNC10AAI9PXNxAH4ADGMTwkZ0AAVjbG9uZXNxAH4ADGlHlnx0AAV1bml0c3NxAH4ADHWtnE50AAYkaW5pdCRzcQB+AAzulGJ9dAAEY29weXNxAH4ADCW3vjd0AAh0b1N0cmluZ3NxAH4ADB+tFo90AAh0cnlTY2FsZXNxAH4ADCGVcgJ0AAtOYW5vc2Vjb25kc3NxAH4ADBxTQtF0AAIhPXNxAH4ADMNYNPV0AAhnZXRDbGFzc3NxAH4ADGrwyLZ0AA5jb3B5JGRlZmF1bHQkMXNxAH4ADH1j/gp0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4ADOjG7nB0AAhpc01lbW9yeXNxAH4ADP9OaNV0AAdVbmtub3duc3EAfgAM90OwZHQAAm5lc3EAfgAM4yzKr3QAAmVxc3EAfgAM1NQZz3QABFRpbWVzcQB+AAz6NB87dAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMlky9g3QAAiMjc3EAfgAMlXqeCnQACGZpbmFsaXplc3EAfgAMfSs2d3QAB1NlY29uZHNzcQB+AAzFJ7cddAAOcHJvZHVjdEVsZW1lbnRzcQB+AAywkyCPdAAIaGFzaENvZGVzcQB+AAwDw/bidAAIY2FuU2NhbGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAGc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgCDeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHABdAApa2Ftb24ubWV0cmljLmluc3RydW1lbnQuVW5pdE9mTWVhc3VyZW1lbnR1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlw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AH4AwXEAfgEnc3EAfgCAcQB+AI11cQB+AI4AAAAAc3EAfgCQAHQAHmthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lk1lbW9yeXVxAH4AkwAAAABxAH4A6HVxAH4AmQAAAABzcQB+AJtxAH4AoXNxAH4Am3NxAH4Ao3NxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AH4AAAAAc3EAfgCbdXEAfgCqAAAAB3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAAnNxAH4AuHEAfgDGcQB+AL9zcQB+AKxxAH4A9XNxAH4AsHNxAH4As3VxAH4AtgAAAANzcQB+ALhxAH4Au3NxAH4AuHQAAmlvcQB+AL9zcQB+AKxxAH4BAnEAfgFJc3EAfgCsdAAGRXF1YWxzcQB+AUlzcQB+AKx0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4AsHNxAH4As3VxAH4AtgAAAARzcQB+ALh0AAVrYW1vbnNxAH4AuHQABm1ldHJpY3NxAH4AuHQACmluc3RydW1lbnRxAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AUlzcQB+AIBxAH4AjXVxAH4AjgAAAABzcQB+AJAAdAAea2Ftb24ubWV0cmljLmluc3RydW1lbnQuTWVtb3J5dXEAfgCTAAAAAHEAfgDMdXEAfgCZAAAAAHNxAH4Am3EAfgChc3EAfgCbc3EAfgCjc3EAfgCbdXEAfgB+AAAAAHNxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AKoAAAAEc3EAfgCscQB+APVzcQB+ALBzcQB+ALN1cQB+ALYAAAACc3EAfgC4cQB+AMZxAH4Av3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4dAACaW9xAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AXl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+AY10ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4BjXQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUwLq72veUMXa0Z+IcT8UUkxWAoVk=
kamon.metric.instrument.MinMaxCounter -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwVpB4ngAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAfc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwuJFgFnQABm5vdGlmeXNxAH4ADDdMkIx0ABNQYWRkZWRNaW5NYXhDb3VudGVyc3EAfgAMB+3wJ3QABHdhaXRzcQB+AAwXS6UvdAANJGFzSW5zdGFuY2VPZnNxAH4ADGq8iJF0AAZlcXVhbHNzcQB+AAwiwupmdAAMYXNJbnN0YW5jZU9mc3EAfgAMyFVVmnQADHN5bmNocm9uaXplZHNxAH4ADFqUMQh0AA0kaXNJbnN0YW5jZU9mc3EAfgAM4Iln+nQABmNyZWF0ZXNxAH4ADHpCPMp0ABVyZWZyZXNoVmFsdWVzU2NoZWR1bGVzcQB+AAzVsVkFdAANcmVmcmVzaFZhbHVlc3NxAH4ADMH2iwV0AAxTbmFwc2hvdFR5cGVzcQB+AAxzkCOYdAAJbm90aWZ5QWxsc3EAfgAMlVvKg3QADGlzSW5zdGFuY2VPZnNxAH4ADMYoVv50AA1NaW5NYXhDb3VudGVyc3EAfgAMJdsEuHQACWRlY3JlbWVudHNxAH4ADEl/0Bx0AAY8aW5pdD5zcQB+AAxREkxkdAAFYXBwbHlzcQB+AAzuS3atdAAHY2xlYW51cHNxAH4ADEN7fs10AAI9PXNxAH4ADLw2a9V0AAVjbG9uZXNxAH4ADEtjpNl0AAh0b1N0cmluZ3NxAH4ADKO6cUV0AAIhPXNxAH4ADM2zQ3l0AAdjb2xsZWN0c3EAfgAMTTJ3HHQACGdldENsYXNzc3EAfgAMQ7ZCVHQAAm5lc3EAfgAMrRBkjXQACWluY3JlbWVudHNxAH4ADKXnkNx0AAJlcXNxAH4ADBbvPAV0AAIjI3NxAH4ADPemAWJ0AAhmaW5hbGl6ZXNxAH4ADJfO4ex0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAANzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AFV4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ACVrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5NaW5NYXhDb3VudGVydXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AG1zcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AVUwACWluaGVyaXRlZHEAfgBVTAAHcGFyZW50c3EAfgBVeHEAfgByc3EAfgBtdXEAfgBQAAAAAHNxAH4AbXVxAH4AUAAAAABzcQB+AG11cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAA3NyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AHF0AApJbnN0cnVtZW50c3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgBxc3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAAEc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADXhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AAVrYW1vbnNxAH4AinQABm1ldHJpY3NxAH4AinQACmluc3RydW1lbnRzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4Ai3NxAH4AfnQABk9iamVjdHNxAH4AgnNxAH4AhXVxAH4AiAAAAANzcQB+AIp0AARqYXZhc3EAfgCKdAAEbGFuZ3EAfgCTc3EAfgB+dAADQW55c3EAfgCCc3EAfgCFdXEAfgCIAAAAAnNxAH4AinQABXNjYWxhcQB+AJNzcQB+AFJxAH4AX3VxAH4AYAAAAABzcQB+AGIAdAAla2Ftb24ubWV0cmljLmluc3RydW1lbnQuTWluTWF4Q291bnRlcnVxAH4AZQAAAAB+cQB+AGd0AAZNb2R1bGV1cQB+AGsAAAAAc3EAfgBtcQB+AHNzcQB+AG1zcQB+AHVzcQB+AG11cQB+AFAAAAAAc3EAfgBtdXEAfgBQAAAAAHNxAH4AbXVxAH4AfAAAAAJzcQB+AH5xAH4AlXNxAH4AgnNxAH4AhXVxAH4AiAAAAANzcQB+AIpxAH4AmnNxAH4AinEAfgCccQB+AJNzcQB+AH5xAH4AnnNxAH4AgnNxAH4AhXVxAH4AiAAAAAJzcQB+AIpxAH4Ao3EAfgCTc3EAfgBScQB+AF91cQB+AGAAAAAAc3EAfgBiAHQAK2thbW9uLm1ldHJpYy5pbnN0cnVtZW50LlBhZGRlZE1pbk1heENvdW50ZXJ1cQB+AGUAAAAAfnEAfgBndAAIQ2xhc3NEZWZ1cQB+AGsAAAAAc3EAfgBtcQB+AHNzcQB+AG1zcQB+AHVzcQB+AG11cQB+AFAAAAAAc3EAfgBtdXEAfgBQAAAAAHNxAH4AbXVxAH4AfAAAAARzcQB+AH50AA1NaW5NYXhDb3VudGVyc3EAfgCCc3EAfgCFdXEAfgCIAAAABHNxAH4AinQABWthbW9uc3EAfgCKdAAGbWV0cmljc3EAfgCKdAAKaW5zdHJ1bWVudHEAfgCTc3EAfgB+dAAKSW5zdHJ1bWVudHEAfgDTc3EAfgB+cQB+AJVzcQB+AIJzcQB+AIV1cQB+AIgAAAADc3EAfgCKcQB+AJpzcQB+AIpxAH4AnHEAfgCTc3EAfgB+cQB+AJ5zcQB+AIJzcQB+AIV1cQB+AIgAAAACc3EAfgCKcQB+AKNxAH4Ak3VyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAADc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQADGthbW9uLm1ldHJpY3NxAH4A63QAF2thbW9uLm1ldHJpYy5pbnN0cnVtZW50c3EAfgDrdAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABRgs0tOMImvgBfbokJV68/p4AfdmA==
kamon.metric.instrument.MinMaxCounter$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwVpB4ngAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAfc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwuJFgFnQABm5vdGlmeXNxAH4ADDdMkIx0ABNQYWRkZWRNaW5NYXhDb3VudGVyc3EAfgAMB+3wJ3QABHdhaXRzcQB+AAwXS6UvdAANJGFzSW5zdGFuY2VPZnNxAH4ADGq8iJF0AAZlcXVhbHNzcQB+AAwiwupmdAAMYXNJbnN0YW5jZU9mc3EAfgAMyFVVmnQADHN5bmNocm9uaXplZHNxAH4ADFqUMQh0AA0kaXNJbnN0YW5jZU9mc3EAfgAM4Iln+nQABmNyZWF0ZXNxAH4ADHpCPMp0ABVyZWZyZXNoVmFsdWVzU2NoZWR1bGVzcQB+AAzVsVkFdAANcmVmcmVzaFZhbHVlc3NxAH4ADMH2iwV0AAxTbmFwc2hvdFR5cGVzcQB+AAxzkCOYdAAJbm90aWZ5QWxsc3EAfgAMlVvKg3QADGlzSW5zdGFuY2VPZnNxAH4ADMYoVv50AA1NaW5NYXhDb3VudGVyc3EAfgAMJdsEuHQACWRlY3JlbWVudHNxAH4ADEl/0Bx0AAY8aW5pdD5zcQB+AAxREkxkdAAFYXBwbHlzcQB+AAzuS3atdAAHY2xlYW51cHNxAH4ADEN7fs10AAI9PXNxAH4ADLw2a9V0AAVjbG9uZXNxAH4ADEtjpNl0AAh0b1N0cmluZ3NxAH4ADKO6cUV0AAIhPXNxAH4ADM2zQ3l0AAdjb2xsZWN0c3EAfgAMTTJ3HHQACGdldENsYXNzc3EAfgAMQ7ZCVHQAAm5lc3EAfgAMrRBkjXQACWluY3JlbWVudHNxAH4ADKXnkNx0AAJlcXNxAH4ADBbvPAV0AAIjI3NxAH4ADPemAWJ0AAhmaW5hbGl6ZXNxAH4ADJfO4ex0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAANzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AFV4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ACVrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5NaW5NYXhDb3VudGVydXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AG1zcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AVUwACWluaGVyaXRlZHEAfgBVTAAHcGFyZW50c3EAfgBVeHEAfgByc3EAfgBtdXEAfgBQAAAAAHNxAH4AbXVxAH4AUAAAAABzcQB+AG11cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAA3NyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AHF0AApJbnN0cnVtZW50c3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgBxc3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAAEc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADXhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AAVrYW1vbnNxAH4AinQABm1ldHJpY3NxAH4AinQACmluc3RydW1lbnRzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4Ai3NxAH4AfnQABk9iamVjdHNxAH4AgnNxAH4AhXVxAH4AiAAAAANzcQB+AIp0AARqYXZhc3EAfgCKdAAEbGFuZ3EAfgCTc3EAfgB+dAADQW55c3EAfgCCc3EAfgCFdXEAfgCIAAAAAnNxAH4AinQABXNjYWxhcQB+AJNzcQB+AFJxAH4AX3VxAH4AYAAAAABzcQB+AGIAdAAla2Ftb24ubWV0cmljLmluc3RydW1lbnQuTWluTWF4Q291bnRlcnVxAH4AZQAAAAB+cQB+AGd0AAZNb2R1bGV1cQB+AGsAAAAAc3EAfgBtcQB+AHNzcQB+AG1zcQB+AHVzcQB+AG11cQB+AFAAAAAAc3EAfgBtdXEAfgBQAAAAAHNxAH4AbXVxAH4AfAAAAAJzcQB+AH5xAH4AlXNxAH4AgnNxAH4AhXVxAH4AiAAAAANzcQB+AIpxAH4AmnNxAH4AinEAfgCccQB+AJNzcQB+AH5xAH4AnnNxAH4AgnNxAH4AhXVxAH4AiAAAAAJzcQB+AIpxAH4Ao3EAfgCTc3EAfgBScQB+AF91cQB+AGAAAAAAc3EAfgBiAHQAK2thbW9uLm1ldHJpYy5pbnN0cnVtZW50LlBhZGRlZE1pbk1heENvdW50ZXJ1cQB+AGUAAAAAfnEAfgBndAAIQ2xhc3NEZWZ1cQB+AGsAAAAAc3EAfgBtcQB+AHNzcQB+AG1zcQB+AHVzcQB+AG11cQB+AFAAAAAAc3EAfgBtdXEAfgBQAAAAAHNxAH4AbXVxAH4AfAAAAARzcQB+AH50AA1NaW5NYXhDb3VudGVyc3EAfgCCc3EAfgCFdXEAfgCIAAAABHNxAH4AinQABWthbW9uc3EAfgCKdAAGbWV0cmljc3EAfgCKdAAKaW5zdHJ1bWVudHEAfgCTc3EAfgB+dAAKSW5zdHJ1bWVudHEAfgDTc3EAfgB+cQB+AJVzcQB+AIJzcQB+AIV1cQB+AIgAAAADc3EAfgCKcQB+AJpzcQB+AIpxAH4AnHEAfgCTc3EAfgB+cQB+AJ5zcQB+AIJzcQB+AIV1cQB+AIgAAAACc3EAfgCKcQB+AKNxAH4Ak3VyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAADc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQADGthbW9uLm1ldHJpY3NxAH4A63QAF2thbW9uLm1ldHJpYy5pbnN0cnVtZW50c3EAfgDrdAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABRgs0tOMImvgBfbokJV68/p4AfdmA==
kamon.metric.instrument.RefreshScheduler -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwLij5VgAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAec3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwAlRwGnQABm5vdGlmeXNxAH4ADA9uQW90AAZjYW5jZWxzcQB+AAyKxxaSdAAFcG9pbnRzcQB+AAyFgQi2dAAEd2FpdHNxAH4ADIB8CB90AA0kYXNJbnN0YW5jZU9mc3EAfgAMDg6R2nQABmVxdWFsc3NxAH4ADInyn8N0AAtpc0NhbmNlbGxlZHNxAH4ADLpoA0p0AAxhc0luc3RhbmNlT2ZzcQB+AAw1d3mRdAAMc3luY2hyb25pemVkc3EAfgAMPxiXznQADSRpc0luc3RhbmNlT2ZzcQB+AAx2ajQxdAAGY3JlYXRlc3EAfgAMGs+syHQAFlJlcG9pbnRhYmxlQ2FuY2VsbGFibGVzcQB+AAzj+ti6dAAJbm90aWZ5QWxsc3EAfgAMyHC1pXQAF0RlZmF1bHRSZWZyZXNoU2NoZWR1bGVyc3EAfgAM3FsbDnQADGlzSW5zdGFuY2VPZnNxAH4ADBN7Hk50AAY8aW5pdD5zcQB+AAylazpIdAAFYXBwbHlzcQB+AAw+cqDYdAACPT1zcQB+AAzGgVaSdAAFY2xvbmVzcQB+AAzkV7lldAAUTGF6eVJlZnJlc2hTY2hlZHVsZXJzcQB+AAy6IBwadAAIc2NoZWR1bGVzcQB+AAz8t4osdAAIdG9TdHJpbmdzcQB+AAyO0gAddAACIT1zcQB+AAwqbSN+dAAIZ2V0Q2xhc3NzcQB+AAz9OFkNdAACbmVzcQB+AAwt+FHGdAACZXFzcQB+AAzEhQa8dAACIyNzcQB+AAxFUgURdAAIZmluYWxpemVzcQB+AAxYmohFdAAIaGFzaENvZGVzcQB+AAzRs84BdAAQUmVmcmVzaFNjaGVkdWxlcnNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAARzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AFN4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0AChrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5SZWZyZXNoU2NoZWR1bGVydXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AGtzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AU0wACWluaGVyaXRlZHEAfgBTTAAHcGFyZW50c3EAfgBTeHEAfgBwc3EAfgBrdXEAfgBOAAAAAHNxAH4Aa3VxAH4ATgAAAABzcQB+AGt1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAAnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AG90AAZPYmplY3RzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AG9zcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABGphdmFzcQB+AIh0AARsYW5nc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AIlzcQB+AHx0AANBbnlzcQB+AIBzcQB+AIN1cQB+AIYAAAACc3EAfgCIdAAFc2NhbGFxAH4Aj3NxAH4AUHEAfgBddXEAfgBeAAAAAHNxAH4AYAB0AC9rYW1vbi5tZXRyaWMuaW5zdHJ1bWVudC5EZWZhdWx0UmVmcmVzaFNjaGVkdWxlcnVxAH4AYwAAAAB+cQB+AGV0AAhDbGFzc0RlZnVxAH4AaQAAAABzcQB+AGtxAH4AcXNxAH4Aa3NxAH4Ac3NxAH4Aa3VxAH4ATgAAAABzcQB+AGt1cQB+AE4AAAAAc3EAfgBrdXEAfgB6AAAAA3NxAH4AfHQAEFJlZnJlc2hTY2hlZHVsZXJzcQB+AIBzcQB+AIN1cQB+AIYAAAAEc3EAfgCIdAAFa2Ftb25zcQB+AIh0AAZtZXRyaWNzcQB+AIh0AAppbnN0cnVtZW50cQB+AI9zcQB+AHxxAH4Af3NxAH4AgHNxAH4Ag3VxAH4AhgAAAANzcQB+AIhxAH4Ai3NxAH4AiHEAfgCNcQB+AI9zcQB+AHxxAH4AkXNxAH4AgHNxAH4Ag3VxAH4AhgAAAAJzcQB+AIhxAH4AlnEAfgCPc3EAfgBQcQB+AF11cQB+AF4AAAAAc3EAfgBgAHQAL2thbW9uLm1ldHJpYy5pbnN0cnVtZW50LkRlZmF1bHRSZWZyZXNoU2NoZWR1bGVydXEAfgBjAAAAAH5xAH4AZXQABk1vZHVsZXVxAH4AaQAAAABzcQB+AGtxAH4AcXNxAH4Aa3NxAH4Ac3NxAH4Aa3VxAH4ATgAAAABzcQB+AGt1cQB+AE4AAAAAc3EAfgBrdXEAfgB6AAAAAnNxAH4AfHEAfgB/c3EAfgCAc3EAfgCDdXEAfgCGAAAAA3NxAH4AiHEAfgCLc3EAfgCIcQB+AI1xAH4Aj3NxAH4AfHEAfgCRc3EAfgCAc3EAfgCDdXEAfgCGAAAAAnNxAH4AiHEAfgCWcQB+AI9zcQB+AFBxAH4AXXVxAH4AXgAAAABzcQB+AGAAdAAsa2Ftb24ubWV0cmljLmluc3RydW1lbnQuTGF6eVJlZnJlc2hTY2hlZHVsZXJ1cQB+AGMAAAAAcQB+AJx1cQB+AGkAAAAAc3EAfgBrcQB+AHFzcQB+AGtzcQB+AHNzcQB+AGt1cQB+AE4AAAAAc3EAfgBrdXEAfgBOAAAAAHNxAH4Aa3VxAH4AegAAAANzcQB+AHx0ABBSZWZyZXNoU2NoZWR1bGVyc3EAfgCAc3EAfgCDdXEAfgCGAAAABHNxAH4AiHQABWthbW9uc3EAfgCIdAAGbWV0cmljc3EAfgCIdAAKaW5zdHJ1bWVudHEAfgCPc3EAfgB8cQB+AH9zcQB+AIBzcQB+AIN1cQB+AIYAAAADc3EAfgCIcQB+AItzcQB+AIhxAH4AjXEAfgCPc3EAfgB8cQB+AJFzcQB+AIBzcQB+AIN1cQB+AIYAAAACc3EAfgCIcQB+AJZxAH4Aj3VyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAADc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQADGthbW9uLm1ldHJpY3NxAH4BAXQAF2thbW9uLm1ldHJpYy5pbnN0cnVtZW50c3EAfgEBdAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABRj35ffQfwzN12sN4xRmQa/DKUZfQ==
kamon.metric.instrument.Time -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwmSIPegAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA2c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwBHed63QABm5vdGlmeXNxAH4ADM0GEgN0AAd1bmFwcGx5c3EAfgAMGpL1OnQADE1pY3Jvc2Vjb25kc3NxAH4ADNku8Ih0AARuYW1lc3EAfgAMl/0LenQABHdhaXRzcQB+AAyBt43JdAAOY29weSRkZWZhdWx0JDJzcQB+AAyEw7wldAANJGFzSW5zdGFuY2VPZnNxAH4ADJaXNG90AAZNZW1vcnlzcQB+AAwF5IzodAAJR2lnYUJ5dGVzc3EAfgAM33rhzXQADHByb2R1Y3RBcml0eXNxAH4ADN20Sqd0AAZlcXVhbHNzcQB+AAxUPkekdAAFc2NhbGVzcQB+AAy1rpkAdAAMYXNJbnN0YW5jZU9mc3EAfgAM2l1E0XQAAVVzcQB+AAw5NVjAdAAFQnl0ZXNzcQB+AAwhAJhSdAAMc3luY2hyb25pemVkc3EAfgAMZdJfTXQABWxhYmVsc3EAfgAMwXKSA3QADSRpc0luc3RhbmNlT2ZzcQB+AAz055iRdAAJaXNVbmtub3duc3EAfgAMkTiBvHQACUtpbG9CeXRlc3NxAH4ADHe6/y50AAlNZWdhQnl0ZXNzcQB+AAzTdDosdAAIY2FuRXF1YWxzcQB+AAzSLFmedAAMTWlsbGlzZWNvbmRzc3EAfgAMNNXB23QABmlzVGltZXNxAH4ADMYb6Kh0AA1wcm9kdWN0UHJlZml4c3EAfgAMIt9LknQACW5vdGlmeUFsbHNxAH4ADIDCGnt0AAZmYWN0b3JzcQB+AAyuRITddAAMaXNJbnN0YW5jZU9mc3EAfgAMKCvBD3QABjxpbml0PnNxAH4ADP5RSLx0AAVhcHBseXNxAH4ADPZCNC10AAI9PXNxAH4ADGMTwkZ0AAVjbG9uZXNxAH4ADGlHlnx0AAV1bml0c3NxAH4ADHWtnE50AAYkaW5pdCRzcQB+AAzulGJ9dAAEY29weXNxAH4ADCW3vjd0AAh0b1N0cmluZ3NxAH4ADB+tFo90AAh0cnlTY2FsZXNxAH4ADCGVcgJ0AAtOYW5vc2Vjb25kc3NxAH4ADBxTQtF0AAIhPXNxAH4ADMNYNPV0AAhnZXRDbGFzc3NxAH4ADGrwyLZ0AA5jb3B5JGRlZmF1bHQkMXNxAH4ADH1j/gp0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4ADOjG7nB0AAhpc01lbW9yeXNxAH4ADP9OaNV0AAdVbmtub3duc3EAfgAM90OwZHQAAm5lc3EAfgAM4yzKr3QAAmVxc3EAfgAM1NQZz3QABFRpbWVzcQB+AAz6NB87dAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMlky9g3QAAiMjc3EAfgAMlXqeCnQACGZpbmFsaXplc3EAfgAMfSs2d3QAB1NlY29uZHNzcQB+AAzFJ7cddAAOcHJvZHVjdEVsZW1lbnRzcQB+AAywkyCPdAAIaGFzaENvZGVzcQB+AAwDw/bidAAIY2FuU2NhbGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAGc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgCDeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHABdAApa2Ftb24ubWV0cmljLmluc3RydW1lbnQuVW5pdE9mTWVhc3VyZW1lbnR1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlw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AH4AwXEAfgEnc3EAfgCAcQB+AI11cQB+AI4AAAAAc3EAfgCQAHQAHmthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lk1lbW9yeXVxAH4AkwAAAABxAH4A6HVxAH4AmQAAAABzcQB+AJtxAH4AoXNxAH4Am3NxAH4Ao3NxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AH4AAAAAc3EAfgCbdXEAfgCqAAAAB3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAAnNxAH4AuHEAfgDGcQB+AL9zcQB+AKxxAH4A9XNxAH4AsHNxAH4As3VxAH4AtgAAAANzcQB+ALhxAH4Au3NxAH4AuHQAAmlvcQB+AL9zcQB+AKxxAH4BAnEAfgFJc3EAfgCsdAAGRXF1YWxzcQB+AUlzcQB+AKx0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4AsHNxAH4As3VxAH4AtgAAAARzcQB+ALh0AAVrYW1vbnNxAH4AuHQABm1ldHJpY3NxAH4AuHQACmluc3RydW1lbnRxAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AUlzcQB+AIBxAH4AjXVxAH4AjgAAAABzcQB+AJAAdAAea2Ftb24ubWV0cmljLmluc3RydW1lbnQuTWVtb3J5dXEAfgCTAAAAAHEAfgDMdXEAfgCZAAAAAHNxAH4Am3EAfgChc3EAfgCbc3EAfgCjc3EAfgCbdXEAfgB+AAAAAHNxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AKoAAAAEc3EAfgCscQB+APVzcQB+ALBzcQB+ALN1cQB+ALYAAAACc3EAfgC4cQB+AMZxAH4Av3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4dAACaW9xAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AXl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+AY10ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4BjXQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUwLq72veUMXa0Z+IcT8UUkxWAoVk=
kamon.metric.instrument.Time$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwmSIPegAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA2c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwBHed63QABm5vdGlmeXNxAH4ADM0GEgN0AAd1bmFwcGx5c3EAfgAMGpL1OnQADE1pY3Jvc2Vjb25kc3NxAH4ADNku8Ih0AARuYW1lc3EAfgAMl/0LenQABHdhaXRzcQB+AAyBt43JdAAOY29weSRkZWZhdWx0JDJzcQB+AAyEw7wldAANJGFzSW5zdGFuY2VPZnNxAH4ADJaXNG90AAZNZW1vcnlzcQB+AAwF5IzodAAJR2lnYUJ5dGVzc3EAfgAM33rhzXQADHByb2R1Y3RBcml0eXNxAH4ADN20Sqd0AAZlcXVhbHNzcQB+AAxUPkekdAAFc2NhbGVzcQB+AAy1rpkAdAAMYXNJbnN0YW5jZU9mc3EAfgAM2l1E0XQAAVVzcQB+AAw5NVjAdAAFQnl0ZXNzcQB+AAwhAJhSdAAMc3luY2hyb25pemVkc3EAfgAMZdJfTXQABWxhYmVsc3EAfgAMwXKSA3QADSRpc0luc3RhbmNlT2ZzcQB+AAz055iRdAAJaXNVbmtub3duc3EAfgAMkTiBvHQACUtpbG9CeXRlc3NxAH4ADHe6/y50AAlNZWdhQnl0ZXNzcQB+AAzTdDosdAAIY2FuRXF1YWxzcQB+AAzSLFmedAAMTWlsbGlzZWNvbmRzc3EAfgAMNNXB23QABmlzVGltZXNxAH4ADMYb6Kh0AA1wcm9kdWN0UHJlZml4c3EAfgAMIt9LknQACW5vdGlmeUFsbHNxAH4ADIDCGnt0AAZmYWN0b3JzcQB+AAyuRITddAAMaXNJbnN0YW5jZU9mc3EAfgAMKCvBD3QABjxpbml0PnNxAH4ADP5RSLx0AAVhcHBseXNxAH4ADPZCNC10AAI9PXNxAH4ADGMTwkZ0AAVjbG9uZXNxAH4ADGlHlnx0AAV1bml0c3NxAH4ADHWtnE50AAYkaW5pdCRzcQB+AAzulGJ9dAAEY29weXNxAH4ADCW3vjd0AAh0b1N0cmluZ3NxAH4ADB+tFo90AAh0cnlTY2FsZXNxAH4ADCGVcgJ0AAtOYW5vc2Vjb25kc3NxAH4ADBxTQtF0AAIhPXNxAH4ADMNYNPV0AAhnZXRDbGFzc3NxAH4ADGrwyLZ0AA5jb3B5JGRlZmF1bHQkMXNxAH4ADH1j/gp0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4ADOjG7nB0AAhpc01lbW9yeXNxAH4ADP9OaNV0AAdVbmtub3duc3EAfgAM90OwZHQAAm5lc3EAfgAM4yzKr3QAAmVxc3EAfgAM1NQZz3QABFRpbWVzcQB+AAz6NB87dAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMlky9g3QAAiMjc3EAfgAMlXqeCnQACGZpbmFsaXplc3EAfgAMfSs2d3QAB1NlY29uZHNzcQB+AAzFJ7cddAAOcHJvZHVjdEVsZW1lbnRzcQB+AAywkyCPdAAIaGFzaENvZGVzcQB+AAwDw/bidAAIY2FuU2NhbGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAGc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgCDeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHABdAApa2Ftb24ubWV0cmljLmluc3RydW1lbnQuVW5pdE9mTWVhc3VyZW1lbnR1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlw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AH4AwXEAfgEnc3EAfgCAcQB+AI11cQB+AI4AAAAAc3EAfgCQAHQAHmthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lk1lbW9yeXVxAH4AkwAAAABxAH4A6HVxAH4AmQAAAABzcQB+AJtxAH4AoXNxAH4Am3NxAH4Ao3NxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AH4AAAAAc3EAfgCbdXEAfgCqAAAAB3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAAnNxAH4AuHEAfgDGcQB+AL9zcQB+AKxxAH4A9XNxAH4AsHNxAH4As3VxAH4AtgAAAANzcQB+ALhxAH4Au3NxAH4AuHQAAmlvcQB+AL9zcQB+AKxxAH4BAnEAfgFJc3EAfgCsdAAGRXF1YWxzcQB+AUlzcQB+AKx0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4AsHNxAH4As3VxAH4AtgAAAARzcQB+ALh0AAVrYW1vbnNxAH4AuHQABm1ldHJpY3NxAH4AuHQACmluc3RydW1lbnRxAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AUlzcQB+AIBxAH4AjXVxAH4AjgAAAABzcQB+AJAAdAAea2Ftb24ubWV0cmljLmluc3RydW1lbnQuTWVtb3J5dXEAfgCTAAAAAHEAfgDMdXEAfgCZAAAAAHNxAH4Am3EAfgChc3EAfgCbc3EAfgCjc3EAfgCbdXEAfgB+AAAAAHNxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AKoAAAAEc3EAfgCscQB+APVzcQB+ALBzcQB+ALN1cQB+ALYAAAACc3EAfgC4cQB+AMZxAH4Av3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4dAACaW9xAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AXl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+AY10ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4BjXQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUwLq72veUMXa0Z+IcT8UUkxWAoVk=
kamon.metric.instrument.UnitOfMeasurement -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwmSIPegAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA2c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwBHed63QABm5vdGlmeXNxAH4ADM0GEgN0AAd1bmFwcGx5c3EAfgAMGpL1OnQADE1pY3Jvc2Vjb25kc3NxAH4ADNku8Ih0AARuYW1lc3EAfgAMl/0LenQABHdhaXRzcQB+AAyBt43JdAAOY29weSRkZWZhdWx0JDJzcQB+AAyEw7wldAANJGFzSW5zdGFuY2VPZnNxAH4ADJaXNG90AAZNZW1vcnlzcQB+AAwF5IzodAAJR2lnYUJ5dGVzc3EAfgAM33rhzXQADHByb2R1Y3RBcml0eXNxAH4ADN20Sqd0AAZlcXVhbHNzcQB+AAxUPkekdAAFc2NhbGVzcQB+AAy1rpkAdAAMYXNJbnN0YW5jZU9mc3EAfgAM2l1E0XQAAVVzcQB+AAw5NVjAdAAFQnl0ZXNzcQB+AAwhAJhSdAAMc3luY2hyb25pemVkc3EAfgAMZdJfTXQABWxhYmVsc3EAfgAMwXKSA3QADSRpc0luc3RhbmNlT2ZzcQB+AAz055iRdAAJaXNVbmtub3duc3EAfgAMkTiBvHQACUtpbG9CeXRlc3NxAH4ADHe6/y50AAlNZWdhQnl0ZXNzcQB+AAzTdDosdAAIY2FuRXF1YWxzcQB+AAzSLFmedAAMTWlsbGlzZWNvbmRzc3EAfgAMNNXB23QABmlzVGltZXNxAH4ADMYb6Kh0AA1wcm9kdWN0UHJlZml4c3EAfgAMIt9LknQACW5vdGlmeUFsbHNxAH4ADIDCGnt0AAZmYWN0b3JzcQB+AAyuRITddAAMaXNJbnN0YW5jZU9mc3EAfgAMKCvBD3QABjxpbml0PnNxAH4ADP5RSLx0AAVhcHBseXNxAH4ADPZCNC10AAI9PXNxAH4ADGMTwkZ0AAVjbG9uZXNxAH4ADGlHlnx0AAV1bml0c3NxAH4ADHWtnE50AAYkaW5pdCRzcQB+AAzulGJ9dAAEY29weXNxAH4ADCW3vjd0AAh0b1N0cmluZ3NxAH4ADB+tFo90AAh0cnlTY2FsZXNxAH4ADCGVcgJ0AAtOYW5vc2Vjb25kc3NxAH4ADBxTQtF0AAIhPXNxAH4ADMNYNPV0AAhnZXRDbGFzc3NxAH4ADGrwyLZ0AA5jb3B5JGRlZmF1bHQkMXNxAH4ADH1j/gp0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4ADOjG7nB0AAhpc01lbW9yeXNxAH4ADP9OaNV0AAdVbmtub3duc3EAfgAM90OwZHQAAm5lc3EAfgAM4yzKr3QAAmVxc3EAfgAM1NQZz3QABFRpbWVzcQB+AAz6NB87dAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMlky9g3QAAiMjc3EAfgAMlXqeCnQACGZpbmFsaXplc3EAfgAMfSs2d3QAB1NlY29uZHNzcQB+AAzFJ7cddAAOcHJvZHVjdEVsZW1lbnRzcQB+AAywkyCPdAAIaGFzaENvZGVzcQB+AAwDw/bidAAIY2FuU2NhbGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAGc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgCDeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHABdAApa2Ftb24ubWV0cmljLmluc3RydW1lbnQuVW5pdE9mTWVhc3VyZW1lbnR1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlw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AH4AwXEAfgEnc3EAfgCAcQB+AI11cQB+AI4AAAAAc3EAfgCQAHQAHmthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lk1lbW9yeXVxAH4AkwAAAABxAH4A6HVxAH4AmQAAAABzcQB+AJtxAH4AoXNxAH4Am3NxAH4Ao3NxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AH4AAAAAc3EAfgCbdXEAfgCqAAAAB3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAAnNxAH4AuHEAfgDGcQB+AL9zcQB+AKxxAH4A9XNxAH4AsHNxAH4As3VxAH4AtgAAAANzcQB+ALhxAH4Au3NxAH4AuHQAAmlvcQB+AL9zcQB+AKxxAH4BAnEAfgFJc3EAfgCsdAAGRXF1YWxzcQB+AUlzcQB+AKx0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4AsHNxAH4As3VxAH4AtgAAAARzcQB+ALh0AAVrYW1vbnNxAH4AuHQABm1ldHJpY3NxAH4AuHQACmluc3RydW1lbnRxAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AUlzcQB+AIBxAH4AjXVxAH4AjgAAAABzcQB+AJAAdAAea2Ftb24ubWV0cmljLmluc3RydW1lbnQuTWVtb3J5dXEAfgCTAAAAAHEAfgDMdXEAfgCZAAAAAHNxAH4Am3EAfgChc3EAfgCbc3EAfgCjc3EAfgCbdXEAfgB+AAAAAHNxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AKoAAAAEc3EAfgCscQB+APVzcQB+ALBzcQB+ALN1cQB+ALYAAAACc3EAfgC4cQB+AMZxAH4Av3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4dAACaW9xAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AXl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+AY10ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4BjXQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUwLq72veUMXa0Z+IcT8UUkxWAoVk=
kamon.metric.instrument.UnitOfMeasurement$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwmSIPegAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA2c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwBHed63QABm5vdGlmeXNxAH4ADM0GEgN0AAd1bmFwcGx5c3EAfgAMGpL1OnQADE1pY3Jvc2Vjb25kc3NxAH4ADNku8Ih0AARuYW1lc3EAfgAMl/0LenQABHdhaXRzcQB+AAyBt43JdAAOY29weSRkZWZhdWx0JDJzcQB+AAyEw7wldAANJGFzSW5zdGFuY2VPZnNxAH4ADJaXNG90AAZNZW1vcnlzcQB+AAwF5IzodAAJR2lnYUJ5dGVzc3EAfgAM33rhzXQADHByb2R1Y3RBcml0eXNxAH4ADN20Sqd0AAZlcXVhbHNzcQB+AAxUPkekdAAFc2NhbGVzcQB+AAy1rpkAdAAMYXNJbnN0YW5jZU9mc3EAfgAM2l1E0XQAAVVzcQB+AAw5NVjAdAAFQnl0ZXNzcQB+AAwhAJhSdAAMc3luY2hyb25pemVkc3EAfgAMZdJfTXQABWxhYmVsc3EAfgAMwXKSA3QADSRpc0luc3RhbmNlT2ZzcQB+AAz055iRdAAJaXNVbmtub3duc3EAfgAMkTiBvHQACUtpbG9CeXRlc3NxAH4ADHe6/y50AAlNZWdhQnl0ZXNzcQB+AAzTdDosdAAIY2FuRXF1YWxzcQB+AAzSLFmedAAMTWlsbGlzZWNvbmRzc3EAfgAMNNXB23QABmlzVGltZXNxAH4ADMYb6Kh0AA1wcm9kdWN0UHJlZml4c3EAfgAMIt9LknQACW5vdGlmeUFsbHNxAH4ADIDCGnt0AAZmYWN0b3JzcQB+AAyuRITddAAMaXNJbnN0YW5jZU9mc3EAfgAMKCvBD3QABjxpbml0PnNxAH4ADP5RSLx0AAVhcHBseXNxAH4ADPZCNC10AAI9PXNxAH4ADGMTwkZ0AAVjbG9uZXNxAH4ADGlHlnx0AAV1bml0c3NxAH4ADHWtnE50AAYkaW5pdCRzcQB+AAzulGJ9dAAEY29weXNxAH4ADCW3vjd0AAh0b1N0cmluZ3NxAH4ADB+tFo90AAh0cnlTY2FsZXNxAH4ADCGVcgJ0AAtOYW5vc2Vjb25kc3NxAH4ADBxTQtF0AAIhPXNxAH4ADMNYNPV0AAhnZXRDbGFzc3NxAH4ADGrwyLZ0AA5jb3B5JGRlZmF1bHQkMXNxAH4ADH1j/gp0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4ADOjG7nB0AAhpc01lbW9yeXNxAH4ADP9OaNV0AAdVbmtub3duc3EAfgAM90OwZHQAAm5lc3EAfgAM4yzKr3QAAmVxc3EAfgAM1NQZz3QABFRpbWVzcQB+AAz6NB87dAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMlky9g3QAAiMjc3EAfgAMlXqeCnQACGZpbmFsaXplc3EAfgAMfSs2d3QAB1NlY29uZHNzcQB+AAzFJ7cddAAOcHJvZHVjdEVsZW1lbnRzcQB+AAywkyCPdAAIaGFzaENvZGVzcQB+AAwDw/bidAAIY2FuU2NhbGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAAGc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgCDeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHABdAApa2Ftb24ubWV0cmljLmluc3RydW1lbnQuVW5pdE9mTWVhc3VyZW1lbnR1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlw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AH4AwXEAfgEnc3EAfgCAcQB+AI11cQB+AI4AAAAAc3EAfgCQAHQAHmthbW9uLm1ldHJpYy5pbnN0cnVtZW50Lk1lbW9yeXVxAH4AkwAAAABxAH4A6HVxAH4AmQAAAABzcQB+AJtxAH4AoXNxAH4Am3NxAH4Ao3NxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AH4AAAAAc3EAfgCbdXEAfgCqAAAAB3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAAnNxAH4AuHEAfgDGcQB+AL9zcQB+AKxxAH4A9XNxAH4AsHNxAH4As3VxAH4AtgAAAANzcQB+ALhxAH4Au3NxAH4AuHQAAmlvcQB+AL9zcQB+AKxxAH4BAnEAfgFJc3EAfgCsdAAGRXF1YWxzcQB+AUlzcQB+AKx0ABFVbml0T2ZNZWFzdXJlbWVudHNxAH4AsHNxAH4As3VxAH4AtgAAAARzcQB+ALh0AAVrYW1vbnNxAH4AuHQABm1ldHJpY3NxAH4AuHQACmluc3RydW1lbnRxAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AUlzcQB+AIBxAH4AjXVxAH4AjgAAAABzcQB+AJAAdAAea2Ftb24ubWV0cmljLmluc3RydW1lbnQuTWVtb3J5dXEAfgCTAAAAAHEAfgDMdXEAfgCZAAAAAHNxAH4Am3EAfgChc3EAfgCbc3EAfgCjc3EAfgCbdXEAfgB+AAAAAHNxAH4Am3VxAH4AfgAAAABzcQB+AJt1cQB+AKoAAAAEc3EAfgCscQB+APVzcQB+ALBzcQB+ALN1cQB+ALYAAAACc3EAfgC4cQB+AMZxAH4Av3NxAH4ArHEAfgD1c3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4dAACaW9xAH4Av3NxAH4ArHEAfgCvc3EAfgCwc3EAfgCzdXEAfgC2AAAAA3NxAH4AuHEAfgC7c3EAfgC4cQB+AL1xAH4Av3NxAH4ArHEAfgDBcQB+AXl1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAxrYW1vbi5tZXRyaWNzcQB+AY10ABdrYW1vbi5tZXRyaWMuaW5zdHJ1bWVudHNxAH4BjXQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUwLq72veUMXa0Z+IcT8UUkxWAoVk=
kamon.trace.ClockSampler -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwHPJNkAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAJzcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHBvbItPdAAMRW5oYW5jZWRMb25nc3EAfgALobz2O3QAC0VuaGFuY2VkSW50dXEAfgAJAAAAInNxAH4AC5JPHnp0AApOb1NhbXBsaW5nc3EAfgALo9jaxnQABm5vdGlmeXNxAH4ACwTg9Ht0AAR3YWl0c3EAfgALlgGa7XQADSRhc0luc3RhbmNlT2ZzcQB+AAtK3MXCdAAGZXF1YWxzc3EAfgALqhH073QADVJhbmRvbVNhbXBsZXJzcQB+AAsAn5aLdAAMYXNJbnN0YW5jZU9mc3EAfgALONgxknQACVNhbXBsZUFsbHNxAH4AC2ytTRZ0AAxDbG9ja1NhbXBsZXJzcQB+AAtXAehBdAAMc3luY2hyb25pemVkc3EAfgALQux0HnQADSRpc0luc3RhbmNlT2ZzcQB+AAu1c0fqdAAQVGhyZXNob2xkU2FtcGxlcnNxAH4AC91YnRZ0AAlub3RpZnlBbGxzcQB+AAu5aKSfdAAVRGVmYXVsdFRva2VuR2VuZXJhdG9yc3EAfgALD07KB3QADGlzSW5zdGFuY2VPZnNxAH4AC9gZlR90AAdTYW1wbGVyc3EAfgALegHwMHQAC3Nob3VsZFRyYWNlc3EAfgALOhrKynQABjxpbml0PnNxAH4ACw53jXd0AAVhcHBseXNxAH4AC6hveZh0AAI9PXNxAH4AC2jkQuZ0AAVjbG9uZXNxAH4AC7KrL+V0AAYkaW5pdCRzcQB+AAsjN9xidAAMaXNQb3dlck9mVHdvc3EAfgALUywX83QADHNob3VsZFJlcG9ydHNxAH4ACxBXhed0AAh0b1N0cmluZ3NxAH4AC2yqP2V0AAIhPXNxAH4AC8QX32V0AAhnZXRDbGFzc3NxAH4AC24sFcN0AA5PcmRlcmVkU2FtcGxlcnNxAH4AC1RoW7Z0AAJuZXNxAH4AC+ZpKf50AAJlcXNxAH4ACwRIxGB0AAdmYXN0TW9kc3EAfgALI+fpcnQAAiMjc3EAfgAL5qfIinQACGZpbmFsaXplc3EAfgALpHqo23QACGhhc2hDb2Rlc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAACXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4AX3hyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAXQAE2thbW9uLnRyYWNlLlNhbXBsZXJ1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4Ad3NyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgBfTAAJaW5oZXJpdGVkcQB+AF9MAAdwYXJlbnRzcQB+AF94cQB+AHxzcQB+AHd1cQB+AFoAAAAAc3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgAMTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4Ae3QABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4Ae3NyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AAx4cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4AlHQABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4AlXNxAH4AiHQAA0FueXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJR0AAVzY2FsYXEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAFmthbW9uLnRyYWNlLk5vU2FtcGxpbmd1cQB+AG8AAAAAfnEAfgBxdAAGTW9kdWxldXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAADc3EAfgCIdAAHU2FtcGxlcnNxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJR0AAVrYW1vbnNxAH4AlHQABXRyYWNlcQB+AJtzcQB+AIhxAH4Ai3NxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJRxAH4Al3NxAH4AlHEAfgCZcQB+AJtzcQB+AIhxAH4AnXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJRxAH4AonEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAFWthbW9uLnRyYWNlLlNhbXBsZUFsbHVxAH4AbwAAAABxAH4AqHVxAH4AdQAAAABzcQB+AHdxAH4AfXNxAH4Ad3NxAH4Af3NxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AFoAAAAAc3EAfgB3dXEAfgCGAAAAA3NxAH4AiHQAB1NhbXBsZXJzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUdAAFa2Ftb25zcQB+AJR0AAV0cmFjZXEAfgCbc3EAfgCIcQB+AItzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUcQB+AJdzcQB+AJRxAH4AmXEAfgCbc3EAfgCIcQB+AJ1zcQB+AIxzcQB+AI91cQB+AJIAAAACc3EAfgCUcQB+AKJxAH4Am3NxAH4AXHEAfgBpdXEAfgBqAAAAAHNxAH4AbAB0ABlrYW1vbi50cmFjZS5SYW5kb21TYW1wbGVydXEAfgBvAAAAAH5xAH4AcXQACENsYXNzRGVmdXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAADc3EAfgCIdAAHU2FtcGxlcnNxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJR0AAVrYW1vbnNxAH4AlHQABXRyYWNlcQB+AJtzcQB+AIhxAH4Ai3NxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJRxAH4Al3NxAH4AlHEAfgCZcQB+AJtzcQB+AIhxAH4AnXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJRxAH4AonEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAGmthbW9uLnRyYWNlLk9yZGVyZWRTYW1wbGVydXEAfgBvAAAAAHEAfgDwdXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAADc3EAfgCIdAAHU2FtcGxlcnNxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJR0AAVrYW1vbnNxAH4AlHQABXRyYWNlcQB+AJtzcQB+AIhxAH4Ai3NxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJRxAH4Al3NxAH4AlHEAfgCZcQB+AJtzcQB+AIhxAH4AnXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJRxAH4AonEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAGmthbW9uLnRyYWNlLk9yZGVyZWRTYW1wbGVydXEAfgBvAAAAAHEAfgCodXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAACc3EAfgCIcQB+AItzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUcQB+AJdzcQB+AJRxAH4AmXEAfgCbc3EAfgCIcQB+AJ1zcQB+AIxzcQB+AI91cQB+AJIAAAACc3EAfgCUcQB+AKJxAH4Am3NxAH4AXHEAfgBpdXEAfgBqAAAAAHNxAH4AbAB0ABxrYW1vbi50cmFjZS5UaHJlc2hvbGRTYW1wbGVydXEAfgBvAAAAAHEAfgDwdXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAADc3EAfgCIdAAHU2FtcGxlcnNxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJR0AAVrYW1vbnNxAH4AlHQABXRyYWNlcQB+AJtzcQB+AIhxAH4Ai3NxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJRxAH4Al3NxAH4AlHEAfgCZcQB+AJtzcQB+AIhxAH4AnXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJRxAH4AonEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAGGthbW9uLnRyYWNlLkNsb2NrU2FtcGxlcnVxAH4AbwAAAABxAH4A8HVxAH4AdQAAAABzcQB+AHdxAH4AfXNxAH4Ad3NxAH4Af3NxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AFoAAAAAc3EAfgB3dXEAfgCGAAAAA3NxAH4AiHQAB1NhbXBsZXJzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUdAAFa2Ftb25zcQB+AJR0AAV0cmFjZXEAfgCbc3EAfgCIcQB+AItzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUcQB+AJdzcQB+AJRxAH4AmXEAfgCbc3EAfgCIcQB+AJ1zcQB+AIxzcQB+AI91cQB+AJIAAAACc3EAfgCUcQB+AKJxAH4Am3NxAH4AXHEAfgBpdXEAfgBqAAAAAHNxAH4AbAB0ACFrYW1vbi50cmFjZS5EZWZhdWx0VG9rZW5HZW5lcmF0b3J1cQB+AG8AAAAAcQB+APB1cQB+AHUAAAAAc3EAfgB3cQB+AH1zcQB+AHdzcQB+AH9zcQB+AHd1cQB+AFoAAAAAc3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AhgAAAANzcgAXeHNidGkuYXBpLlBhcmFtZXRlcml6ZWQWbO5pA8m7fwIAAkwACGJhc2VUeXBlcQB+AIlbAA10eXBlQXJndW1lbnRzdAARW0x4c2J0aS9hcGkvVHlwZTt4cQB+AHtzcQB+AIh0AAlGdW5jdGlvbjBzcQB+AIxzcQB+AI91cQB+AJIAAAACc3EAfgCUcQB+AKJxAH4Am3VxAH4AhgAAAAFzcQB+AIh0AAZTdHJpbmdzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUcQB+AJdzcQB+AJRxAH4AmXEAfgCbc3EAfgCIcQB+AItxAH4BrnNxAH4AiHEAfgCdcQB+Aad1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAnNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0AAVrYW1vbnNxAH4Bt3QAC2thbW9uLnRyYWNlc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADEwAD3NvdXJjZURpcmVjdG9yeXEAfgAMeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUmVFRoxhVuVFeiglCHblcgY9IcEw=
kamon.trace.EmptyTraceContext -> 

kamon.trace.EmptyTraceContext$ -> 

kamon.trace.OrderedSampler -> 

kamon.trace.RandomSampler -> 

kamon.trace.SampleAll$ -> 

kamon.trace.Segment -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhw2LQGjAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAABLc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hw+Dt+l3QAEUVtcHR5VHJhY2VDb250ZXh0c3EAfgAM4CIgFnQABm5vdGlmeXNxAH4ADFZ90zZ0AAtNZXRyaWNzT25seXNxAH4ADIhSd5x0AAxFbXB0eVNlZ21lbnRzcQB+AAyUkW/AdAAEbmFtZXNxAH4ADIG0lfR0AA9jYXB0dXJlTmFub1RpbWVzcQB+AAzp7EZ1dAAMdHJhY2VDb250ZXh0c3EAfgAMANVUwHQABmFkZFRhZ3NxAH4ADHU8bBR0AAR3YWl0c3EAfgAMvXVIOnQADFRyYWNlQ29udGV4dHNxAH4ADK+7h3h0AA0kYXNJbnN0YW5jZU9mc3EAfgAMscN/03QADHN0YXJ0U2VnbWVudHNxAH4ADFrHJFR0AAxTZWdtZW50QXdhcmVzcQB+AAwzLFYKdAAMcHJvZHVjdEFyaXR5c3EAfgAMp3MUWHQABmVxdWFsc3NxAH4ADNarRZd0AAthZGRNZXRhZGF0YXNxAH4ADINfUdB0ABRGaW5pc2hlZFN1Y2Nlc3NmdWxseXNxAH4ADDp4reN0AAR0YWdzc3EAfgAMFhSzYHQADGFzSW5zdGFuY2VPZnNxAH4ADBqtjyV0AAtTaW1wbGVUcmFjZXNxAH4ADIzRPyx0ABxUaW1lc3RhbXBlZFRyYWNlQ29udGV4dEF3YXJlc3EAfgAMbb5cKnQADHN5bmNocm9uaXplZHNxAH4ADOiUT/N0AAhpc0Nsb3NlZHNxAH4ADCvww0R0AAhEYXRhYmFzZXNxAH4ADMOWzSJ0AA0kaXNJbnN0YW5jZU9mc3EAfgAMXx+qRHQADUxldmVsT2ZEZXRhaWxzcQB+AAxWo0u5dAAIbm9uRW1wdHlzcQB+AAx3hbcKdAAPZmluaXNoV2l0aEVycm9yc3EAfgAMUmOQGnQACGNhbkVxdWFsc3EAfgAM3XI8onQABmZpbmlzaHNxAH4ADNaitat0AA1wcm9kdWN0UHJlZml4c3EAfgAMdAjlkHQABkNsb3NlZHNxAH4ADMqfbJJ0AAdzZWdtZW50c3EAfgAMNQ5tgXQACW5vdGlmeUFsbHNxAH4ADOrfjFF0ABN3aXRoTmV3QXN5bmNTZWdtZW50c3EAfgAMgVy3/XQACXJlbW92ZVRhZ3NxAH4ADHumonV0AAZyZW5hbWVzcQB+AAwKKNz+dAADTE9Ec3EAfgAM7h6S2nQADGlzSW5zdGFuY2VPZnNxAH4ADPixJlZ0AAY8aW5pdD5zcQB+AAwzVjkrdAAYRGVmYXVsdFRyYWNlQ29udGV4dEF3YXJlc3EAfgAMwbncpXQAB1NlZ21lbnRzcQB+AAzmh8N2dAACPT1zcQB+AAxMyUSldAAFY2xvbmVzcQB+AAyTnI1SdAAQZXF1YWxzJGV4dGVuc2lvbnNxAH4ADOKOqeN0AAZzdGF0dXNzcQB+AAx5TGJHdAAFdG9rZW5zcQB+AAwsW5s6dAAHZGVmYXVsdHNxAH4ADFNxeft0AAdsaWJyYXJ5c3EAfgAM4wh6B3QAE0RlZmF1bHRTZWdtZW50QXdhcmVzcQB+AAzDi3/OdAAET3BlbnNxAH4ADKKfzFx0AAYkaW5pdCRzcQB+AAyFvRx0dAAOc3RhcnRUaW1lc3RhbXBzcQB+AAwgt1cmdAAIY2F0ZWdvcnlzcQB+AAx6VGlPdAAIdG9TdHJpbmdzcQB+AAyifQR8dAACIT1zcQB+AAxjGCmBdAAHY29sbGVjdHNxAH4ADIp3rrl0AAhnZXRDbGFzc3NxAH4ADBfZcWN0AA53aXRoTmV3U2VnbWVudHNxAH4ADJvqujd0ABFUcmFjZUNvbnRleHRBd2FyZXNxAH4ADLCKa750AA9TZWdtZW50Q2F0ZWdvcnlzcQB+AAxkuQyudAAHaXNFbXB0eXNxAH4ADFPnDI50AAJuZXNxAH4ADLb3ay10ABJoYXNoQ29kZSRleHRlbnNpb25zcQB+AAy29KnldAAKSHR0cENsaWVudHNxAH4ADHr1DZV0AAJlcXNxAH4ADN8iSHB0AA9wcm9kdWN0SXRlcmF0b3JzcQB+AAzoFvvidAAJRnVsbFRyYWNlc3EAfgAME+soSnQAEUZpbmlzaGVkV2l0aEVycm9yc3EAfgAM/Wb0tnQAAiMjc3EAfgAMte45unQACGZpbmFsaXplc3EAfgAMJOMZA3QADnByb2R1Y3RFbGVtZW50c3EAfgAM8gkF+XQACGhhc2hDb2Rlc3EAfgAMJ4RRTXQABlN0YXR1c3NxAH4ADI1h/FJ0AAVsZXZlbHNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAABBzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AK14cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ABhrYW1vbi50cmFjZS5UcmFjZUNvbnRleHR1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4AxXNyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgCtTAAJaW5oZXJpdGVkcQB+AK1MAAdwYXJlbnRzcQB+AK14cQB+AMpzcQB+AMV1cQB+AKgAAAAAc3EAfgDFdXEAfgCoAAAAAHNxAH4AxXVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4AyXQABk9iamVjdHNyABN4c2J0aS5hcGkuU2lu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
kamon.trace.SegmentInfo -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwzPjh/QAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA+c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwvBjIC3QABm5vdGlmeXNxAH4ADON2KcN0AARuYW1lc3EAfgAM96Kz7HQABHdhaXRzcQB+AAytiAfkdAAOY29weSRkZWZhdWx0JDJzcQB+AAzjw7iudAANJGFzSW5zdGFuY2VPZnNxAH4ADB/ztc90AAl0aW1lc3RhbXBzcQB+AAww00fhdAAOY29weSRkZWZhdWx0JDVzcQB+AAzU74fMdAARc2V0Q3VycmVudENvbnRleHRzcQB+AAzKKU2vdAAMcHJvZHVjdEFyaXR5c3EAfgAMA2FDI3QABmVxdWFsc3NxAH4ADCOAWsF0AAR0YWdzc3EAfgAMHI7lcXQAC1NlZ21lbnRJbmZvc3EAfgAMvkuBI3QADGFzSW5zdGFuY2VPZnNxAH4ADP49t1d0AAxzeW5jaHJvbml6ZWRzcQB+AAygRHV+dAANJGlzSW5zdGFuY2VPZnNxAH4ADOWD0pJ0AA5jb3B5JGRlZmF1bHQkOHNxAH4ADDIslXF0AAlzdWJzY3JpYmVzcQB+AAxq/2bldAAIY2FuRXF1YWxzcQB+AAy9VZa8dAAOY29weSRkZWZhdWx0JDRzcQB+AAyD1NrzdAAKbmV3Q29udGV4dHNxAH4ADKoz2mp0AA1wcm9kdWN0UHJlZml4c3EAfgAMIgQclnQACW5vdGlmeUFsbHNxAH4ADOffirZ0AAxpc0luc3RhbmNlT2ZzcQB+AAwNMBkhdAAOY3VycmVudENvbnRleHRzcQB+AAwCwDcKdAAGPGluaXQ+c3EAfgAM+u2CUnQAC2VsYXBzZWRUaW1lc3EAfgAMZUUDUHQABWFwcGx5c3EAfgAMov33wnQAAj09c3EAfgAM89cvxXQABWNsb25lc3EAfgAMVoNLy3QAC3Vuc3Vic2NyaWJlc3EAfgAMV/x5TXQABnN0YXR1c3NxAH4ADA+qtF90AAV0b2tlbnNxAH4ADLausA50AAdsaWJyYXJ5c3EAfgAM3Ufm0XQACHNlZ21lbnRzc3EAfgAMUXAAdnQADmNvcHkkZGVmYXVsdCQ3c3EAfgAMQsdKe3QABiRpbml0JHNxAH4ADH0XcMp0ABBUcmFjZXJNb2R1bGVJbXBsc3EAfgAMZNFDLnQAFmRpc3BhdGNoVHJhY2luZ0NvbnRleHRzcQB+AAxSUFQGdAAUX3RyYWNlQ29udGV4dFN0b3JhZ2VzcQB+AAwbgGa3dAAOY29weSRkZWZhdWx0JDNzcQB+AAyB/KAHdAAEY29weXNxAH4ADGjQIy50AAhjYXRlZ29yeXNxAH4ADFZZRL10AAt3aXRoQ29udGV4dHNxAH4ADBy7r7R0AAhtZXRhZGF0YXNxAH4ADIfiyfx0ABNjbGVhckN1cnJlbnRDb250ZXh0c3EAfgAMN4+x7HQACHRvU3RyaW5nc3EAfgAMof8b8XQAAiE9c3EAfgAM+cLvtXQADndpdGhOZXdDb250ZXh0c3EAfgAMbVpl3XQACGdldENsYXNzc3EAfgAMxuN+NHQADmNvcHkkZGVmYXVsdCQxc3EAfgAMjOUh33QABXN0YXJ0c3EAfgAM6pOUP3QADmNvcHkkZGVmYXVsdCQ2c3EAfgAMsb0hMHQAAm5lc3EAfgAMG4J1A3QABlRyYWNlcnNxAH4ADM1Be/90AAlUcmFjZUluZm9zcQB+AAx7zogjdAACZXFzcQB+AAx7bAvrdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMVYaSYXQADFRyYWNlck1vZHVsZXNxAH4ADK/DceZ0AAIjI3NxAH4ADCs9Q3d0AAhmaW5hbGl6ZXNxAH4ADBo6XZ90AA5wcm9kdWN0RWxlbWVudHNxAH4ADGWjGgp0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAZzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AJN4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ABhrYW1vbi50cmFjZS5UcmFjZXJNb2R1bGV1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4Aq3NyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgCTTAAJaW5oZXJpdGVkcQB+AJNMAAdwYXJlbnRzcQB+AJN4cQB+ALBzcQB+AKt1cQB+AI4AAAAAc3EAfgCrdXEAfgCOAAAAAHNxAH4Aq3VyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4Ar3QABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4Ar3NyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4AyHQABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4AyXNxAH4AvHQA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vHQABkVxdWFsc3EAfgF0c3EAfgC8cQB+AL9zcQB+AMBzcQB+AMN1cQB+AMYAAAADc3EAfgDIcQB+AMtzcQB+AMhxAH4AzXEAfgDPc3EAfgC8cQB+ANFxAH4BdHVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQABWthbW9uc3EAfgGLdAALa2Ftb24udHJhY2VzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABR65NF0oBabnhCGJRchcS9aWbVDFQ==
kamon.trace.Status -> 

kamon.trace.Status$ -> 

kamon.trace.ThresholdSampler -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwHPJNkAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAJzcgAgeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2hbDvUidjhXzwIAAkkABGhhc2hMAARuYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHBvbItPdAAMRW5oYW5jZWRMb25nc3EAfgALobz2O3QAC0VuaGFuY2VkSW50dXEAfgAJAAAAInNxAH4AC5JPHnp0AApOb1NhbXBsaW5nc3EAfgALo9jaxnQABm5vdGlmeXNxAH4ACwTg9Ht0AAR3YWl0c3EAfgALlgGa7XQADSRhc0luc3RhbmNlT2ZzcQB+AAtK3MXCdAAGZXF1YWxzc3EAfgALqhH073QADVJhbmRvbVNhbXBsZXJzcQB+AAsAn5aLdAAMYXNJbnN0YW5jZU9mc3EAfgALONgxknQACVNhbXBsZUFsbHNxAH4AC2ytTRZ0AAxDbG9ja1NhbXBsZXJzcQB+AAtXAehBdAAMc3luY2hyb25pemVkc3EAfgALQux0HnQADSRpc0luc3RhbmNlT2ZzcQB+AAu1c0fqdAAQVGhyZXNob2xkU2FtcGxlcnNxAH4AC91YnRZ0AAlub3RpZnlBbGxzcQB+AAu5aKSfdAAVRGVmYXVsdFRva2VuR2VuZXJhdG9yc3EAfgALD07KB3QADGlzSW5zdGFuY2VPZnNxAH4AC9gZlR90AAdTYW1wbGVyc3EAfgALegHwMHQAC3Nob3VsZFRyYWNlc3EAfgALOhrKynQABjxpbml0PnNxAH4ACw53jXd0AAVhcHBseXNxAH4AC6hveZh0AAI9PXNxAH4AC2jkQuZ0AAVjbG9uZXNxAH4AC7KrL+V0AAYkaW5pdCRzcQB+AAsjN9xidAAMaXNQb3dlck9mVHdvc3EAfgALUywX83QADHNob3VsZFJlcG9ydHNxAH4ACxBXhed0AAh0b1N0cmluZ3NxAH4AC2yqP2V0AAIhPXNxAH4AC8QX32V0AAhnZXRDbGFzc3NxAH4AC24sFcN0AA5PcmRlcmVkU2FtcGxlcnNxAH4AC1RoW7Z0AAJuZXNxAH4AC+ZpKf50AAJlcXNxAH4ACwRIxGB0AAdmYXN0TW9kc3EAfgALI+fpcnQAAiMjc3EAfgAL5qfIinQACGZpbmFsaXplc3EAfgALpHqo23QACGhhc2hDb2Rlc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAACXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4AX3hyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AAx4cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAXQAE2thbW9uLnRyYWNlLlNhbXBsZXJ1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4Ad3NyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgBfTAAJaW5oZXJpdGVkcQB+AF9MAAdwYXJlbnRzcQB+AF94cQB+AHxzcQB+AHd1cQB+AFoAAAAAc3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgAMTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4Ae3QABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4Ae3NyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AAx4cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4AlHQABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4AlXNxAH4AiHQAA0FueXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJR0AAVzY2FsYXEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAFmthbW9uLnRyYWNlLk5vU2FtcGxpbmd1cQB+AG8AAAAAfnEAfgBxdAAGTW9kdWxldXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAADc3EAfgCIdAAHU2FtcGxlcnNxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJR0AAVrYW1vbnNxAH4AlHQABXRyYWNlcQB+AJtzcQB+AIhxAH4Ai3NxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJRxAH4Al3NxAH4AlHEAfgCZcQB+AJtzcQB+AIhxAH4AnXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJRxAH4AonEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAFWthbW9uLnRyYWNlLlNhbXBsZUFsbHVxAH4AbwAAAABxAH4AqHVxAH4AdQAAAABzcQB+AHdxAH4AfXNxAH4Ad3NxAH4Af3NxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AFoAAAAAc3EAfgB3dXEAfgCGAAAAA3NxAH4AiHQAB1NhbXBsZXJzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUdAAFa2Ftb25zcQB+AJR0AAV0cmFjZXEAfgCbc3EAfgCIcQB+AItzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUcQB+AJdzcQB+AJRxAH4AmXEAfgCbc3EAfgCIcQB+AJ1zcQB+AIxzcQB+AI91cQB+AJIAAAACc3EAfgCUcQB+AKJxAH4Am3NxAH4AXHEAfgBpdXEAfgBqAAAAAHNxAH4AbAB0ABlrYW1vbi50cmFjZS5SYW5kb21TYW1wbGVydXEAfgBvAAAAAH5xAH4AcXQACENsYXNzRGVmdXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAADc3EAfgCIdAAHU2FtcGxlcnNxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJR0AAVrYW1vbnNxAH4AlHQABXRyYWNlcQB+AJtzcQB+AIhxAH4Ai3NxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJRxAH4Al3NxAH4AlHEAfgCZcQB+AJtzcQB+AIhxAH4AnXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJRxAH4AonEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAGmthbW9uLnRyYWNlLk9yZGVyZWRTYW1wbGVydXEAfgBvAAAAAHEAfgDwdXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAADc3EAfgCIdAAHU2FtcGxlcnNxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJR0AAVrYW1vbnNxAH4AlHQABXRyYWNlcQB+AJtzcQB+AIhxAH4Ai3NxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJRxAH4Al3NxAH4AlHEAfgCZcQB+AJtzcQB+AIhxAH4AnXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJRxAH4AonEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAGmthbW9uLnRyYWNlLk9yZGVyZWRTYW1wbGVydXEAfgBvAAAAAHEAfgCodXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAACc3EAfgCIcQB+AItzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUcQB+AJdzcQB+AJRxAH4AmXEAfgCbc3EAfgCIcQB+AJ1zcQB+AIxzcQB+AI91cQB+AJIAAAACc3EAfgCUcQB+AKJxAH4Am3NxAH4AXHEAfgBpdXEAfgBqAAAAAHNxAH4AbAB0ABxrYW1vbi50cmFjZS5UaHJlc2hvbGRTYW1wbGVydXEAfgBvAAAAAHEAfgDwdXEAfgB1AAAAAHNxAH4Ad3EAfgB9c3EAfgB3c3EAfgB/c3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AIYAAAADc3EAfgCIdAAHU2FtcGxlcnNxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJR0AAVrYW1vbnNxAH4AlHQABXRyYWNlcQB+AJtzcQB+AIhxAH4Ai3NxAH4AjHNxAH4Aj3VxAH4AkgAAAANzcQB+AJRxAH4Al3NxAH4AlHEAfgCZcQB+AJtzcQB+AIhxAH4AnXNxAH4AjHNxAH4Aj3VxAH4AkgAAAAJzcQB+AJRxAH4AonEAfgCbc3EAfgBccQB+AGl1cQB+AGoAAAAAc3EAfgBsAHQAGGthbW9uLnRyYWNlLkNsb2NrU2FtcGxlcnVxAH4AbwAAAABxAH4A8HVxAH4AdQAAAABzcQB+AHdxAH4AfXNxAH4Ad3NxAH4Af3NxAH4Ad3VxAH4AWgAAAABzcQB+AHd1cQB+AFoAAAAAc3EAfgB3dXEAfgCGAAAAA3NxAH4AiHQAB1NhbXBsZXJzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUdAAFa2Ftb25zcQB+AJR0AAV0cmFjZXEAfgCbc3EAfgCIcQB+AItzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUcQB+AJdzcQB+AJRxAH4AmXEAfgCbc3EAfgCIcQB+AJ1zcQB+AIxzcQB+AI91cQB+AJIAAAACc3EAfgCUcQB+AKJxAH4Am3NxAH4AXHEAfgBpdXEAfgBqAAAAAHNxAH4AbAB0ACFrYW1vbi50cmFjZS5EZWZhdWx0VG9rZW5HZW5lcmF0b3J1cQB+AG8AAAAAcQB+APB1cQB+AHUAAAAAc3EAfgB3cQB+AH1zcQB+AHdzcQB+AH9zcQB+AHd1cQB+AFoAAAAAc3EAfgB3dXEAfgBaAAAAAHNxAH4Ad3VxAH4AhgAAAANzcgAXeHNidGkuYXBpLlBhcmFtZXRlcml6ZWQWbO5pA8m7fwIAAkwACGJhc2VUeXBlcQB+AIlbAA10eXBlQXJndW1lbnRzdAARW0x4c2J0aS9hcGkvVHlwZTt4cQB+AHtzcQB+AIh0AAlGdW5jdGlvbjBzcQB+AIxzcQB+AI91cQB+AJIAAAACc3EAfgCUcQB+AKJxAH4Am3VxAH4AhgAAAAFzcQB+AIh0AAZTdHJpbmdzcQB+AIxzcQB+AI91cQB+AJIAAAADc3EAfgCUcQB+AJdzcQB+AJRxAH4AmXEAfgCbc3EAfgCIcQB+AItxAH4BrnNxAH4AiHEAfgCdcQB+Aad1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAnNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgAMeHB0AAVrYW1vbnNxAH4Bt3QAC2thbW9uLnRyYWNlc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADEwAD3NvdXJjZURpcmVjdG9yeXEAfgAMeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUmVFRoxhVuVFeiglCHblcgY9IcEw=
kamon.trace.TraceContext -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhw2LQGjAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAABLc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hw+Dt+l3QAEUVtcHR5VHJhY2VDb250ZXh0c3EAfgAM4CIgFnQABm5vdGlmeXNxAH4ADFZ90zZ0AAtNZXRyaWNzT25seXNxAH4ADIhSd5x0AAxFbXB0eVNlZ21lbnRzcQB+AAyUkW/AdAAEbmFtZXNxAH4ADIG0lfR0AA9jYXB0dXJlTmFub1RpbWVzcQB+AAzp7EZ1dAAMdHJhY2VDb250ZXh0c3EAfgAMANVUwHQABmFkZFRhZ3NxAH4ADHU8bBR0AAR3YWl0c3EAfgAMvXVIOnQADFRyYWNlQ29udGV4dHNxAH4ADK+7h3h0AA0kYXNJbnN0YW5jZU9mc3EAfgAMscN/03QADHN0YXJ0U2VnbWVudHNxAH4ADFrHJFR0AAxTZWdtZW50QXdhcmVzcQB+AAwzLFYKdAAMcHJvZHVjdEFyaXR5c3EAfgAMp3MUWHQABmVxdWFsc3NxAH4ADNarRZd0AAthZGRNZXRhZGF0YXNxAH4ADINfUdB0ABRGaW5pc2hlZFN1Y2Nlc3NmdWxseXNxAH4ADDp4reN0AAR0YWdzc3EAfgAMFhSzYHQADGFzSW5zdGFuY2VPZnNxAH4ADBqtjyV0AAtTaW1wbGVUcmFjZXNxAH4ADIzRPyx0ABxUaW1lc3RhbXBlZFRyYWNlQ29udGV4dEF3YXJlc3EAfgAMbb5cKnQADHN5bmNocm9uaXplZHNxAH4ADOiUT/N0AAhpc0Nsb3NlZHNxAH4ADCvww0R0AAhEYXRhYmFzZXNxAH4ADMOWzSJ0AA0kaXNJbnN0YW5jZU9mc3EAfgAMXx+qRHQADUxldmVsT2ZEZXRhaWxzcQB+AAxWo0u5dAAIbm9uRW1wdHlzcQB+AAx3hbcKdAAPZmluaXNoV2l0aEVycm9yc3EAfgAMUmOQGnQACGNhbkVxdWFsc3EAfgAM3XI8onQABmZpbmlzaHNxAH4ADNaitat0AA1wcm9kdWN0UHJlZml4c3EAfgAMdAjlkHQABkNsb3NlZHNxAH4ADMqfbJJ0AAdzZWdtZW50c3EAfgAMNQ5tgXQACW5vdGlmeUFsbHNxAH4ADOrfjFF0ABN3aXRoTmV3QXN5bmNTZWdtZW50c3EAfgAMgVy3/XQACXJlbW92ZVRhZ3NxAH4ADHumonV0AAZyZW5hbWVzcQB+AAwKKNz+dAADTE9Ec3EAfgAM7h6S2nQADGlzSW5zdGFuY2VPZnNxAH4ADPixJlZ0AAY8aW5pdD5zcQB+AAwzVjkrdAAYRGVmYXVsdFRyYWNlQ29udGV4dEF3YXJlc3EAfgAMwbncpXQAB1NlZ21lbnRzcQB+AAzmh8N2dAACPT1zcQB+AAxMyUSldAAFY2xvbmVzcQB+AAyTnI1SdAAQZXF1YWxzJGV4dGVuc2lvbnNxAH4ADOKOqeN0AAZzdGF0dXNzcQB+AAx5TGJHdAAFdG9rZW5zcQB+AAwsW5s6dAAHZGVmYXVsdHNxAH4ADFNxeft0AAdsaWJyYXJ5c3EAfgAM4wh6B3QAE0RlZmF1bHRTZWdtZW50QXdhcmVzcQB+AAzDi3/OdAAET3BlbnNxAH4ADKKfzFx0AAYkaW5pdCRzcQB+AAyFvRx0dAAOc3RhcnRUaW1lc3RhbXBzcQB+AAwgt1cmdAAIY2F0ZWdvcnlzcQB+AAx6VGlPdAAIdG9TdHJpbmdzcQB+AAyifQR8dAACIT1zcQB+AAxjGCmBdAAHY29sbGVjdHNxAH4ADIp3rrl0AAhnZXRDbGFzc3NxAH4ADBfZcWN0AA53aXRoTmV3U2VnbWVudHNxAH4ADJvqujd0ABFUcmFjZUNvbnRleHRBd2FyZXNxAH4ADLCKa750AA9TZWdtZW50Q2F0ZWdvcnlzcQB+AAxkuQyudAAHaXNFbXB0eXNxAH4ADFPnDI50AAJuZXNxAH4ADLb3ay10ABJoYXNoQ29kZSRleHRlbnNpb25zcQB+AAy29KnldAAKSHR0cENsaWVudHNxAH4ADHr1DZV0AAJlcXNxAH4ADN8iSHB0AA9wcm9kdWN0SXRlcmF0b3JzcQB+AAzoFvvidAAJRnVsbFRyYWNlc3EAfgAME+soSnQAEUZpbmlzaGVkV2l0aEVycm9yc3EAfgAM/Wb0tnQAAiMjc3EAfgAMte45unQACGZpbmFsaXplc3EAfgAMJOMZA3QADnByb2R1Y3RFbGVtZW50c3EAfgAM8gkF+XQACGhhc2hDb2Rlc3EAfgAMJ4RRTXQABlN0YXR1c3NxAH4ADI1h/FJ0AAVsZXZlbHNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAABBzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AK14cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ABhrYW1vbi50cmFjZS5UcmFjZUNvbnRleHR1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4AxXNyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgCtTAAJaW5oZXJpdGVkcQB+AK1MAAdwYXJlbnRzcQB+AK14cQB+AMpzcQB+AMV1cQB+AKgAAAAAc3EAfgDFdXEAfgCoAAAAAHNxAH4AxXVyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4AyXQABk9iamVjdHNyABN4c2J0aS5hcGkuU2lu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
kamon.trace.TraceInfo -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwzPjh/QAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA+c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwvBjIC3QABm5vdGlmeXNxAH4ADON2KcN0AARuYW1lc3EAfgAM96Kz7HQABHdhaXRzcQB+AAytiAfkdAAOY29weSRkZWZhdWx0JDJzcQB+AAzjw7iudAANJGFzSW5zdGFuY2VPZnNxAH4ADB/ztc90AAl0aW1lc3RhbXBzcQB+AAww00fhdAAOY29weSRkZWZhdWx0JDVzcQB+AAzU74fMdAARc2V0Q3VycmVudENvbnRleHRzcQB+AAzKKU2vdAAMcHJvZHVjdEFyaXR5c3EAfgAMA2FDI3QABmVxdWFsc3NxAH4ADCOAWsF0AAR0YWdzc3EAfgAMHI7lcXQAC1NlZ21lbnRJbmZvc3EAfgAMvkuBI3QADGFzSW5zdGFuY2VPZnNxAH4ADP49t1d0AAxzeW5jaHJvbml6ZWRzcQB+AAygRHV+dAANJGlzSW5zdGFuY2VPZnNxAH4ADOWD0pJ0AA5jb3B5JGRlZmF1bHQkOHNxAH4ADDIslXF0AAlzdWJzY3JpYmVzcQB+AAxq/2bldAAIY2FuRXF1YWxzcQB+AAy9VZa8dAAOY29weSRkZWZhdWx0JDRzcQB+AAyD1NrzdAAKbmV3Q29udGV4dHNxAH4ADKoz2mp0AA1wcm9kdWN0UHJlZml4c3EAfgAMIgQclnQACW5vdGlmeUFsbHNxAH4ADOffirZ0AAxpc0luc3RhbmNlT2ZzcQB+AAwNMBkhdAAOY3VycmVudENvbnRleHRzcQB+AAwCwDcKdAAGPGluaXQ+c3EAfgAM+u2CUnQAC2VsYXBzZWRUaW1lc3EAfgAMZUUDUHQABWFwcGx5c3EAfgAMov33wnQAAj09c3EAfgAM89cvxXQABWNsb25lc3EAfgAMVoNLy3QAC3Vuc3Vic2NyaWJlc3EAfgAMV/x5TXQABnN0YXR1c3NxAH4ADA+qtF90AAV0b2tlbnNxAH4ADLausA50AAdsaWJyYXJ5c3EAfgAM3Ufm0XQACHNlZ21lbnRzc3EAfgAMUXAAdnQADmNvcHkkZGVmYXVsdCQ3c3EAfgAMQsdKe3QABiRpbml0JHNxAH4ADH0XcMp0ABBUcmFjZXJNb2R1bGVJbXBsc3EAfgAMZNFDLnQAFmRpc3BhdGNoVHJhY2luZ0NvbnRleHRzcQB+AAxSUFQGdAAUX3RyYWNlQ29udGV4dFN0b3JhZ2VzcQB+AAwbgGa3dAAOY29weSRkZWZhdWx0JDNzcQB+AAyB/KAHdAAEY29weXNxAH4ADGjQIy50AAhjYXRlZ29yeXNxAH4ADFZZRL10AAt3aXRoQ29udGV4dHNxAH4ADBy7r7R0AAhtZXRhZGF0YXNxAH4ADIfiyfx0ABNjbGVhckN1cnJlbnRDb250ZXh0c3EAfgAMN4+x7HQACHRvU3RyaW5nc3EAfgAMof8b8XQAAiE9c3EAfgAM+cLvtXQADndpdGhOZXdDb250ZXh0c3EAfgAMbVpl3XQACGdldENsYXNzc3EAfgAMxuN+NHQADmNvcHkkZGVmYXVsdCQxc3EAfgAMjOUh33QABXN0YXJ0c3EAfgAM6pOUP3QADmNvcHkkZGVmYXVsdCQ2c3EAfgAMsb0hMHQAAm5lc3EAfgAMG4J1A3QABlRyYWNlcnNxAH4ADM1Be/90AAlUcmFjZUluZm9zcQB+AAx7zogjdAACZXFzcQB+AAx7bAvrdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMVYaSYXQADFRyYWNlck1vZHVsZXNxAH4ADK/DceZ0AAIjI3NxAH4ADCs9Q3d0AAhmaW5hbGl6ZXNxAH4ADBo6XZ90AA5wcm9kdWN0RWxlbWVudHNxAH4ADGWjGgp0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAZzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AJN4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ABhrYW1vbi50cmFjZS5UcmFjZXJNb2R1bGV1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4Aq3NyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgCTTAAJaW5oZXJpdGVkcQB+AJNMAAdwYXJlbnRzcQB+AJN4cQB+ALBzcQB+AKt1cQB+AI4AAAAAc3EAfgCrdXEAfgCOAAAAAHNxAH4Aq3VyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4Ar3QABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4Ar3NyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4AyHQABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4AyXNxAH4AvHQAA0FueXNxAH4AwHNxAH4Aw3VxAH4AxgAAAAJzcQB+AMh0AAVzY2FsYXEAfgDPc3EAfgCQcQB+AJ11cQB+AJ4AAAAAc3EAfgCgAHQAEmthbW9uLnRyYWNlLlRyYWNlcnVxAH4AowAAAAB+cQB+AKV0AAZNb2R1bGV1cQB+AKkAAAAAc3EAfgCrcQB+ALFzcQB+AKtzcQB+ALNzcQB+AKt1cQB+AI4AAAAAc3EAfgCrdXEAfgCOAAAAAHNxAH4Aq3VxAH4AugAAAAJzcQB+ALxxAH4Av3NxAH4AwHNxAH4Aw3VxAH4AxgAAAANzcQB+AMhxAH4Ay3NxAH4AyHEAfgDNcQB+AM9zcQB+ALxxAH4A0XNxAH4AwHNxAH4Aw3VxAH4AxgAAAAJzcQB+AMhxAH4A1nEAfgDPc3EAfgCQc3IAEXhzYnRpLmFwaS5Qcml2YXRlU6lggSbp1T4CAAB4cgATeHNidGkuYXBpLlF1YWxpZmllZKq0Xe9UsW0YAgABTAAJcXVhbGlmaWVydAAVTHhzYnRpL2FwaS9RdWFsaWZpZXI7eHEAfgCcc3IAFXhzYnRpLmFwaS5JZFF1YWxpZmllcreHEPQ9sm21AgABTAAFdmFsdWVxAH4ADXhyABN4c2J0aS5hcGkuUXVhbGlmaWVys3iUqevWWycCAAB4cHQABWthbW9udXEAfgCeAAAAAHNxAH4AoAB0ABxrYW1vbi50cmFjZS5UcmFjZXJNb2R1bGVJbXBsdXEAfgCjAAAAAH5xAH4ApXQACENsYXNzRGVmdXEAfgCpAAAAAHNxAH4Aq3EAfgCxc3EAfgCrc3EAfgCzc3EAfgCrdXEAfgCOAAAAAHNxAH4Aq3VxAH4AjgAAAABzcQB+AKt1cQB+ALoAAAADc3EAfgC8dAAMVHJhY2VyTW9kdWxlc3EAfgDAc3EAfgDDdXEAfgDGAAAAA3NxAH4AyHQABWthbW9uc3EAfgDIdAAFdHJhY2VxAH4Az3NxAH4AvHEAfgC/c3EAfgDAc3EAfgDDdXEAfgDGAAAAA3NxAH4AyHEAfgDLc3EAfgDIcQB+AM1xAH4Az3NxAH4AvHEAfgDRc3EAfgDAc3EAfgDDdXEAfgDGAAAAAnNxAH4AyHEAfgDWcQB+AM9zcQB+AJBzcQB+APRzcQB+APh0AAVrYW1vbnVxAH4AngAAAABzcQB+AKAAdAAca2Ftb24udHJhY2UuVHJhY2VyTW9kdWxlSW1wbHVxAH4AowAAAABxAH4A3HVxAH4AqQAAAABzcQB+AKtxAH4AsXNxAH4Aq3NxAH4As3NxAH4Aq3VxAH4AjgAAAABzcQB+AKt1cQB+AI4AAAAAc3EAfgCrdXEAfgC6AAAAAnNxAH4AvHEAfgC/c3EAfgDAc3EAfgDDdXEAfgDGAAAAA3NxAH4AyHEAfgDLc3EAfgDIcQB+AM1xAH4Az3NxAH4AvHEAfgDRc3EAfgDAc3EAfgDDdXEAfgDGAAAAAnNxAH4AyHEAfgDWcQB+AM9zcQB+AJBxAH4AnXVxAH4AngAAAABzcQB+AKAAdAAVa2Ftb24udHJhY2UuVHJhY2VJbmZvdXEAfgCjAAAAAHEAfgEAdXEAfgCpAAAAAHNxAH4Aq3EAfgCxc3EAfgCrc3EAfgCzc3EAfgCrdXEAfgCOAAAAAHNxAH4Aq3VxAH4AjgAAAABzcQB+AKt1cQB+ALoAAAAGc3EAfgC8dAAMU2VyaWFsaXphYmxlc3EAfgDAc3EAfgDDdXEAfgDGAAAAAnNxAH4AyHEAfgDWcQB+AM9zcQB+ALxxAH4BTXNxAH4AwHNxAH4Aw3VxAH4AxgAAAANzcQB+AMhxAH4Ay3NxAH4AyHQAAmlvcQB+AM9zcQB+ALx0AAdQcm9kdWN0cQB+AU5zcQB+ALx0AAZFcXVhbHNxAH4BTnNxAH4AvHEAfgC/c3EAfgDAc3EAfgDDdXEAfgDGAAAAA3NxAH4AyHEAfgDLc3EAfgDIcQB+AM1xAH4Az3NxAH4AvHEAfgDRcQB+AU5zcQB+AJBxAH4AnXVxAH4AngAAAABzcQB+AKAAdAAXa2Ftb24udHJhY2UuU2VnbWVudEluZm91cQB+AKMAAAAAcQB+AQB1cQB+AKkAAAAAc3EAfgCrcQB+ALFzcQB+AKtzcQB+ALNzcQB+AKt1cQB+AI4AAAAAc3EAfgCrdXEAfgCOAAAAAHNxAH4Aq3VxAH4AugAAAAZzcQB+ALxxAH4BTXNxAH4AwHNxAH4Aw3VxAH4AxgAAAAJzcQB+AMhxAH4A1nEAfgDPc3EAfgC8cQB+AU1zcQB+AMBzcQB+AMN1cQB+AMYAAAADc3EAfgDIcQB+AMtzcQB+AMh0AAJpb3EAfgDPc3EAfgC8cQB+AVpxAH4BdHNxAH4AvHQABkVxdWFsc3EAfgF0c3EAfgC8cQB+AL9zcQB+AMBzcQB+AMN1cQB+AMYAAAADc3EAfgDIcQB+AMtzcQB+AMhxAH4AzXEAfgDPc3EAfgC8cQB+ANFxAH4BdHVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQABWthbW9uc3EAfgGLdAALa2Ftb24udHJhY2VzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABR65NF0oBabnhCGJRchcS9aWbVDFQ==
kamon.trace.TraceLocal$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwGdRXTAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAuc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwokymbnQAC3N0b3JlRm9yTWRjc3EAfgAMFszAQHQABm5vdGlmeXNxAH4ADDuGwV90AAd1bmFwcGx5c3EAfgAMEZOZ03QABHdhaXRzcQB+AAxr5dghdAANJGFzSW5zdGFuY2VPZnNxAH4ADHBY9uV0AAdjb21wb3Nlc3EAfgAMnAEy9HQADHByb2R1Y3RBcml0eXNxAH4ADN0cNnt0AAZlcXVhbHNzcQB+AAwTYhYadAAMYXNJbnN0YW5jZU9mc3EAfgAMy0doBXQACHJldHJpZXZlc3EAfgAMP0vVnHQAGERlZmF1bHRLZXlBdmFpbGFibGVUb01kY3NxAH4ADI3bY850AAZtZGNLZXlzcQB+AAzcbj5IdAAMc3luY2hyb25pemVkc3EAfgAMCeAtQXQADSRpc0luc3RhbmNlT2ZzcQB+AAxRktVBdAAHYW5kVGhlbnNxAH4ADJTz3hJ0AAVzdG9yZXNxAH4ADP7phRl0AApUcmFjZUxvY2Fsc3EAfgAM1SHrZXQACGNhbkVxdWFsc3EAfgAMxA+X33QAEXVuZGVybHlpbmdTdG9yYWdlc3EAfgAMGLGsgXQADXByb2R1Y3RQcmVmaXhzcQB+AAwn+kPmdAAQbmV3VHJhY2VMb2NhbEtleXNxAH4ADAlF8rp0AAlub3RpZnlBbGxzcQB+AAywzizNdAAMaXNJbnN0YW5jZU9mc3EAfgAM9yeDynQAEVRyYWNlTG9jYWxTdG9yYWdlc3EAfgAMMREXH3QABjxpbml0PnNxAH4ADE/Cs3Z0AAVhcHBseXNxAH4ADDFE86t0AAlnZXRPckVsc2VzcQB+AAxMh4bmdAACPT1zcQB+AAyvyV9PdAAFY2xvbmVzcQB+AAy0JeFudAAGJGluaXQkc3EAfgAMBUo8dnQABGNvcHlzcQB+AAy3JDJxdAAIdG9TdHJpbmdzcQB+AAzcVrdqdAACIT1zcQB+AAyFlUtTdAADZ2V0c3EAfgAMzt3PunQADkF2YWlsYWJsZVRvTWRjc3EAfgAMpOliQXQACGdldENsYXNzc3EAfgAM2X3y7XQADmNvcHkkZGVmYXVsdCQxc3EAfgAMX7waPHQAAm5lc3EAfgAM7py7BHQADVRyYWNlTG9jYWxLZXlzcQB+AAyUH2gwdAAHZnJvbUtleXNxAH4ADNgv96B0AAJlcXNxAH4ADECU9pV0AA9wcm9kdWN0SXRlcmF0b3JzcQB+AAyc4xIsdAACIyNzcQB+AAyQ2JV1dAAIZmluYWxpemVzcQB+AAxx3M3JdAAOcHJvZHVjdEVsZW1lbnRzcQB+AAwkChpedAAIaGFzaENvZGVzcgATeHNidGkuYXBpLlNvdXJjZUFQSblep/kpIzikAgACWwALZGVmaW5pdGlvbnN0ABdbTHhzYnRpL2FwaS9EZWZpbml0aW9uO1sACHBhY2thZ2VzdAAUW0x4c2J0aS9hcGkvUGFja2FnZTt4cHVyABdbTHhzYnRpLmFwaS5EZWZpbml0aW9uO4jJXOe0414OAgAAeHAAAAACc3IAE3hzYnRpLmFwaS5DbGFzc0xpa2WDNByh37CXbAIABEwADmRlZmluaXRpb25UeXBldAAaTHhzYnRpL2FwaS9EZWZpbml0aW9uVHlwZTtbABBzYXZlZEFubm90YXRpb25zdAATW0xqYXZhL2xhbmcvU3RyaW5nO0wACHNlbGZUeXBldAAQTHhzYnRpL2FwaS9MYXp5O0wACXN0cnVjdHVyZXEAfgBzeHIAIXhzYnRpLmFwaS5QYXJhbWV0ZXJpemVkRGVmaW5pdGlvbvkRbrHVUDziAgABWwAOdHlwZVBhcmFtZXRlcnN0ABpbTHhzYnRpL2FwaS9UeXBlUGFyYW1ldGVyO3hyABR4c2J0aS5hcGkuRGVmaW5pdGlvbocqG+hxQuNGAgAETAAGYWNjZXNzdAASTHhzYnRpL2FwaS9BY2Nlc3M7WwALYW5ub3RhdGlvbnN0ABdbTHhzYnRpL2FwaS9Bbm5vdGF0aW9uO0wACW1vZGlmaWVyc3QAFUx4c2J0aS9hcGkvTW9kaWZpZXJzO0wABG5hbWVxAH4ADXhwc3IAEHhzYnRpLmFwaS5QdWJsaWO6WD2ubC1gQgIAAHhyABB4c2J0aS5hcGkuQWNjZXNz3WKa+B1jMUgCAAB4cHVyABdbTHhzYnRpLmFwaS5Bbm5vdGF0aW9uO+uX6xkQ9o1IAgAAeHAAAAAAc3IAE3hzYnRpLmFwaS5Nb2RpZmllcnOX52HcEyZ7swIAAUIABWZsYWdzeHAAdAAWa2Ftb24udHJhY2UuVHJhY2VMb2NhbHVyABpbTHhzYnRpLmFwaS5UeXBlUGFyYW1ldGVyO9ltJg8onfK2AgAAeHAAAAAAfnIAGHhzYnRpLmFwaS5EZWZpbml0aW9uVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQABk1vZHVsZXVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4Ai3NyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgBzTAAJaW5oZXJpdGVkcQB+AHNMAAdwYXJlbnRzcQB+AHN4cQB+AJBzcQB+AIt1cQB+AG4AAAAAc3EAfgCLdXEAfgBuAAAAAHNxAH4Ai3VyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4Aj3QABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4Aj3NyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4AqHQABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4AqXNxAH4AnHQAA0FueXNxAH4AoHNxAH4Ao3VxAH4ApgAAAAJzcQB+AKh0AAVzY2FsYXEAfgCvc3EAfgBwcQB+AH11cQB+AH4AAAAAc3EAfgCAAHQAHWthbW9uLnRyYWNlLlRyYWNlTG9jYWxTdG9yYWdldXEAfgCDAAAAAH5xAH4AhXQACENsYXNzRGVmdXEAfgCJAAAAAHNxAH4Ai3EAfgCRc3EAfgCLc3EAfgCTc3EAfgCLdXEAfgBuAAAAAHNxAH4Ai3VxAH4AbgAAAABzcQB+AIt1cQB+AJoAAAACc3EAfgCccQB+AJ9zcQB+AKBzcQB+AKN1cQB+AKYAAAADc3EAfgCocQB+AKtzcQB+AKhxAH4ArXEAfgCvc3EAfgCccQB+ALFzcQB+AKBzcQB+AKN1cQB+AKYAAAACc3EAfgCocQB+ALZxAH4Ar3VyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQABWthbW9uc3EAfgDVdAALa2Ftb24udHJhY2VzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABRe/Gx5KhX4QRn//p3jI5yj6kx4gA==
kamon.trace.Tracer -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwzPjh/QAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA+c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwvBjIC3QABm5vdGlmeXNxAH4ADON2KcN0AARuYW1lc3EAfgAM96Kz7HQABHdhaXRzcQB+AAytiAfkdAAOY29weSRkZWZhdWx0JDJzcQB+AAzjw7iudAANJGFzSW5zdGFuY2VPZnNxAH4ADB/ztc90AAl0aW1lc3RhbXBzcQB+AAww00fhdAAOY29weSRkZWZhdWx0JDVzcQB+AAzU74fMdAARc2V0Q3VycmVudENvbnRleHRzcQB+AAzKKU2vdAAMcHJvZHVjdEFyaXR5c3EAfgAMA2FDI3QABmVxdWFsc3NxAH4ADCOAWsF0AAR0YWdzc3EAfgAMHI7lcXQAC1NlZ21lbnRJbmZvc3EAfgAMvkuBI3QADGFzSW5zdGFuY2VPZnNxAH4ADP49t1d0AAxzeW5jaHJvbml6ZWRzcQB+AAygRHV+dAANJGlzSW5zdGFuY2VPZnNxAH4ADOWD0pJ0AA5jb3B5JGRlZmF1bHQkOHNxAH4ADDIslXF0AAlzdWJzY3JpYmVzcQB+AAxq/2bldAAIY2FuRXF1YWxzcQB+AAy9VZa8dAAOY29weSRkZWZhdWx0JDRzcQB+AAyD1NrzdAAKbmV3Q29udGV4dHNxAH4ADKoz2mp0AA1wcm9kdWN0UHJlZml4c3EAfgAMIgQclnQACW5vdGlmeUFsbHNxAH4ADOffirZ0AAxpc0luc3RhbmNlT2ZzcQB+AAwNMBkhdAAOY3VycmVudENvbnRleHRzcQB+AAwCwDcKdAAGPGluaXQ+c3EAfgAM+u2CUnQAC2VsYXBzZWRUaW1lc3EAfgAMZUUDUHQABWFwcGx5c3EAfgAMov33wnQAAj09c3EAfgAM89cvxXQABWNsb25lc3EAfgAMVoNLy3QAC3Vuc3Vic2NyaWJlc3EAfgAMV/x5TXQABnN0YXR1c3NxAH4ADA+qtF90AAV0b2tlbnNxAH4ADLausA50AAdsaWJyYXJ5c3EAfgAM3Ufm0XQACHNlZ21lbnRzc3EAfgAMUXAAdnQADmNvcHkkZGVmYXVsdCQ3c3EAfgAMQsdKe3QABiRpbml0JHNxAH4ADH0XcMp0ABBUcmFjZXJNb2R1bGVJbXBsc3EAfgAMZNFDLnQAFmRpc3BhdGNoVHJhY2luZ0NvbnRleHRzcQB+AAxSUFQGdAAUX3RyYWNlQ29udGV4dFN0b3JhZ2VzcQB+AAwbgGa3dAAOY29weSRkZWZhdWx0JDNzcQB+AAyB/KAHdAAEY29weXNxAH4ADGjQIy50AAhjYXRlZ29yeXNxAH4ADFZZRL10AAt3aXRoQ29udGV4dHNxAH4ADBy7r7R0AAhtZXRhZGF0YXNxAH4ADIfiyfx0ABNjbGVhckN1cnJlbnRDb250ZXh0c3EAfgAMN4+x7HQACHRvU3RyaW5nc3EAfgAMof8b8XQAAiE9c3EAfgAM+cLvtXQADndpdGhOZXdDb250ZXh0c3EAfgAMbVpl3XQACGdldENsYXNzc3EAfgAMxuN+NHQADmNvcHkkZGVmYXVsdCQxc3EAfgAMjOUh33QABXN0YXJ0c3EAfgAM6pOUP3QADmNvcHkkZGVmYXVsdCQ2c3EAfgAMsb0hMHQAAm5lc3EAfgAMG4J1A3QABlRyYWNlcnNxAH4ADM1Be/90AAlUcmFjZUluZm9zcQB+AAx7zogjdAACZXFzcQB+AAx7bAvrdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMVYaSYXQADFRyYWNlck1vZHVsZXNxAH4ADK/DceZ0AAIjI3NxAH4ADCs9Q3d0AAhmaW5hbGl6ZXNxAH4ADBo6XZ90AA5wcm9kdWN0RWxlbWVudHNxAH4ADGWjGgp0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAZzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AJN4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ABhrYW1vbi50cmFjZS5UcmFjZXJNb2R1bGV1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4Aq3NyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgCTTAAJaW5oZXJpdGVkcQB+AJNMAAdwYXJlbnRzcQB+AJN4cQB+ALBzcQB+AKt1cQB+AI4AAAAAc3EAfgCrdXEAfgCOAAAAAHNxAH4Aq3VyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4Ar3QABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4Ar3NyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4AyHQABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4AyXNxAH4AvHQA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vHQABkVxdWFsc3EAfgF0c3EAfgC8cQB+AL9zcQB+AMBzcQB+AMN1cQB+AMYAAAADc3EAfgDIcQB+AMtzcQB+AMhxAH4AzXEAfgDPc3EAfgC8cQB+ANFxAH4BdHVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQABWthbW9uc3EAfgGLdAALa2Ftb24udHJhY2VzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABR65NF0oBabnhCGJRchcS9aWbVDFQ==
kamon.trace.Tracer$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwzPjh/QAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA+c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwvBjIC3QABm5vdGlmeXNxAH4ADON2KcN0AARuYW1lc3EAfgAM96Kz7HQABHdhaXRzcQB+AAytiAfkdAAOY29weSRkZWZhdWx0JDJzcQB+AAzjw7iudAANJGFzSW5zdGFuY2VPZnNxAH4ADB/ztc90AAl0aW1lc3RhbXBzcQB+AAww00fhdAAOY29weSRkZWZhdWx0JDVzcQB+AAzU74fMdAARc2V0Q3VycmVudENvbnRleHRzcQB+AAzKKU2vdAAMcHJvZHVjdEFyaXR5c3EAfgAMA2FDI3QABmVxdWFsc3NxAH4ADCOAWsF0AAR0YWdzc3EAfgAMHI7lcXQAC1NlZ21lbnRJbmZvc3EAfgAMvkuBI3QADGFzSW5zdGFuY2VPZnNxAH4ADP49t1d0AAxzeW5jaHJvbml6ZWRzcQB+AAygRHV+dAANJGlzSW5zdGFuY2VPZnNxAH4ADOWD0pJ0AA5jb3B5JGRlZmF1bHQkOHNxAH4ADDIslXF0AAlzdWJzY3JpYmVzcQB+AAxq/2bldAAIY2FuRXF1YWxzcQB+AAy9VZa8dAAOY29weSRkZWZhdWx0JDRzcQB+AAyD1NrzdAAKbmV3Q29udGV4dHNxAH4ADKoz2mp0AA1wcm9kdWN0UHJlZml4c3EAfgAMIgQclnQACW5vdGlmeUFsbHNxAH4ADOffirZ0AAxpc0luc3RhbmNlT2ZzcQB+AAwNMBkhdAAOY3VycmVudENvbnRleHRzcQB+AAwCwDcKdAAGPGluaXQ+c3EAfgAM+u2CUnQAC2VsYXBzZWRUaW1lc3EAfgAMZUUDUHQABWFwcGx5c3EAfgAMov33wnQAAj09c3EAfgAM89cvxXQABWNsb25lc3EAfgAMVoNLy3QAC3Vuc3Vic2NyaWJlc3EAfgAMV/x5TXQABnN0YXR1c3NxAH4ADA+qtF90AAV0b2tlbnNxAH4ADLausA50AAdsaWJyYXJ5c3EAfgAM3Ufm0XQACHNlZ21lbnRzc3EAfgAMUXAAdnQADmNvcHkkZGVmYXVsdCQ3c3EAfgAMQsdKe3QABiRpbml0JHNxAH4ADH0XcMp0ABBUcmFjZXJNb2R1bGVJbXBsc3EAfgAMZNFDLnQAFmRpc3BhdGNoVHJhY2luZ0NvbnRleHRzcQB+AAxSUFQGdAAUX3RyYWNlQ29udGV4dFN0b3JhZ2VzcQB+AAwbgGa3dAAOY29weSRkZWZhdWx0JDNzcQB+AAyB/KAHdAAEY29weXNxAH4ADGjQIy50AAhjYXRlZ29yeXNxAH4ADFZZRL10AAt3aXRoQ29udGV4dHNxAH4ADBy7r7R0AAhtZXRhZGF0YXNxAH4ADIfiyfx0ABNjbGVhckN1cnJlbnRDb250ZXh0c3EAfgAMN4+x7HQACHRvU3RyaW5nc3EAfgAMof8b8XQAAiE9c3EAfgAM+cLvtXQADndpdGhOZXdDb250ZXh0c3EAfgAMbVpl3XQACGdldENsYXNzc3EAfgAMxuN+NHQADmNvcHkkZGVmYXVsdCQxc3EAfgAMjOUh33QABXN0YXJ0c3EAfgAM6pOUP3QADmNvcHkkZGVmYXVsdCQ2c3EAfgAMsb0hMHQAAm5lc3EAfgAMG4J1A3QABlRyYWNlcnNxAH4ADM1Be/90AAlUcmFjZUluZm9zcQB+AAx7zogjdAACZXFzcQB+AAx7bAvrdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMVYaSYXQADFRyYWNlck1vZHVsZXNxAH4ADK/DceZ0AAIjI3NxAH4ADCs9Q3d0AAhmaW5hbGl6ZXNxAH4ADBo6XZ90AA5wcm9kdWN0RWxlbWVudHNxAH4ADGWjGgp0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAZzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AJN4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ABhrYW1vbi50cmFjZS5UcmFjZXJNb2R1bGV1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4Aq3NyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgCTTAAJaW5oZXJpdGVkcQB+AJNMAAdwYXJlbnRzcQB+AJN4cQB+ALBzcQB+AKt1cQB+AI4AAAAAc3EAfgCrdXEAfgCOAAAAAHNxAH4Aq3VyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4Ar3QABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4Ar3NyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4AyHQABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4AyXNxAH4AvHQA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vHQABkVxdWFsc3EAfgF0c3EAfgC8cQB+AL9zcQB+AMBzcQB+AMN1cQB+AMYAAAADc3EAfgDIcQB+AMtzcQB+AMhxAH4AzXEAfgDPc3EAfgC8cQB+ANFxAH4BdHVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQABWthbW9uc3EAfgGLdAALa2Ftb24udHJhY2VzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABR65NF0oBabnhCGJRchcS9aWbVDFQ==
kamon.trace.TracerModuleImpl -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwzPjh/QAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAA+c3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwvBjIC3QABm5vdGlmeXNxAH4ADON2KcN0AARuYW1lc3EAfgAM96Kz7HQABHdhaXRzcQB+AAytiAfkdAAOY29weSRkZWZhdWx0JDJzcQB+AAzjw7iudAANJGFzSW5zdGFuY2VPZnNxAH4ADB/ztc90AAl0aW1lc3RhbXBzcQB+AAww00fhdAAOY29weSRkZWZhdWx0JDVzcQB+AAzU74fMdAARc2V0Q3VycmVudENvbnRleHRzcQB+AAzKKU2vdAAMcHJvZHVjdEFyaXR5c3EAfgAMA2FDI3QABmVxdWFsc3NxAH4ADCOAWsF0AAR0YWdzc3EAfgAMHI7lcXQAC1NlZ21lbnRJbmZvc3EAfgAMvkuBI3QADGFzSW5zdGFuY2VPZnNxAH4ADP49t1d0AAxzeW5jaHJvbml6ZWRzcQB+AAygRHV+dAANJGlzSW5zdGFuY2VPZnNxAH4ADOWD0pJ0AA5jb3B5JGRlZmF1bHQkOHNxAH4ADDIslXF0AAlzdWJzY3JpYmVzcQB+AAxq/2bldAAIY2FuRXF1YWxzcQB+AAy9VZa8dAAOY29weSRkZWZhdWx0JDRzcQB+AAyD1NrzdAAKbmV3Q29udGV4dHNxAH4ADKoz2mp0AA1wcm9kdWN0UHJlZml4c3EAfgAMIgQclnQACW5vdGlmeUFsbHNxAH4ADOffirZ0AAxpc0luc3RhbmNlT2ZzcQB+AAwNMBkhdAAOY3VycmVudENvbnRleHRzcQB+AAwCwDcKdAAGPGluaXQ+c3EAfgAM+u2CUnQAC2VsYXBzZWRUaW1lc3EAfgAMZUUDUHQABWFwcGx5c3EAfgAMov33wnQAAj09c3EAfgAM89cvxXQABWNsb25lc3EAfgAMVoNLy3QAC3Vuc3Vic2NyaWJlc3EAfgAMV/x5TXQABnN0YXR1c3NxAH4ADA+qtF90AAV0b2tlbnNxAH4ADLausA50AAdsaWJyYXJ5c3EAfgAM3Ufm0XQACHNlZ21lbnRzc3EAfgAMUXAAdnQADmNvcHkkZGVmYXVsdCQ3c3EAfgAMQsdKe3QABiRpbml0JHNxAH4ADH0XcMp0ABBUcmFjZXJNb2R1bGVJbXBsc3EAfgAMZNFDLnQAFmRpc3BhdGNoVHJhY2luZ0NvbnRleHRzcQB+AAxSUFQGdAAUX3RyYWNlQ29udGV4dFN0b3JhZ2VzcQB+AAwbgGa3dAAOY29weSRkZWZhdWx0JDNzcQB+AAyB/KAHdAAEY29weXNxAH4ADGjQIy50AAhjYXRlZ29yeXNxAH4ADFZZRL10AAt3aXRoQ29udGV4dHNxAH4ADBy7r7R0AAhtZXRhZGF0YXNxAH4ADIfiyfx0ABNjbGVhckN1cnJlbnRDb250ZXh0c3EAfgAMN4+x7HQACHRvU3RyaW5nc3EAfgAMof8b8XQAAiE9c3EAfgAM+cLvtXQADndpdGhOZXdDb250ZXh0c3EAfgAMbVpl3XQACGdldENsYXNzc3EAfgAMxuN+NHQADmNvcHkkZGVmYXVsdCQxc3EAfgAMjOUh33QABXN0YXJ0c3EAfgAM6pOUP3QADmNvcHkkZGVmYXVsdCQ2c3EAfgAMsb0hMHQAAm5lc3EAfgAMG4J1A3QABlRyYWNlcnNxAH4ADM1Be/90AAlUcmFjZUluZm9zcQB+AAx7zogjdAACZXFzcQB+AAx7bAvrdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAMVYaSYXQADFRyYWNlck1vZHVsZXNxAH4ADK/DceZ0AAIjI3NxAH4ADCs9Q3d0AAhmaW5hbGl6ZXNxAH4ADBo6XZ90AA5wcm9kdWN0RWxlbWVudHNxAH4ADGWjGgp0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAZzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AJN4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ABhrYW1vbi50cmFjZS5UcmFjZXJNb2R1bGV1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAVUcmFpdHVyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAABzcgAheHNidGkuYXBpLkFic3RyYWN0TGF6eSRTdHJpY3RMYXp5DWYcaykWKrgCAAFMAAV2YWx1ZXQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwc3IAE3hzYnRpLmFwaS5FbXB0eVR5cGW8/Z5GSTuJJAIAAHhyABR4c2J0aS5hcGkuU2ltcGxlVHlwZXJ4YoghI79AAgAAeHIADnhzYnRpLmFwaS5UeXBlP2rZIRZJqsoCAAB4cHNxAH4Aq3NyABN4c2J0aS5hcGkuU3RydWN0dXJlqar5gJNv2AACAANMAAhkZWNsYXJlZHEAfgCTTAAJaW5oZXJpdGVkcQB+AJNMAAdwYXJlbnRzcQB+AJN4cQB+ALBzcQB+AKt1cQB+AI4AAAAAc3EAfgCrdXEAfgCOAAAAAHNxAH4Aq3VyABFbTHhzYnRpLmFwaS5UeXBlO3T/pVp7+elBAgAAeHAAAAACc3IAFHhzYnRpLmFwaS5Qcm9qZWN0aW9u89KNVOlFpC0CAAJMAAJpZHEAfgANTAAGcHJlZml4dAAWTHhzYnRpL2FwaS9TaW1wbGVUeXBlO3hxAH4Ar3QABk9iamVjdHNyABN4c2J0aS5hcGkuU2luZ2xldG9u/Kdf+M9W5EYCAAFMAARwYXRodAAQTHhzYnRpL2FwaS9QYXRoO3hxAH4Ar3NyAA54c2J0aS5hcGkuUGF0aJs9XAjOpSeEAgABWwAKY29tcG9uZW50c3QAGltMeHNidGkvYXBpL1BhdGhDb21wb25lbnQ7eHB1cgAaW0x4c2J0aS5hcGkuUGF0aENvbXBvbmVudDtD2gl0LWcWdAIAAHhwAAAAA3NyAAx4c2J0aS5hcGkuSWSYMmyLN1PEQAIAAUwAAmlkcQB+AA14cgAXeHNidGkuYXBpLlBhdGhDb21wb25lbnRfmiJbLoafvAIAAHhwdAAEamF2YXNxAH4AyHQABGxhbmdzcgAOeHNidGkuYXBpLlRoaXPbCe2mzFpAXAIAAHhxAH4AyXNxAH4AvHQA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vHQABkVxdWFsc3EAfgF0c3EAfgC8cQB+AL9zcQB+AMBzcQB+AMN1cQB+AMYAAAADc3EAfgDIcQB+AMtzcQB+AMhxAH4AzXEAfgDPc3EAfgC8cQB+ANFxAH4BdHVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQABWthbW9uc3EAfgGLdAALa2Ftb24udHJhY2VzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABR65NF0oBabnhCGJRchcS9aWbVDFQ==
kamon.trace.logging.MdcKeysSupport -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwUf4UcQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAZc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hw8u+TE3QABm5vdGlmeXNxAH4ADB32ac50AAR3YWl0c3EAfgAMKE9O3HQADSRhc0luc3RhbmNlT2ZzcQB+AAwU4l99dAAGZXF1YWxzc3EAfgAM2beRi3QADGFzSW5zdGFuY2VPZnNxAH4ADA1CYNV0AAljb3B5VG9NZGNzcQB+AAz2LfqadAAMc3luY2hyb25pemVkc3EAfgAMYnb0qHQADSRpc0luc3RhbmNlT2ZzcQB+AAxf+mljdAAJbm90aWZ5QWxsc3EAfgAMJHDk1nQADHRyYWNlTmFtZUtleXNxAH4ADMYP/e50AAxpc0luc3RhbmNlT2ZzcQB+AAwaG+1RdAAHd2l0aE1kY3NxAH4ADP/uNPZ0AAI9PXNxAH4ADIBSyB50AAVjbG9uZXNxAH4ADBw+LCd0AAYkaW5pdCRzcQB+AAzJsJvadAAIdG9TdHJpbmdzcQB+AAy2FvMPdAACIT1zcQB+AAxcBYBVdAAIZ2V0Q2xhc3NzcQB+AAwgF740dAANdHJhY2VUb2tlbktleXNxAH4ADKZfnoZ0AAJuZXNxAH4ADA5FtcJ0AAJlcXNxAH4ADHbENKN0AAIjI3NxAH4ADME22f50AAhmaW5hbGl6ZXNxAH4ADFsvC790AA5NZGNLZXlzU3VwcG9ydHNxAH4ADHGr+eN0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAJzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AEl4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ACJrYW1vbi50cmFjZS5sb2dnaW5nLk1kY0tleXNTdXBwb3J0dXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AGFzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4ASUwACWluaGVyaXRlZHEAfgBJTAAHcGFyZW50c3EAfgBJeHEAfgBmc3EAfgBhdXEAfgBEAAAAAHNxAH4AYXVxAH4ARAAAAABzcQB+AGF1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAAnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AGV0AAZPYmplY3RzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AGVzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABGphdmFzcQB+AH50AARsYW5nc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AH9zcQB+AHJ0AANBbnlzcQB+AHZzcQB+AHl1cQB+AHwAAAACc3EAfgB+dAAFc2NhbGFxAH4AhXNxAH4ARnEAfgBTdXEAfgBUAAAAAHNxAH4AVgB0ACJrYW1vbi50cmFjZS5sb2dnaW5nLk1kY0tleXNTdXBwb3J0dXEAfgBZAAAAAH5xAH4AW3QABk1vZHVsZXVxAH4AXwAAAABzcQB+AGFxAH4AZ3NxAH4AYXNxAH4AaXNxAH4AYXVxAH4ARAAAAABzcQB+AGF1cQB+AEQAAAAAc3EAfgBhdXEAfgBwAAAAA3NxAH4AcnQADk1kY0tleXNTdXBwb3J0c3EAfgB2c3EAfgB5dXEAfgB8AAAABHNxAH4AfnQABWthbW9uc3EAfgB+dAAFdHJhY2VzcQB+AH50AAdsb2dnaW5ncQB+AIVzcQB+AHJxAH4AdXNxAH4AdnNxAH4AeXVxAH4AfAAAAANzcQB+AH5xAH4AgXNxAH4AfnEAfgCDcQB+AIVzcQB+AHJxAH4Ah3NxAH4AdnNxAH4AeXVxAH4AfAAAAAJzcQB+AH5xAH4AjHEAfgCFdXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAANzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADXhwdAAFa2Ftb25zcQB+ALZ0ABNrYW1vbi50cmFjZS5sb2dnaW5nc3EAfgC2dAALa2Ftb24udHJhY2VzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABTvIQ48yFLnChHJ9ET2LoFTDdbTTw==
kamon.trace.logging.MdcKeysSupport$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwUf4UcQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAZc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hw8u+TE3QABm5vdGlmeXNxAH4ADB32ac50AAR3YWl0c3EAfgAMKE9O3HQADSRhc0luc3RhbmNlT2ZzcQB+AAwU4l99dAAGZXF1YWxzc3EAfgAM2beRi3QADGFzSW5zdGFuY2VPZnNxAH4ADA1CYNV0AAljb3B5VG9NZGNzcQB+AAz2LfqadAAMc3luY2hyb25pemVkc3EAfgAMYnb0qHQADSRpc0luc3RhbmNlT2ZzcQB+AAxf+mljdAAJbm90aWZ5QWxsc3EAfgAMJHDk1nQADHRyYWNlTmFtZUtleXNxAH4ADMYP/e50AAxpc0luc3RhbmNlT2ZzcQB+AAwaG+1RdAAHd2l0aE1kY3NxAH4ADP/uNPZ0AAI9PXNxAH4ADIBSyB50AAVjbG9uZXNxAH4ADBw+LCd0AAYkaW5pdCRzcQB+AAzJsJvadAAIdG9TdHJpbmdzcQB+AAy2FvMPdAACIT1zcQB+AAxcBYBVdAAIZ2V0Q2xhc3NzcQB+AAwgF740dAANdHJhY2VUb2tlbktleXNxAH4ADKZfnoZ0AAJuZXNxAH4ADA5FtcJ0AAJlcXNxAH4ADHbENKN0AAIjI3NxAH4ADME22f50AAhmaW5hbGl6ZXNxAH4ADFsvC790AA5NZGNLZXlzU3VwcG9ydHNxAH4ADHGr+eN0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAJzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AEl4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAF0ACJrYW1vbi50cmFjZS5sb2dnaW5nLk1kY0tleXNTdXBwb3J0dXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAFVHJhaXR1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AGFzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4ASUwACWluaGVyaXRlZHEAfgBJTAAHcGFyZW50c3EAfgBJeHEAfgBmc3EAfgBhdXEAfgBEAAAAAHNxAH4AYXVxAH4ARAAAAABzcQB+AGF1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAAnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AGV0AAZPYmplY3RzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AGVzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABGphdmFzcQB+AH50AARsYW5nc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AH9zcQB+AHJ0AANBbnlzcQB+AHZzcQB+AHl1cQB+AHwAAAACc3EAfgB+dAAFc2NhbGFxAH4AhXNxAH4ARnEAfgBTdXEAfgBUAAAAAHNxAH4AVgB0ACJrYW1vbi50cmFjZS5sb2dnaW5nLk1kY0tleXNTdXBwb3J0dXEAfgBZAAAAAH5xAH4AW3QABk1vZHVsZXVxAH4AXwAAAABzcQB+AGFxAH4AZ3NxAH4AYXNxAH4AaXNxAH4AYXVxAH4ARAAAAABzcQB+AGF1cQB+AEQAAAAAc3EAfgBhdXEAfgBwAAAAA3NxAH4AcnQADk1kY0tleXNTdXBwb3J0c3EAfgB2c3EAfgB5dXEAfgB8AAAABHNxAH4AfnQABWthbW9uc3EAfgB+dAAFdHJhY2VzcQB+AH50AAdsb2dnaW5ncQB+AIVzcQB+AHJxAH4AdXNxAH4AdnNxAH4AeXVxAH4AfAAAAANzcQB+AH5xAH4AgXNxAH4AfnEAfgCDcQB+AIVzcQB+AHJxAH4Ah3NxAH4AdnNxAH4AeXVxAH4AfAAAAAJzcQB+AH5xAH4AjHEAfgCFdXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAANzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADXhwdAAFa2Ftb25zcQB+ALZ0ABNrYW1vbi50cmFjZS5sb2dnaW5nc3EAfgC2dAALa2Ftb24udHJhY2VzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABTvIQ48yFLnChHJ9ET2LoFTDdbTTw==
kamon.util.GlobPathFilter -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwrCoXWAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAKc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwft18FXQABm5vdGlmeXNxAH4ADANu6TR0AAR3YWl0c3EAfgAMu8mOR3QABmFjY2VwdHNxAH4ADEfvqYN0AAZlcXVhbHNzcQB+AAwhKEoXdAAJbm90aWZ5QWxsc3EAfgAMkind1HQADkdsb2JQYXRoRmlsdGVyc3EAfgAMqWPlMXQABjxpbml0PnNxAH4ADCRK3gN0AAh0b1N0cmluZ3NxAH4ADJDWSzt0AAhnZXRDbGFzc3NxAH4ADDAVPph0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAJzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+ACt4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAR0ABlrYW1vbi51dGlsLkdsb2JQYXRoRmlsdGVydXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAABdAAMc2NhbGEudGhyb3dzc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AERzcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AK0wACWluaGVyaXRlZHEAfgArTAAHcGFyZW50c3EAfgAreHEAfgBJc3EAfgBEdXEAfgAmAAAAAHNxAH4ARHVxAH4AJgAAAABzcQB+AER1cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAAnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AEh0AAZPYmplY3RzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AEhzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABGphdmFzcQB+AGF0AARsYW5nc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AGJzcQB+AFV0AApQYXRoRmlsdGVyc3EAfgBZc3EAfgBcdXEAfgBfAAAAA3NxAH4AYXQABWthbW9uc3EAfgBhdAAEdXRpbHEAfgBoc3EAfgAocQB+ADVxAH4AN3EAfgA5cQB+ADpxAH4APH5xAH4APXQABk1vZHVsZXVxAH4AQQAAAABzcQB+AERxAH4ASnNxAH4ARHNxAH4ATHNxAH4ARHVxAH4AJgAAAABzcQB+AER1cQB+ACYAAAAAc3EAfgBEdXEAfgBTAAAAAHVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAABc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQACmthbW9uLnV0aWxzcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABQ+DvHBGH5vdhmp6HjJlwViY/LGMQ==
kamon.util.LazyActorRef -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwqCm6uAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAYc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwS7RM/nQABm5vdGlmeXNxAH4ADBJbxzN0AAVwb2ludHNxAH4ADFANZT90AAR3YWl0c3EAfgAMHe/7vHQADSRhc0luc3RhbmNlT2ZzcQB+AAz7Y0qpdAAGZXF1YWxzc3EAfgAMXfznN3QADGFzSW5zdGFuY2VPZnNxAH4ADAwAz2R0AAxzeW5jaHJvbml6ZWRzcQB+AAzL0+cbdAANJGlzSW5zdGFuY2VPZnNxAH4ADJlZVSx0AAlub3RpZnlBbGxzcQB+AAzeScCwdAAMaXNJbnN0YW5jZU9mc3EAfgAMI5kURHQABjxpbml0PnNxAH4ADO4sTnd0AAI9PXNxAH4ADHUJBzR0AA50ZWxsJGRlZmF1bHQkMnNxAH4ADOILmhN0AAVjbG9uZXNxAH4ADE2Gz2d0AAh0b1N0cmluZ3NxAH4ADLqhLoV0AAIhPXNxAH4ADPkgElJ0AAhnZXRDbGFzc3NxAH4ADMYa5tJ0AAJuZXNxAH4ADJCgvKZ0AAR0ZWxsc3EAfgAMde2LanQAAmVxc3EAfgAMn6UQOHQADExhenlBY3RvclJlZnNxAH4ADGUs1990AAIjI3NxAH4ADF4osqF0AAhmaW5hbGl6ZXNxAH4ADOU09l50AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAFzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AEd4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAB0ABdrYW1vbi51dGlsLkxhenlBY3RvclJlZnVyABpbTHhzYnRpLmFwaS5UeXBlUGFyYW1ldGVyO9ltJg8onfK2AgAAeHAAAAAAfnIAGHhzYnRpLmFwaS5EZWZpbml0aW9uVHlwZQAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQACENsYXNzRGVmdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAHNyACF4c2J0aS5hcGkuQWJzdHJhY3RMYXp5JFN0cmljdExhenkNZhxrKRYquAIAAUwABXZhbHVldAASTGphdmEvbGFuZy9PYmplY3Q7eHBzcgATeHNidGkuYXBpLkVtcHR5VHlwZbz9nkZJO4kkAgAAeHIAFHhzYnRpLmFwaS5TaW1wbGVUeXBlcnhiiCEjv0ACAAB4cgAOeHNidGkuYXBpLlR5cGU/atkhFkmqygIAAHhwc3EAfgBfc3IAE3hzYnRpLmFwaS5TdHJ1Y3R1cmWpqvmAk2/YAAIAA0wACGRlY2xhcmVkcQB+AEdMAAlpbmhlcml0ZWRxAH4AR0wAB3BhcmVudHNxAH4AR3hxAH4AZHNxAH4AX3VxAH4AQgAAAABzcQB+AF91cQB+AEIAAAAAc3EAfgBfdXIAEVtMeHNidGkuYXBpLlR5cGU7dP+lWnv56UECAAB4cAAAAAJzcgAUeHNidGkuYXBpLlByb2plY3Rpb27z0o1U6UWkLQIAAkwAAmlkcQB+AA1MAAZwcmVmaXh0ABZMeHNidGkvYXBpL1NpbXBsZVR5cGU7eHEAfgBjdAAGT2JqZWN0c3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgBjc3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAADc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADXhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AARqYXZhc3EAfgB8dAAEbGFuZ3NyAA54c2J0aS5hcGkuVGhpc9sJ7abMWkBcAgAAeHEAfgB9c3EAfgBwdAADQW55c3EAfgB0c3EAfgB3dXEAfgB6AAAAAnNxAH4AfHQABXNjYWxhcQB+AIN1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAAnNyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0AAprYW1vbi51dGlsc3EAfgCNdAAFa2Ftb25zcgAVeHNidGkuYXBpLkNvbXBpbGF0aW9u7frgw2rooEICAAJKAAlzdGFydFRpbWVbAAdvdXRwdXRzdAAaW0x4c2J0aS9hcGkvT3V0cHV0U2V0dGluZzt4cAAAAVjleYWgdXIAGltMeHNidGkuYXBpLk91dHB1dFNldHRpbmc7f2rC86eHpUICAAB4cAAAAAFzcgAXeHNidGkuYXBpLk91dHB1dFNldHRpbmd62ZpHdPsdewIAAkwAD291dHB1dERpcmVjdG9yeXEAfgANTAAPc291cmNlRGlyZWN0b3J5cQB+AA14cHQAPS9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL2NsYXNzZXN0AAEvdXIAAltCrPMX+AYIVOACAAB4cAAAABQ8aPGQmGe2BtSKlCq9a69IKxsa9A==
kamon.util.MilliTimestamp -> 

kamon.util.MilliTimestamp$ -> 

kamon.util.NanoInterval -> 

kamon.util.NanoInterval$ -> 

kamon.util.NeedToScale$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwwXuRvQAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAXc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwOznSlHQABm5vdGlmeXNxAH4ADCcweDZ0AAd1bmFwcGx5c3EAfgAMDCxqPHQACVRpbWVVbml0c3NxAH4ADEeTae50AAR3YWl0c3EAfgAM0SMlEXQADSRhc0luc3RhbmNlT2ZzcQB+AAxX6yVfdAAGZXF1YWxzc3EAfgAM0UJk6HQADGFzSW5zdGFuY2VPZnNxAH4ADG5mWDJ0AAxzeW5jaHJvbml6ZWRzcQB+AAzdNTq0dAALTWVtb3J5VW5pdHNzcQB+AAzgtybQdAANJGlzSW5zdGFuY2VPZnNxAH4ADKx7wEp0AAtOZWVkVG9TY2FsZXNxAH4ADJdGMtB0AAlub3RpZnlBbGxzcQB+AAwARJoPdAAMaXNJbnN0YW5jZU9mc3EAfgAMyCiKsXQAAj09c3EAfgAMfrRHl3QABWNsb25lc3EAfgAMH522EnQACHRvU3RyaW5nc3EAfgAMisqRnHQAAiE9c3EAfgAMxxFLIXQACGdldENsYXNzc3EAfgAMkqAMrHQAAm5lc3EAfgAM25+voHQAAmVxc3EAfgAM7VRBmXQAAiMjc3EAfgAM93UrunQACGZpbmFsaXplc3EAfgAMYo78Q3QACGhhc2hDb2Rlc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4ARXhyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AA14cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAHQAFmthbW9uLnV0aWwuTmVlZFRvU2NhbGV1cgAaW0x4c2J0aS5hcGkuVHlwZVBhcmFtZXRlcjvZbSYPKJ3ytgIAAHhwAAAAAH5yABh4c2J0aS5hcGkuRGVmaW5pdGlvblR5cGUAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AAZNb2R1bGV1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AF1zcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4ARUwACWluaGVyaXRlZHEAfgBFTAAHcGFyZW50c3EAfgBFeHEAfgBic3EAfgBddXEAfgBAAAAAAHNxAH4AXXVxAH4AQAAAAABzcQB+AF11cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAAnNyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AGF0AAZPYmplY3RzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AGFzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAANzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABGphdmFzcQB+AHp0AARsYW5nc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AHtzcQB+AG50AANBbnlzcQB+AHJzcQB+AHV1cQB+AHgAAAACc3EAfgB6dAAFc2NhbGFxAH4AgXVyABRbTHhzYnRpLmFwaS5QYWNrYWdlO1sTGTdwpyehAgAAeHAAAAACc3IAEXhzYnRpLmFwaS5QYWNrYWdlflmP9q7OOVgCAAFMAARuYW1lcQB+AA14cHQACmthbW9uLnV0aWxzcQB+AIt0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV5haB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AA1MAA9zb3VyY2VEaXJlY3RvcnlxAH4ADXhwdAA9L2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFHkIk1gIkSO30URaVXEiLa6uEkL1
kamon.util.RegexPathFilter -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwJijnQwAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAfc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwJFLUvXQABm5vdGlmeXNxAH4ADF79ud10AAR3YWl0c3EAfgAMlBRXXHQABmFjY2VwdHNxAH4ADLAScTh0AA0kYXNJbnN0YW5jZU9mc3EAfgAMBHQfunQABHBhdGhzcQB+AAyt2EFBdAAMcHJvZHVjdEFyaXR5c3EAfgAM5LRiwnQABmVxdWFsc3NxAH4ADD5hOR50AAxhc0luc3RhbmNlT2ZzcQB+AAy9jTB9dAAMc3luY2hyb25pemVkc3EAfgAMFghtgXQADSRpc0luc3RhbmNlT2ZzcQB+AAyX/Gf+dAAIY2FuRXF1YWxzcQB+AAzAVlXLdAANcHJvZHVjdFByZWZpeHNxAH4ADEiQNex0AAlub3RpZnlBbGxzcQB+AAxmGZpPdAAMaXNJbnN0YW5jZU9mc3EAfgAMKrZU0HQABjxpbml0PnNxAH4ADHm0XeJ0AAI9PXNxAH4ADFNELFR0AAVjbG9uZXNxAH4ADFgUixR0AA9SZWdleFBhdGhGaWx0ZXJzcQB+AAwuMx9kdAAGJGluaXQkc3EAfgAMuvqj2nQABGNvcHlzcQB+AAzFTXh1dAAIdG9TdHJpbmdzcQB+AAz2+zHgdAACIT1zcQB+AAwqZhLbdAAIZ2V0Q2xhc3NzcQB+AAwLXvDNdAAOY29weSRkZWZhdWx0JDFzcQB+AAzhJRNqdAACbmVzcQB+AAwtl/CidAACZXFzcQB+AAx3ZWbAdAAPcHJvZHVjdEl0ZXJhdG9yc3EAfgAM3z6vj3QAAiMjc3EAfgAMDcMN4nQACGZpbmFsaXplc3EAfgAMrgnkNXQADnByb2R1Y3RFbGVtZW50c3EAfgAMIQKkkXQACGhhc2hDb2Rlc3IAE3hzYnRpLmFwaS5Tb3VyY2VBUEm5Xqf5KSM4pAIAAlsAC2RlZmluaXRpb25zdAAXW0x4c2J0aS9hcGkvRGVmaW5pdGlvbjtbAAhwYWNrYWdlc3QAFFtMeHNidGkvYXBpL1BhY2thZ2U7eHB1cgAXW0x4c2J0aS5hcGkuRGVmaW5pdGlvbjuIyVzntONeDgIAAHhwAAAAAXNyABN4c2J0aS5hcGkuQ2xhc3NMaWtlgzQcod+wl2wCAARMAA5kZWZpbml0aW9uVHlwZXQAGkx4c2J0aS9hcGkvRGVmaW5pdGlvblR5cGU7WwAQc2F2ZWRBbm5vdGF0aW9uc3QAE1tMamF2YS9sYW5nL1N0cmluZztMAAhzZWxmVHlwZXQAEEx4c2J0aS9hcGkvTGF6eTtMAAlzdHJ1Y3R1cmVxAH4AVXhyACF4c2J0aS5hcGkuUGFyYW1ldGVyaXplZERlZmluaXRpb275EW6x1VA84gIAAVsADnR5cGVQYXJhbWV0ZXJzdAAaW0x4c2J0aS9hcGkvVHlwZVBhcmFtZXRlcjt4cgAUeHNidGkuYXBpLkRlZmluaXRpb26HKhvocULjRgIABEwABmFjY2Vzc3QAEkx4c2J0aS9hcGkvQWNjZXNzO1sAC2Fubm90YXRpb25zdAAXW0x4c2J0aS9hcGkvQW5ub3RhdGlvbjtMAAltb2RpZmllcnN0ABVMeHNidGkvYXBpL01vZGlmaWVycztMAARuYW1lcQB+AA14cHNyABB4c2J0aS5hcGkuUHVibGljulg9rmwtYEICAAB4cgAQeHNidGkuYXBpLkFjY2Vzc91imvgdYzFIAgAAeHB1cgAXW0x4c2J0aS5hcGkuQW5ub3RhdGlvbjvrl+sZEPaNSAIAAHhwAAAAAHNyABN4c2J0aS5hcGkuTW9kaWZpZXJzl+dh3BMme7MCAAFCAAVmbGFnc3hwAHQAGmthbW9uLnV0aWwuUmVnZXhQYXRoRmlsdGVydXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAIQ2xhc3NEZWZ1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAAAc3IAIXhzYnRpLmFwaS5BYnN0cmFjdExhenkkU3RyaWN0TGF6eQ1mHGspFiq4AgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyABN4c2J0aS5hcGkuRW1wdHlUeXBlvP2eRkk7iSQCAAB4cgAUeHNidGkuYXBpLlNpbXBsZVR5cGVyeGKIISO/QAIAAHhyAA54c2J0aS5hcGkuVHlwZT9q2SEWSarKAgAAeHBzcQB+AG1zcgATeHNidGkuYXBpLlN0cnVjdHVyZamq+YCTb9gAAgADTAAIZGVjbGFyZWRxAH4AVUwACWluaGVyaXRlZHEAfgBVTAAHcGFyZW50c3EAfgBVeHEAfgByc3EAfgBtdXEAfgBQAAAAAHNxAH4AbXVxAH4AUAAAAABzcQB+AG11cgARW0x4c2J0aS5hcGkuVHlwZTt0/6Vae/npQQIAAHhwAAAAB3NyABR4c2J0aS5hcGkuUHJvamVjdGlvbvPSjVTpRaQtAgACTAACaWRxAH4ADUwABnByZWZpeHQAFkx4c2J0aS9hcGkvU2ltcGxlVHlwZTt4cQB+AHF0AAxTZXJpYWxpemFibGVzcgATeHNidGkuYXBpLlNpbmdsZXRvbvynX/jPVuRGAgABTAAEcGF0aHQAEEx4c2J0aS9hcGkvUGF0aDt4cQB+AHFzcgAOeHNidGkuYXBpLlBhdGibPVwIzqUnhAIAAVsACmNvbXBvbmVudHN0ABpbTHhzYnRpL2FwaS9QYXRoQ29tcG9uZW50O3hwdXIAGltMeHNidGkuYXBpLlBhdGhDb21wb25lbnQ7Q9oJdC1nFnQCAAB4cAAAAAJzcgAMeHNidGkuYXBpLklkmDJsizdTxEACAAFMAAJpZHEAfgANeHIAF3hzYnRpLmFwaS5QYXRoQ29tcG9uZW50X5oiWy6Gn7wCAAB4cHQABXNjYWxhc3IADnhzYnRpLmFwaS5UaGlz2wntpsxaQFwCAAB4cQB+AItzcQB+AH5xAH4AgXNxAH4AgnNxAH4AhXVxAH4AiAAAAANzcQB+AIp0AARqYXZhc3EAfgCKdAACaW9xAH4Aj3NxAH4AfnQAB1Byb2R1Y3RxAH4AhHNxAH4AfnQABkVxdWFsc3EAfgCEc3EAfgB+dAAKUGF0aEZpbHRlcnNxAH4AgnNxAH4AhXVxAH4AiAAAAANzcQB+AIp0AAVrYW1vbnNxAH4AinQABHV0aWxxAH4Aj3NxAH4AfnQABk9iamVjdHNxAH4AgnNxAH4AhXVxAH4AiAAAAANzcQB+AIpxAH4AlXNxAH4AinQABGxhbmdxAH4Aj3NxAH4AfnQAA0FueXEAfgCEdXIAFFtMeHNidGkuYXBpLlBhY2thZ2U7WxMZN3CnJ6ECAAB4cAAAAAJzcgAReHNidGkuYXBpLlBhY2thZ2V+WY/2rs45WAIAAUwABG5hbWVxAH4ADXhwdAAKa2Ftb24udXRpbHNxAH4AsXQABWthbW9uc3IAFXhzYnRpLmFwaS5Db21waWxhdGlvbu364MNq6KBCAgACSgAJc3RhcnRUaW1lWwAHb3V0cHV0c3QAGltMeHNidGkvYXBpL091dHB1dFNldHRpbmc7eHAAAAFY5XmFoHVyABpbTHhzYnRpLmFwaS5PdXRwdXRTZXR0aW5nO39qwvOnh6VCAgAAeHAAAAABc3IAF3hzYnRpLmFwaS5PdXRwdXRTZXR0aW5netmaR3T7HXsCAAJMAA9vdXRwdXREaXJlY3RvcnlxAH4ADUwAD3NvdXJjZURpcmVjdG9yeXEAfgANeHB0AD0vaG9tZS9kaWVnby9naXRIdWIvS2Ftb24va2Ftb24tY29yZS90YXJnZXQvc2NhbGEtMi4xMi9jbGFzc2VzdAABL3VyAAJbQqzzF/gGCFTgAgAAeHAAAAAUwKjUtpBTLfrTpAJCxxid4HUVjAU=
kamon.util.executors.ExecutorServiceMetrics$ -> 
rO0ABXNyABB4c2J0aS5hcGkuU291cmNlSjH5SdlLSkQCAAdJAAdhcGlIYXNoWgAIaGFzTWFjcm9aABBoYXNQYWNrYWdlT2JqZWN0TAAYX2ludGVybmFsT25seV9uYW1lSGFzaGVzdAAkTHhzYnRpL2FwaS9faW50ZXJuYWxPbmx5X05hbWVIYXNoZXM7TAADYXBpdAAVTHhzYnRpL2FwaS9Tb3VyY2VBUEk7TAALY29tcGlsYXRpb250ABdMeHNidGkvYXBpL0NvbXBpbGF0aW9uO1sABGhhc2h0AAJbQnhwFE9XZAAAc3IAInhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoZXNU2r6Z+tTsTAIAAlsAD2ltcGxpY2l0TWVtYmVyc3QAI1tMeHNidGkvYXBpL19pbnRlcm5hbE9ubHlfTmFtZUhhc2g7WwAOcmVndWxhck1lbWJlcnNxAH4AB3hwdXIAI1tMeHNidGkuYXBpLl9pbnRlcm5hbE9ubHlfTmFtZUhhc2g7SVqAtt2Wi/QCAAB4cAAAAAB1cQB+AAkAAAAyc3IAIHhzYnRpLmFwaS5faW50ZXJuYWxPbmx5X05hbWVIYXNoWw71InY4V88CAAJJAARoYXNoTAAEbmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwGYMPkHQABm5vdGlmeXNxAH4ADKGFJi50AAhyZWdpc3RlcnNxAH4ADN4LoGl0AAd1bmFwcGx5c3EAfgAMCxp+GnQAD3ByaW50U3RhY2tUcmFjZXNxAH4ADPh+BC10ABNnZXRMb2NhbGl6ZWRNZXNzYWdlc3EAfgAMO0BF+nQABHdhaXRzcQB+AAyF0LujdAANJGFzSW5zdGFuY2VPZnNxAH4ADBEPflJ0AAdjb21wb3Nlc3EAfgAMNCE55XQACENhdGVnb3J5c3EAfgAMQOKG/nQADHByb2R1Y3RBcml0eXNxAH4ADFJetbx0AAZlcXVhbHNzcQB+AAzMPkM5dAAQZmlsbEluU3RhY2tUcmFjZXNxAH4ADIPTnqF0AAlpbml0Q2F1c2VzcQB+AAzXEyZYdAAMYXNJbnN0YW5jZU9mc3EAfgAMO8xllnQADHN5bmNocm9uaXplZHNxAH4ADNVq0tJ0AA0kaXNJbnN0YW5jZU9mc3EAfgAMSRSM7XQAB2FuZFRoZW5zcQB+AAyH5vd/dAAWRXhlY3V0b3JTZXJ2aWNlTWV0cmljc3NxAH4ADHx6wA10AAhnZXRDYXVzZXNxAH4ADLhIUT50AAhjYW5FcXVhbHNxAH4ADGQNBwt0AA1wcm9kdWN0UHJlZml4c3EAfgAMCGNTrnQACW5vdGlmeUFsbHNxAH4ADDOjBo90AAxpc0luc3RhbmNlT2ZzcQB+AAwW79utdAANZ2V0U3RhY2tUcmFjZXNxAH4ADNonEgJ0ABRnZXRTdGFja1RyYWNlRWxlbWVudHNxAH4ADKVSnyV0AAY8aW5pdD5zcQB+AAxOmXNldAAKZ2V0TWVzc2FnZXNxAH4ADHAbbaV0AA1zZXRTdGFja1RyYWNlc3EAfgAM531+F3QABnJlbW92ZXNxAH4ADEkzOMl0AAVhcHBseXNxAH4ADMwFOIZ0AA1nZXRTdXBwcmVzc2Vkc3EAfgAMtNL+IHQAAj09c3EAfgAM2AQ2M3QAEmdldFN0YWNrVHJhY2VEZXB0aHNxAH4ADOnrbNB0AAVjbG9uZXNxAH4ADPkyuxN0AA1hZGRTdXBwcmVzc2Vkc3EAfgAMJr5Z6nQABiRpbml0JHNxAH4ADLRtRrt0AARjb3B5c3EAfgAMEHVlD3QAB21lc3NhZ2VzcQB+AAxlxemQdAAIdG9TdHJpbmdzcQB+AAzyM66UdAACIT1zcQB+AAy0dsDidAAVTm90U3VwcG9ydGVkRXhjZXB0aW9uc3EAfgAMQp5O4XQACGdldENsYXNzc3EAfgAMyWHbL3QADmNvcHkkZGVmYXVsdCQxc3EAfgAMVF14JnQAAm5lc3EAfgAMj2u/G3QAAmVxc3EAfgAM/d7Td3QAD3Byb2R1Y3RJdGVyYXRvcnNxAH4ADBJHKcV0AAIjI3NxAH4ADGQ35OZ0AAhmaW5hbGl6ZXNxAH4ADJIeq8d0AA5wcm9kdWN0RWxlbWVudHNxAH4ADF6hJcl0AAhoYXNoQ29kZXNyABN4c2J0aS5hcGkuU291cmNlQVBJuV6n+SkjOKQCAAJbAAtkZWZpbml0aW9uc3QAF1tMeHNidGkvYXBpL0RlZmluaXRpb247WwAIcGFja2FnZXN0ABRbTHhzYnRpL2FwaS9QYWNrYWdlO3hwdXIAF1tMeHNidGkuYXBpLkRlZmluaXRpb247iMlc57TjXg4CAAB4cAAAAAFzcgATeHNidGkuYXBpLkNsYXNzTGlrZYM0HKHfsJdsAgAETAAOZGVmaW5pdGlvblR5cGV0ABpMeHNidGkvYXBpL0RlZmluaXRpb25UeXBlO1sAEHNhdmVkQW5ub3RhdGlvbnN0ABNbTGphdmEvbGFuZy9TdHJpbmc7TAAIc2VsZlR5cGV0ABBMeHNidGkvYXBpL0xhenk7TAAJc3RydWN0dXJlcQB+AHt4cgAheHNidGkuYXBpLlBhcmFtZXRlcml6ZWREZWZpbml0aW9u+RFusdVQPOICAAFbAA50eXBlUGFyYW1ldGVyc3QAGltMeHNidGkvYXBpL1R5cGVQYXJhbWV0ZXI7eHIAFHhzYnRpLmFwaS5EZWZpbml0aW9uhyob6HFC40YCAARMAAZhY2Nlc3N0ABJMeHNidGkvYXBpL0FjY2VzcztbAAthbm5vdGF0aW9uc3QAF1tMeHNidGkvYXBpL0Fubm90YXRpb247TAAJbW9kaWZpZXJzdAAVTHhzYnRpL2FwaS9Nb2RpZmllcnM7TAAEbmFtZXEAfgANeHBzcgAQeHNidGkuYXBpLlB1YmxpY7pYPa5sLWBCAgAAeHIAEHhzYnRpLmFwaS5BY2Nlc3PdYpr4HWMxSAIAAHhwdXIAF1tMeHNidGkuYXBpLkFubm90YXRpb24765frGRD2jUgCAAB4cAAAAABzcgATeHNidGkuYXBpLk1vZGlmaWVyc5fnYdwTJnuzAgABQgAFZmxhZ3N4cAB0ACtrYW1vbi51dGlsLmV4ZWN1dG9ycy5FeGVjdXRvclNlcnZpY2VNZXRyaWNzdXIAGltMeHNidGkuYXBpLlR5cGVQYXJhbWV0ZXI72W0mDyid8rYCAAB4cAAAAAB+cgAYeHNidGkuYXBpLkRlZmluaXRpb25UeXBlAAAAAAAAAAASAAB4cgAOamF2YS5sYW5nLkVudW0AAAAAAAAAABIAAHhwdAAGTW9kdWxldXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAHNyACF4c2J0aS5hcGkuQWJzdHJhY3RMYXp5JFN0cmljdExhenkNZhxrKRYquAIAAUwABXZhbHVldAASTGphdmEvbGFuZy9PYmplY3Q7eHBzcgATeHNidGkuYXBpLkVtcHR5VHlwZbz9nkZJO4kkAgAAeHIAFHhzYnRpLmFwaS5TaW1wbGVUeXBlcnhiiCEjv0ACAAB4cgAOeHNidGkuYXBpLlR5cGU/atkhFkmqygIAAHhwc3EAfgCTc3IAE3hzYnRpLmFwaS5TdHJ1Y3R1cmWpqvmAk2/YAAIAA0wACGRlY2xhcmVkcQB+AHtMAAlpbmhlcml0ZWRxAH4Ae0wAB3BhcmVudHNxAH4Ae3hxAH4AmHNxAH4Ak3VxAH4AdgAAAABzcQB+AJN1cQB+AHYAAAAAc3EAfgCTdXIAEVtMeHNidGkuYXBpLlR5cGU7dP+lWnv56UECAAB4cAAAAAJzcgAUeHNidGkuYXBpLlByb2plY3Rpb27z0o1U6UWkLQIAAkwAAmlkcQB+AA1MAAZwcmVmaXh0ABZMeHNidGkvYXBpL1NpbXBsZVR5cGU7eHEAfgCXdAAGT2JqZWN0c3IAE3hzYnRpLmFwaS5TaW5nbGV0b278p1/4z1bkRgIAAUwABHBhdGh0ABBMeHNidGkvYXBpL1BhdGg7eHEAfgCXc3IADnhzYnRpLmFwaS5QYXRomz1cCM6lJ4QCAAFbAApjb21wb25lbnRzdAAaW0x4c2J0aS9hcGkvUGF0aENvbXBvbmVudDt4cHVyABpbTHhzYnRpLmFwaS5QYXRoQ29tcG9uZW50O0PaCXQtZxZ0AgAAeHAAAAADc3IADHhzYnRpLmFwaS5JZJgybIs3U8RAAgABTAACaWRxAH4ADXhyABd4c2J0aS5hcGkuUGF0aENvbXBvbmVudF+aIlsuhp+8AgAAeHB0AARqYXZhc3EAfgCwdAAEbGFuZ3NyAA54c2J0aS5hcGkuVGhpc9sJ7abMWkBcAgAAeHEAfgCxc3EAfgCkdAADQW55c3EAfgCoc3EAfgCrdXEAfgCuAAAAAnNxAH4AsHQABXNjYWxhcQB+ALd1cgAUW0x4c2J0aS5hcGkuUGFja2FnZTtbExk3cKcnoQIAAHhwAAAAA3NyABF4c2J0aS5hcGkuUGFja2FnZX5Zj/auzjlYAgABTAAEbmFtZXEAfgANeHB0ABRrYW1vbi51dGlsLmV4ZWN1dG9yc3NxAH4AwXQACmthbW9uLnV0aWxzcQB+AMF0AAVrYW1vbnNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV5haB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5cQB+AA1MAA9zb3VyY2VEaXJlY3RvcnlxAH4ADXhwdAA9L2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvdGFyZ2V0L3NjYWxhLTIuMTIvY2xhc3Nlc3QAAS91cgACW0Ks8xf4BghU4AIAAHhwAAAAFOu9D2W6wc5fHW/LDtRn6rces0Et
source infos:
20 items
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/MetricScaleDecoratorSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SimpleMetricsSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/SubscriptionsProtocolSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TickMetricSnapshotBufferSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/TraceMetricsSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/CounterSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/GaugeSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/HistogramSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/MinMaxCounterSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/metric/instrument/UnitOfMeasurementSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/testkit/BaseKamonSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SamplerSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/SimpleTraceSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceContextManipulationSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/TraceLocalSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/trace/logging/MdcKeysSupportSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/GlobPathFilterSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/NeedToScaleSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/RegexPathFilterSpec.scala -> 
AAAAAAAAAAA=
/home/diego/gitHub/Kamon/kamon-core/src/test/scala/kamon/util/executors/ExecutorServiceMetricsSpec.scala -> 
AAAAAQAAAQAAAEEASiAgICAgIHZhbCBzY2FsYUZvcmtKb2luUG9vbCA9IG5ldyBzY2FsYS5jb25jdXJyZW50LmZvcmtqb2luLkZvcmtKb2luUG9vbCgpAQAADHQBAAAAPAEAPCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAEAaC9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3NyYy90ZXN0L3NjYWxhL2thbW9uL3V0aWwvZXhlY3V0b3JzL0V4ZWN1dG9yU2VydmljZU1ldHJpY3NTcGVjLnNjYWxhAQBoL2hvbWUvZGllZ28vZ2l0SHViL0thbW9uL2thbW9uLWNvcmUvc3JjL3Rlc3Qvc2NhbGEva2Ftb24vdXRpbC9leGVjdXRvcnMvRXhlY3V0b3JTZXJ2aWNlTWV0cmljc1NwZWMuc2NhbGEAiXR5cGUgRm9ya0pvaW5Qb29sIGluIHBhY2thZ2UgZm9ya2pvaW4gaXMgZGVwcmVjYXRlZCAoc2luY2UgMi4xMi4wKTogdXNlIGphdmEudXRpbC5jb25jdXJyZW50LkZvcmtKb2luUG9vbCBkaXJlY3RseSwgaW5zdGVhZCBvZiB0aGlzIGFsaWFzAQAAAAA=
compilations:
7 items
0 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOBchzB1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQAQi9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL3Rlc3QtY2xhc3Nlc3QAAS8=
1 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOBgGa11cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQAQi9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL3Rlc3QtY2xhc3Nlc3QAAS8=
2 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOBjgjN1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQAQi9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL3Rlc3QtY2xhc3Nlc3QAAS8=
3 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOBmbnx1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQAQi9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL3Rlc3QtY2xhc3Nlc3QAAS8=
4 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOBofmx1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQAQi9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL3Rlc3QtY2xhc3Nlc3QAAS8=
5 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOBrEb51cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQAQi9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL3Rlc3QtY2xhc3Nlc3QAAS8=
6 -> rO0ABXNyABV4c2J0aS5hcGkuQ29tcGlsYXRpb27t+uDDauigQgIAAkoACXN0YXJ0VGltZVsAB291dHB1dHN0ABpbTHhzYnRpL2FwaS9PdXRwdXRTZXR0aW5nO3hwAAABWOV6O0Z1cgAaW0x4c2J0aS5hcGkuT3V0cHV0U2V0dGluZzt/asLzp4elQgIAAHhwAAAAAXNyABd4c2J0aS5hcGkuT3V0cHV0U2V0dGluZ3rZmkd0+x17AgACTAAPb3V0cHV0RGlyZWN0b3J5dAASTGphdmEvbGFuZy9TdHJpbmc7TAAPc291cmNlRGlyZWN0b3J5cQB+AAZ4cHQAQi9ob21lL2RpZWdvL2dpdEh1Yi9LYW1vbi9rYW1vbi1jb3JlL3RhcmdldC9zY2FsYS0yLjEyL3Rlc3QtY2xhc3Nlc3QAAS8=
